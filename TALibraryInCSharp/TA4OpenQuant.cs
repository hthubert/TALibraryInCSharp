using System;
namespace TALibrary
{
public partial class Core
{
        private static RetCode TA_INT_EMA(int startIdx,int endIdx,SmartQuant.ISeries inReal_0,int optInTimePeriod_0,double optInK_1,ref int outBegIdx,ref int outNbElement,double[] outReal_0)
        {
            int today;
            double prevMA;
            int lookbackTotal = EmaLookback(optInTimePeriod_0);
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNbElement = 0;
                return RetCode.Success;
            }
            outBegIdx = startIdx;
            if (Globals.compatibility != Compatibility.Default) {
                prevMA = inReal_0[0];
                today = 1;
            }
            else {
                today = startIdx - lookbackTotal;
                int i = optInTimePeriod_0;
                double tempReal = 0.0;
                while (true) {
                    i--;
                    if (i <= 0) {
                        break;
                    }
                    tempReal += inReal_0[today];
                    today++;
                }
                prevMA = tempReal / ((double)optInTimePeriod_0);
            }
            while (today <= startIdx) {
                prevMA = ((inReal_0[today] - prevMA) * optInK_1) + prevMA;
                today++;
            }
            outReal_0[0] = prevMA;
            int outIdx = 1;
            while (true) {
                if (today > endIdx) {
                    break;
                }
                prevMA = ((inReal_0[today] - prevMA) * optInK_1) + prevMA;
                today++;
                outReal_0[outIdx] = prevMA;
                outIdx++;
            }
            outNbElement = outIdx;
            return RetCode.Success;
        }
        private static RetCode TA_INT_MACD(int startIdx,int endIdx,SmartQuant.ISeries inReal_0,int optInFastPeriod_0,int optInSlowPeriod_1,int optInSignalPeriod_2,ref int outBegIdx,ref int outNbElement,double[] outMACD_0,double[] outMACDSignal_1,double[] outMACDHist_2)
        {
            int i;
            int tempInteger = 0;
            int outNbElement1 = 0;
            int outNbElement2 = 0;
            double k2;
            double k1;
            int outBegIdx2 = 0;
            int outBegIdx1 = 0;
            if (optInSlowPeriod_1 < optInFastPeriod_0) {
                tempInteger = optInSlowPeriod_1;
                optInSlowPeriod_1 = optInFastPeriod_0;
                optInFastPeriod_0 = tempInteger;
            }
            if (optInSlowPeriod_1 != 0) {
                k1 = 2.0 / ((double)(optInSlowPeriod_1 + 1));
            }
            else {
                optInSlowPeriod_1 = 0x1a;
                k1 = 0.075;
            }
            if (optInFastPeriod_0 != 0) {
                k2 = 2.0 / ((double)(optInFastPeriod_0 + 1));
            }
            else {
                optInFastPeriod_0 = 12;
                k2 = 0.15;
            }
            int lookbackSignal = EmaLookback(optInSignalPeriod_2);
            int lookbackTotal = lookbackSignal;
            lookbackTotal += EmaLookback(optInSlowPeriod_1);
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNbElement = 0;
                return RetCode.Success;
            }
            tempInteger = ((endIdx - startIdx) + 1) + lookbackSignal;
            double[] fastEMABuffer = new double[tempInteger];
            if (fastEMABuffer == null) {
                outBegIdx = 0;
                outNbElement = 0;
                return RetCode.AllocErr;
            }
            double[] slowEMABuffer = new double[tempInteger];
            if (slowEMABuffer == null) {
                outBegIdx = 0;
                outNbElement = 0;
                return RetCode.AllocErr;
            }
            tempInteger = startIdx - lookbackSignal;
            RetCode retCode = TA_INT_EMA(tempInteger, endIdx, inReal_0, optInSlowPeriod_1, k1, ref outBegIdx1, ref outNbElement1, slowEMABuffer);
            if (retCode != RetCode.Success) {
                outBegIdx = 0;
                outNbElement = 0;
                return retCode;
            }
            retCode = TA_INT_EMA(tempInteger, endIdx, inReal_0, optInFastPeriod_0, k2, ref outBegIdx2, ref outNbElement2, fastEMABuffer);
            if (retCode != RetCode.Success) {
                outBegIdx = 0;
                outNbElement = 0;
                return retCode;
            }
            if (((outBegIdx1 != tempInteger) || (outBegIdx2 != tempInteger)) || ((outNbElement1 != outNbElement2) || (outNbElement1 != (((endIdx - startIdx) + 1) + lookbackSignal)))) {
                outBegIdx = 0;
                outNbElement = 0;
                return RetCode.InternalError;
            }
            for (i = 0; i < outNbElement1; i++) {
                fastEMABuffer[i] -= slowEMABuffer[i];
            }
            Array.Copy(fastEMABuffer, lookbackSignal, outMACD_0, 0, (endIdx - startIdx) + 1);
            retCode = TA_INT_EMA(0, outNbElement1 - 1, fastEMABuffer, optInSignalPeriod_2, 2.0 / ((double)(optInSignalPeriod_2 + 1)), ref outBegIdx2, ref outNbElement2, outMACDSignal_1);
            if (retCode != RetCode.Success) {
                outBegIdx = 0;
                outNbElement = 0;
                return retCode;
            }
            for (i = 0; i < outNbElement2; i++) {
                outMACDHist_2[i] = outMACD_0[i] - outMACDSignal_1[i];
            }
            outBegIdx = startIdx;
            outNbElement = outNbElement2;
            return RetCode.Success;
        }
        private static RetCode TA_INT_PO(int startIdx,int endIdx,SmartQuant.ISeries inReal_0,int optInFastPeriod_0,int optInSlowPeriod_1,MAType optInMethod_2,ref int outBegIdx,ref int outNbElement,double[] outReal_0,double[] tempBuffer,int doPercentageOutput)
        {
            int tempInteger = 0;
            int outBegIdx2 = 0;
            int outNbElement2 = 0;
            if (optInSlowPeriod_1 < optInFastPeriod_0) {
                tempInteger = optInSlowPeriod_1;
                optInSlowPeriod_1 = optInFastPeriod_0;
                optInFastPeriod_0 = tempInteger;
            }
            RetCode retCode = MovingAverage(startIdx, endIdx, inReal_0, optInFastPeriod_0, optInMethod_2, ref outBegIdx2, ref outNbElement2, tempBuffer);
            if (retCode == RetCode.Success) {
                int outNbElement1 = 0;
                int outBegIdx1 = 0;
                retCode = MovingAverage(startIdx, endIdx, inReal_0, optInSlowPeriod_1, optInMethod_2, ref outBegIdx1, ref outNbElement1, outReal_0);
                if (retCode == RetCode.Success) {
                    int i;
                    int j;
                    tempInteger = outBegIdx1 - outBegIdx2;
                    if (doPercentageOutput == 0) {
                        i = 0;
                        j = tempInteger;
                        while (i < outNbElement1) {
                            outReal_0[i] = tempBuffer[j] - outReal_0[i];
                            i++;
                            j++;
                        }
                    }
                    else {
                        i = 0;
                        for (j = tempInteger; i < outNbElement1; j++) {
                            double tempReal = outReal_0[i];
                            if ((-1E-08 >= tempReal) || (tempReal >= 1E-08)) {
                                outReal_0[i] = ((tempBuffer[j] - tempReal) / tempReal) * 100.0;
                            }
                            else {
                                outReal_0[i] = 0.0;
                            }
                            i++;
                        }
                    }
                    outBegIdx = outBegIdx1;
                    outNbElement = outNbElement1;
                }
            }
            if (retCode != RetCode.Success) {
                outBegIdx = 0;
                outNbElement = 0;
            }
            return retCode;
        }
        private static RetCode TA_INT_SMA(int startIdx,int endIdx,SmartQuant.ISeries inReal_0,int optInTimePeriod_0,ref int outBegIdx,ref int outNbElement,double[] outReal_0)
        {
            int lookbackTotal = optInTimePeriod_0 - 1;
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNbElement = 0;
                return RetCode.Success;
            }
            double periodTotal = 0.0;
            int trailingIdx = startIdx - lookbackTotal;
            int i = trailingIdx;
            if (optInTimePeriod_0 > 1) {
                while (i < startIdx) {
                    periodTotal += inReal_0[i];
                    i++;
                }
            }
            int outIdx = 0;
            do {
                periodTotal += inReal_0[i];
                i++;
                double tempReal = periodTotal;
                periodTotal -= inReal_0[trailingIdx];
                trailingIdx++;
                outReal_0[outIdx] = tempReal / ((double)optInTimePeriod_0);
                outIdx++;
            }
            while (i <= endIdx);
            outNbElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        private static void TA_INT_stddev_using_precalc_ma(SmartQuant.ISeries inReal,double[] inMovAvg,int inMovAvgBegIdx,int inMovAvgNbElement,int timePeriod,double[] output)
        {
            double tempReal;
            int outIdx;
            int startSum = (inMovAvgBegIdx + 1) - timePeriod;
            int endSum = inMovAvgBegIdx;
            double periodTotal2 = 0.0;
            for (outIdx = startSum; outIdx < endSum; outIdx++) {
                tempReal = inReal[outIdx];
                tempReal *= tempReal;
                periodTotal2 += tempReal;
            }
            outIdx = 0;
            while (outIdx < inMovAvgNbElement) {
                tempReal = inReal[endSum];
                tempReal *= tempReal;
                periodTotal2 += tempReal;
                double meanValue2 = periodTotal2 / ((double)timePeriod);
                tempReal = inReal[startSum];
                tempReal *= tempReal;
                periodTotal2 -= tempReal;
                tempReal = inMovAvg[outIdx];
                tempReal *= tempReal;
                meanValue2 -= tempReal;
                if (meanValue2 >= 1E-08) {
                    output[outIdx] = Math.Sqrt(meanValue2);
                }
                else {
                    output[outIdx] = 0.0;
                }
                outIdx++;
                startSum++;
                endSum++;
            }
        }
        private static RetCode TA_INT_VAR(int startIdx,int endIdx,SmartQuant.ISeries inReal_0,int optInTimePeriod_0,ref int outBegIdx,ref int outNbElement,double[] outReal_0)
        {
            double tempReal;
            int nbInitialElementNeeded = optInTimePeriod_0 - 1;
            if (startIdx < nbInitialElementNeeded) {
                startIdx = nbInitialElementNeeded;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNbElement = 0;
                return RetCode.Success;
            }
            double periodTotal1 = 0.0;
            double periodTotal2 = 0.0;
            int trailingIdx = startIdx - nbInitialElementNeeded;
            int i = trailingIdx;
            if (optInTimePeriod_0 > 1) {
                while (i < startIdx) {
                    tempReal = inReal_0[i];
                    i++;
                    periodTotal1 += tempReal;
                    tempReal *= tempReal;
                    periodTotal2 += tempReal;
                }
            }
            int outIdx = 0;
            do {
                tempReal = inReal_0[i];
                i++;
                periodTotal1 += tempReal;
                tempReal *= tempReal;
                periodTotal2 += tempReal;
                double meanValue1 = periodTotal1 / ((double)optInTimePeriod_0);
                double meanValue2 = periodTotal2 / ((double)optInTimePeriod_0);
                tempReal = inReal_0[trailingIdx];
                trailingIdx++;
                periodTotal1 -= tempReal;
                tempReal *= tempReal;
                periodTotal2 -= tempReal;
                outReal_0[outIdx] = meanValue2 - (meanValue1 * meanValue1);
                outIdx++;
            }
            while (i <= endIdx);
            outNbElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode Acos(int startIdx,int endIdx,SmartQuant.ISeries inReal,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int i = startIdx;
            int outIdx = 0;
            while (i <= endIdx) {
                outReal[outIdx] = Math.Acos(inReal[i]);
                i++;
                outIdx++;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode Ad(int startIdx,int endIdx,double[] inHigh,double[] inLow,double[] inClose,double[] inVolume,ref int outBegIdx,ref int outNBElement,double[] outReal,SmartQuant.ISeries inBar)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inHigh == null) || (inLow == null)) || ((inClose == null) || (inVolume == null))) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int nbBar = (endIdx - startIdx) + 1;
            outNBElement = nbBar;
            outBegIdx = startIdx;
            int currentBar = startIdx;
            int outIdx = 0;
            double ad = 0.0;
            while (true) {
                if (nbBar == 0) {
                    break;
                }
                double high = inHigh[currentBar];
                double low = inLow[currentBar];
                double tmp = high - low;
                double close = inClose[currentBar];
                if (tmp > 0.0) {
                    ad += (((close - low) - (high - close)) / tmp) * inVolume[currentBar];
                }
                outReal[outIdx] = ad;
                outIdx++;
                currentBar++;
                nbBar--;
            }
            return RetCode.Success;
        }
        public static RetCode Add(int startIdx,int endIdx,SmartQuant.ISeries inReal0,SmartQuant.ISeries inReal1,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal0 == null) {
                return RetCode.BadParam;
            }
            if (inReal1 == null) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int i = startIdx;
            int outIdx = 0;
            while (i <= endIdx) {
                outReal[outIdx] = inReal0[i] + inReal1[i];
                i++;
                outIdx++;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode AdOsc(int startIdx,int endIdx,double[] inHigh,double[] inLow,double[] inClose,double[] inVolume,int optInFastPeriod,int optInSlowPeriod,ref int outBegIdx,ref int outNBElement,double[] outReal,SmartQuant.ISeries inBar)
        {
            int slowestPeriod;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inHigh == null) || (inLow == null)) || ((inClose == null) || (inVolume == null))) {
                return RetCode.BadParam;
            }
            if (optInFastPeriod == -2147483648) {
                optInFastPeriod = 3;
            }
            else if ((optInFastPeriod < 2) || (optInFastPeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (optInSlowPeriod == -2147483648) {
                optInSlowPeriod = 10;
            }
            else if ((optInSlowPeriod < 2) || (optInSlowPeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            if (optInFastPeriod < optInSlowPeriod) {
                slowestPeriod = optInSlowPeriod;
            }
            else {
                slowestPeriod = optInFastPeriod;
            }
            int lookbackTotal = EmaLookback(slowestPeriod);
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            outBegIdx = startIdx;
            int today = startIdx - lookbackTotal;
            double ad = 0.0;
            double fastk = 2.0 / ((double)(optInFastPeriod + 1));
            double one_minus_fastk = 1.0 - fastk;
            double slowk = 2.0 / ((double)(optInSlowPeriod + 1));
            double one_minus_slowk = 1.0 - slowk;
            double high = inHigh[today];
            double low = inLow[today];
            double tmp = high - low;
            double close = inClose[today];
            if (tmp > 0.0) {
                ad += (((close - low) - (high - close)) / tmp) * inVolume[today];
            }
            today++;
            double fastEMA = ad;
            double slowEMA = ad;
            while (true) {
                if (today >= startIdx) {
                    break;
                }
                high = inHigh[today];
                low = inLow[today];
                tmp = high - low;
                close = inClose[today];
                if (tmp > 0.0) {
                    ad += (((close - low) - (high - close)) / tmp) * inVolume[today];
                }
                today++;
                fastEMA = (fastk * ad) + (one_minus_fastk * fastEMA);
                slowEMA = (slowk * ad) + (one_minus_slowk * slowEMA);
            }
            int outIdx = 0;
            while (true) {
                if (today > endIdx) {
                    break;
                }
                high = inHigh[today];
                low = inLow[today];
                tmp = high - low;
                close = inClose[today];
                if (tmp > 0.0) {
                    ad += (((close - low) - (high - close)) / tmp) * inVolume[today];
                }
                today++;
                fastEMA = (fastk * ad) + (one_minus_fastk * fastEMA);
                slowEMA = (slowk * ad) + (one_minus_slowk * slowEMA);
                outReal[outIdx] = fastEMA - slowEMA;
                outIdx++;
            }
            outNBElement = outIdx;
            return RetCode.Success;
        }
        public static RetCode Adx(int startIdx,int endIdx,double[] inHigh,double[] inLow,double[] inClose,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outReal,SmartQuant.ISeries inBar)
        {
            double tempReal;
            double tempReal2;
            double diffM;
            double diffP;
            double plusDI;
            double minusDI;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inHigh == null) || (inLow == null)) || (inClose == null)) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 14;
            }
            else if ((optInTimePeriod < 2) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = ((optInTimePeriod * 2) + ((int)Globals.unstablePeriod[0])) - 1;
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            int outIdx = 0;
            int today = startIdx;
            outBegIdx = today;
            double prevMinusDM = 0.0;
            double prevPlusDM = 0.0;
            double prevTR = 0.0;
            today = startIdx - lookbackTotal;
            double prevHigh = inHigh[today];
            double prevLow = inLow[today];
            double prevClose = inClose[today];
            int i = optInTimePeriod - 1;
            while (true) {
                i--;
                if (i <= 0) {
                    break;
                }
                today++;
                tempReal = inHigh[today];
                diffP = tempReal - prevHigh;
                prevHigh = tempReal;
                tempReal = inLow[today];
                diffM = prevLow - tempReal;
                prevLow = tempReal;
                if ((diffM > 0.0) && (diffP < diffM)) {
                    prevMinusDM += diffM;
                }
                else if ((diffP > 0.0) && (diffP > diffM)) {
                    prevPlusDM += diffP;
                }
                tempReal = prevHigh - prevLow;
                tempReal2 = Math.Abs((double)(prevHigh - prevClose));
                if (tempReal2 > tempReal) {
                    tempReal = tempReal2;
                }
                tempReal2 = Math.Abs((double)(prevLow - prevClose));
                if (tempReal2 > tempReal) {
                    tempReal = tempReal2;
                }
                prevTR += tempReal;
                prevClose = inClose[today];
            }
            double sumDX = 0.0;
            i = optInTimePeriod;
            while (true) {
                i--;
                if (i <= 0) {
                    break;
                }
                today++;
                tempReal = inHigh[today];
                diffP = tempReal - prevHigh;
                prevHigh = tempReal;
                tempReal = inLow[today];
                diffM = prevLow - tempReal;
                prevLow = tempReal;
                prevMinusDM -= prevMinusDM / ((double)optInTimePeriod);
                prevPlusDM -= prevPlusDM / ((double)optInTimePeriod);
                if ((diffM > 0.0) && (diffP < diffM)) {
                    prevMinusDM += diffM;
                }
                else if ((diffP > 0.0) && (diffP > diffM)) {
                    prevPlusDM += diffP;
                }
                tempReal = prevHigh - prevLow;
                tempReal2 = Math.Abs((double)(prevHigh - prevClose));
                if (tempReal2 > tempReal) {
                    tempReal = tempReal2;
                }
                tempReal2 = Math.Abs((double)(prevLow - prevClose));
                if (tempReal2 > tempReal) {
                    tempReal = tempReal2;
                }
                prevTR = (prevTR - (prevTR / ((double)optInTimePeriod))) + tempReal;
                prevClose = inClose[today];
                if ((-1E-08 >= prevTR) || (prevTR >= 1E-08)) {
                    minusDI = 100.0 * (prevMinusDM / prevTR);
                    plusDI = 100.0 * (prevPlusDM / prevTR);
                    tempReal = minusDI + plusDI;
                    if ((-1E-08 >= tempReal) || (tempReal >= 1E-08)) {
                        sumDX += 100.0 * (Math.Abs((double)(minusDI - plusDI)) / tempReal);
                    }
                }
            }
            double prevADX = sumDX / ((double)optInTimePeriod);
            i = (int)Globals.unstablePeriod[0];
            while (true) {
                i--;
                if (i <= 0) {
                    break;
                }
                today++;
                tempReal = inHigh[today];
                diffP = tempReal - prevHigh;
                prevHigh = tempReal;
                tempReal = inLow[today];
                diffM = prevLow - tempReal;
                prevLow = tempReal;
                prevMinusDM -= prevMinusDM / ((double)optInTimePeriod);
                prevPlusDM -= prevPlusDM / ((double)optInTimePeriod);
                if ((diffM > 0.0) && (diffP < diffM)) {
                    prevMinusDM += diffM;
                }
                else if ((diffP > 0.0) && (diffP > diffM)) {
                    prevPlusDM += diffP;
                }
                tempReal = prevHigh - prevLow;
                tempReal2 = Math.Abs((double)(prevHigh - prevClose));
                if (tempReal2 > tempReal) {
                    tempReal = tempReal2;
                }
                tempReal2 = Math.Abs((double)(prevLow - prevClose));
                if (tempReal2 > tempReal) {
                    tempReal = tempReal2;
                }
                prevTR = (prevTR - (prevTR / ((double)optInTimePeriod))) + tempReal;
                prevClose = inClose[today];
                if ((-1E-08 >= prevTR) || (prevTR >= 1E-08)) {
                    minusDI = 100.0 * (prevMinusDM / prevTR);
                    plusDI = 100.0 * (prevPlusDM / prevTR);
                    tempReal = minusDI + plusDI;
                    if ((-1E-08 >= tempReal) || (tempReal >= 1E-08)) {
                        tempReal = 100.0 * (Math.Abs((double)(minusDI - plusDI)) / tempReal);
                        prevADX = ((prevADX * (optInTimePeriod - 1)) + tempReal) / ((double)optInTimePeriod);
                    }
                }
            }
            outReal[0] = prevADX;
            outIdx = 1;
            while (true) {
                if (today >= endIdx) {
                    break;
                }
                today++;
                tempReal = inHigh[today];
                diffP = tempReal - prevHigh;
                prevHigh = tempReal;
                tempReal = inLow[today];
                diffM = prevLow - tempReal;
                prevLow = tempReal;
                prevMinusDM -= prevMinusDM / ((double)optInTimePeriod);
                prevPlusDM -= prevPlusDM / ((double)optInTimePeriod);
                if ((diffM > 0.0) && (diffP < diffM)) {
                    prevMinusDM += diffM;
                }
                else if ((diffP > 0.0) && (diffP > diffM)) {
                    prevPlusDM += diffP;
                }
                tempReal = prevHigh - prevLow;
                tempReal2 = Math.Abs((double)(prevHigh - prevClose));
                if (tempReal2 > tempReal) {
                    tempReal = tempReal2;
                }
                tempReal2 = Math.Abs((double)(prevLow - prevClose));
                if (tempReal2 > tempReal) {
                    tempReal = tempReal2;
                }
                prevTR = (prevTR - (prevTR / ((double)optInTimePeriod))) + tempReal;
                prevClose = inClose[today];
                if ((-1E-08 >= prevTR) || (prevTR >= 1E-08)) {
                    minusDI = 100.0 * (prevMinusDM / prevTR);
                    plusDI = 100.0 * (prevPlusDM / prevTR);
                    tempReal = minusDI + plusDI;
                    if ((-1E-08 >= tempReal) || (tempReal >= 1E-08)) {
                        tempReal = 100.0 * (Math.Abs((double)(minusDI - plusDI)) / tempReal);
                        prevADX = ((prevADX * (optInTimePeriod - 1)) + tempReal) / ((double)optInTimePeriod);
                    }
                }
                outReal[outIdx] = prevADX;
                outIdx++;
            }
            outNBElement = outIdx;
            return RetCode.Success;
        }
        public static RetCode Adxr(int startIdx,int endIdx,double[] inHigh,double[] inLow,double[] inClose,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outReal,SmartQuant.ISeries inBar)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inHigh == null) || (inLow == null)) || (inClose == null)) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 14;
            }
            else if ((optInTimePeriod < 2) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int adxrLookback = AdxrLookback(optInTimePeriod);
            if (startIdx < adxrLookback) {
                startIdx = adxrLookback;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double[] adx = new double[(endIdx - startIdx) + optInTimePeriod];
            if (adx == null) {
                return RetCode.AllocErr;
            }
            RetCode retCode = Adx(startIdx - (optInTimePeriod - 1), endIdx, inHigh, inLow, inClose, optInTimePeriod, ref outBegIdx, ref outNBElement, adx);
            if (retCode != RetCode.Success) {
                return retCode;
            }
            int i = optInTimePeriod - 1;
            int j = 0;
            int outIdx = 0;
            int nbElement = (endIdx - startIdx) + 2;
            while (true) {
                nbElement--;
                if (nbElement == 0) {
                    break;
                }
                outReal[outIdx] = (adx[i] + adx[j]) / 2.0;
                outIdx++;
                j++;
                i++;
            }
            outBegIdx = startIdx;
            outNBElement = outIdx;
            return RetCode.Success;
        }
        public static RetCode Apo(int startIdx,int endIdx,SmartQuant.ISeries inReal,int optInFastPeriod,int optInSlowPeriod,MAType optInMAType,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (optInFastPeriod == -2147483648) {
                optInFastPeriod = 12;
            }
            else if ((optInFastPeriod < 2) || (optInFastPeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (optInSlowPeriod == -2147483648) {
                optInSlowPeriod = 0x1a;
            }
            else if ((optInSlowPeriod < 2) || (optInSlowPeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            double[] tempBuffer = new double[(endIdx - startIdx) + 1];
            if (tempBuffer == null) {
                return RetCode.AllocErr;
            }
            return TA_INT_PO(startIdx, endIdx, inReal, optInFastPeriod, optInSlowPeriod, optInMAType, ref outBegIdx, ref outNBElement, outReal, tempBuffer, 0);
        }
        public static RetCode Aroon(int startIdx,int endIdx,double[] inHigh,double[] inLow,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outAroonDown,double[] outAroonUp,SmartQuant.ISeries inBar)
        {
            int i;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if ((inHigh == null) || (inLow == null)) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 14;
            }
            else if ((optInTimePeriod < 2) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outAroonDown == null) {
                return RetCode.BadParam;
            }
            if (outAroonUp == null) {
                return RetCode.BadParam;
            }
            if (startIdx < optInTimePeriod) {
                startIdx = optInTimePeriod;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            int outIdx = 0;
            int today = startIdx;
            int trailingIdx = startIdx - optInTimePeriod;
            int lowestIdx = -1;
            int highestIdx = -1;
            double lowest = 0.0;
            double highest = 0.0;
            double factor = 100.0 / ((double)optInTimePeriod);
            Label_00BB:
            if (today > endIdx) {
                outBegIdx = startIdx;
                outNBElement = outIdx;
                return RetCode.Success;
            }
            double tmp = inLow[today];
            if (lowestIdx < trailingIdx) {
                lowestIdx = trailingIdx;
                lowest = inLow[lowestIdx];
                i = lowestIdx;
                while (true) {
                    i++;
                    if (i > today) {
                        goto Label_00FF;
                    }
                    tmp = inLow[i];
                    if (tmp <= lowest) {
                        lowestIdx = i;
                        lowest = tmp;
                    }
                }
            }
            if (tmp <= lowest) {
                lowestIdx = today;
                lowest = tmp;
            }
            Label_00FF:
            tmp = inHigh[today];
            if (highestIdx < trailingIdx) {
                highestIdx = trailingIdx;
                highest = inHigh[highestIdx];
                i = highestIdx;
                while (true) {
                    i++;
                    if (i > today) {
                        goto Label_0136;
                    }
                    tmp = inHigh[i];
                    if (tmp >= highest) {
                        highestIdx = i;
                        highest = tmp;
                    }
                }
            }
            if (tmp >= highest) {
                highestIdx = today;
                highest = tmp;
            }
            Label_0136:
            outAroonUp[outIdx] = factor * (optInTimePeriod - (today - highestIdx));
            outAroonDown[outIdx] = factor * (optInTimePeriod - (today - lowestIdx));
            outIdx++;
            trailingIdx++;
            today++;
            goto Label_00BB;
        }
        public static RetCode AroonOsc(int startIdx,int endIdx,double[] inHigh,double[] inLow,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outReal,SmartQuant.ISeries inBar)
        {
            int i;
            double aroon;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if ((inHigh == null) || (inLow == null)) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 14;
            }
            else if ((optInTimePeriod < 2) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            if (startIdx < optInTimePeriod) {
                startIdx = optInTimePeriod;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            int outIdx = 0;
            int today = startIdx;
            int trailingIdx = startIdx - optInTimePeriod;
            int lowestIdx = -1;
            int highestIdx = -1;
            double lowest = 0.0;
            double highest = 0.0;
            double factor = 100.0 / ((double)optInTimePeriod);
            Label_00AF:
            if (today > endIdx) {
                outBegIdx = startIdx;
                outNBElement = outIdx;
                return RetCode.Success;
            }
            double tmp = inLow[today];
            if (lowestIdx < trailingIdx) {
                lowestIdx = trailingIdx;
                lowest = inLow[lowestIdx];
                i = lowestIdx;
                while (true) {
                    i++;
                    if (i > today) {
                        goto Label_00F3;
                    }
                    tmp = inLow[i];
                    if (tmp <= lowest) {
                        lowestIdx = i;
                        lowest = tmp;
                    }
                }
            }
            if (tmp <= lowest) {
                lowestIdx = today;
                lowest = tmp;
            }
            Label_00F3:
            tmp = inHigh[today];
            if (highestIdx < trailingIdx) {
                highestIdx = trailingIdx;
                highest = inHigh[highestIdx];
                i = highestIdx;
                while (true) {
                    i++;
                    if (i > today) {
                        goto Label_012A;
                    }
                    tmp = inHigh[i];
                    if (tmp >= highest) {
                        highestIdx = i;
                        highest = tmp;
                    }
                }
            }
            if (tmp >= highest) {
                highestIdx = today;
                highest = tmp;
            }
            Label_012A:
            aroon = factor * (highestIdx - lowestIdx);
            outReal[outIdx] = aroon;
            outIdx++;
            trailingIdx++;
            today++;
            goto Label_00AF;
        }
        public static RetCode Asin(int startIdx,int endIdx,SmartQuant.ISeries inReal,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int i = startIdx;
            int outIdx = 0;
            while (i <= endIdx) {
                outReal[outIdx] = Math.Asin(inReal[i]);
                i++;
                outIdx++;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode Atan(int startIdx,int endIdx,SmartQuant.ISeries inReal,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int i = startIdx;
            int outIdx = 0;
            while (i <= endIdx) {
                outReal[outIdx] = Math.Atan(inReal[i]);
                i++;
                outIdx++;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode Atr(int startIdx,int endIdx,double[] inHigh,double[] inLow,double[] inClose,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outReal,SmartQuant.ISeries inBar)
        {
            int outNbElement1 = 0;
            int outBegIdx1 = 0;
            double[] prevATRTemp = new double[1];
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inHigh == null) || (inLow == null)) || (inClose == null)) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 14;
            }
            else if ((optInTimePeriod < 1) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            outBegIdx = 0;
            outNBElement = 0;
            int lookbackTotal = AtrLookback(optInTimePeriod);
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                return RetCode.Success;
            }
            if (optInTimePeriod <= 1) {
                return TrueRange(startIdx, endIdx, inHigh, inLow, inClose, ref outBegIdx, ref outNBElement, outReal);
            }
            double[] tempBuffer = new double[(lookbackTotal + (endIdx - startIdx)) + 1];
            RetCode retCode = TrueRange((startIdx - lookbackTotal) + 1, endIdx, inHigh, inLow, inClose, ref outBegIdx1, ref outNbElement1, tempBuffer);
            if (retCode == RetCode.Success) {
                retCode = TA_INT_SMA(optInTimePeriod - 1, optInTimePeriod - 1, tempBuffer, optInTimePeriod, ref outBegIdx1, ref outNbElement1, prevATRTemp);
                if (retCode != RetCode.Success) {
                    return retCode;
                }
                double prevATR = prevATRTemp[0];
                int today = optInTimePeriod;
                int outIdx = (int)Globals.unstablePeriod[2];
                while (true) {
                    if (outIdx == 0) {
                        break;
                    }
                    prevATR *= optInTimePeriod - 1;
                    prevATR += tempBuffer[today];
                    today++;
                    prevATR /= (double)optInTimePeriod;
                    outIdx--;
                }
                outIdx = 1;
                outReal[0] = prevATR;
                int nbATR = (endIdx - startIdx) + 1;
                while (true) {
                    nbATR--;
                    if (nbATR == 0) {
                        break;
                    }
                    prevATR *= optInTimePeriod - 1;
                    prevATR += tempBuffer[today];
                    today++;
                    outReal[outIdx] = prevATR / ((double)optInTimePeriod);
                    outIdx++;
                }
                outBegIdx = startIdx;
                outNBElement = outIdx;
            }
            return retCode;
        }
        public static RetCode AvgPrice(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,double[] outReal,SmartQuant.ISeries inBar)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int outIdx = 0;
            for (int i = startIdx; i <= endIdx; i++) {
                outReal[outIdx] = (((inHigh[i] + inLow[i]) + inClose[i]) + inOpen[i]) / 4.0;
                outIdx++;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode Bbands(int startIdx,int endIdx,SmartQuant.ISeries inReal,int optInTimePeriod,double optInNbDevUp,double optInNbDevDn,MAType optInMAType,ref int outBegIdx,ref int outNBElement,double[] outRealUpperBand,double[] outRealMiddleBand,double[] outRealLowerBand)
        {
            int i;
            double tempReal2;
            double tempReal;
            double[] tempBuffer2;
            double[] tempBuffer1;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 5;
            }
            else if ((optInTimePeriod < 2) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (optInNbDevUp == -4E+37) {
                optInNbDevUp = 2.0;
            }
            else if ((optInNbDevUp < -3E+37) || (optInNbDevUp > 3E+37)) {
                return RetCode.BadParam;
            }
            if (optInNbDevDn == -4E+37) {
                optInNbDevDn = 2.0;
            }
            else if ((optInNbDevDn < -3E+37) || (optInNbDevDn > 3E+37)) {
                return RetCode.BadParam;
            }
            if (outRealUpperBand == null) {
                return RetCode.BadParam;
            }
            if (outRealMiddleBand == null) {
                return RetCode.BadParam;
            }
            if (outRealLowerBand == null) {
                return RetCode.BadParam;
            }
            if (inReal == outRealUpperBand) {
                tempBuffer1 = outRealMiddleBand;
                tempBuffer2 = outRealLowerBand;
            }
            else if (inReal == outRealLowerBand) {
                tempBuffer1 = outRealMiddleBand;
                tempBuffer2 = outRealUpperBand;
            }
            else if (inReal == outRealMiddleBand) {
                tempBuffer1 = outRealLowerBand;
                tempBuffer2 = outRealUpperBand;
            }
            else {
                tempBuffer1 = outRealMiddleBand;
                tempBuffer2 = outRealUpperBand;
            }
            if ((tempBuffer1 == inReal) || (tempBuffer2 == inReal)) {
                return RetCode.BadParam;
            }
            RetCode retCode = MovingAverage(startIdx, endIdx, inReal, optInTimePeriod, optInMAType, ref outBegIdx, ref outNBElement, tempBuffer1);
            if ((retCode != RetCode.Success) || (outNBElement == 0)) {
                outNBElement = 0;
                return retCode;
            }
            if (optInMAType == MAType.Sma) {
                TA_INT_stddev_using_precalc_ma(inReal, tempBuffer1, outBegIdx, outNBElement, optInTimePeriod, tempBuffer2);
            }
            else {
                retCode = StdDev(outBegIdx, endIdx, inReal, optInTimePeriod, 1.0, ref outBegIdx, ref outNBElement, tempBuffer2);
                if (retCode != RetCode.Success) {
                    outNBElement = 0;
                    return retCode;
                }
            }
            if (tempBuffer1 != outRealMiddleBand) {
                Array.Copy(tempBuffer1, 0, outRealMiddleBand, 0, outNBElement);
            }
            if (optInNbDevUp != optInNbDevDn) {
                if (optInNbDevUp != 1.0) {
                    if (optInNbDevDn != 1.0) {
                        i = 0;
                        while (i < outNBElement) {
                            tempReal = tempBuffer2[i];
                            tempReal2 = outRealMiddleBand[i];
                            outRealUpperBand[i] = tempReal2 + (tempReal * optInNbDevUp);
                            outRealLowerBand[i] = tempReal2 - (tempReal * optInNbDevDn);
                            i++;
                        }
                        goto Label_02B1;
                    }
                    i = 0;
                    goto Label_025E;
                }
                i = 0;
            }
            else {
                if (optInNbDevUp != 1.0) {
                    i = 0;
                }
                else {
                    i = 0;
                    while (i < outNBElement) {
                        tempReal = tempBuffer2[i];
                        tempReal2 = outRealMiddleBand[i];
                        outRealUpperBand[i] = tempReal2 + tempReal;
                        outRealLowerBand[i] = tempReal2 - tempReal;
                        i++;
                    }
                    goto Label_02B1;
                }
                while (i < outNBElement) {
                    tempReal = tempBuffer2[i] * optInNbDevUp;
                    tempReal2 = outRealMiddleBand[i];
                    outRealUpperBand[i] = tempReal2 + tempReal;
                    outRealLowerBand[i] = tempReal2 - tempReal;
                    i++;
                }
                goto Label_02B1;
            }
            while (true) {
                if (i >= outNBElement) {
                    goto Label_02B1;
                }
                tempReal = tempBuffer2[i];
                tempReal2 = outRealMiddleBand[i];
                outRealUpperBand[i] = tempReal2 + tempReal;
                outRealLowerBand[i] = tempReal2 - (tempReal * optInNbDevDn);
                i++;
            }
            Label_025E:
            while (i < outNBElement) {
                tempReal = tempBuffer2[i];
                tempReal2 = outRealMiddleBand[i];
                outRealLowerBand[i] = tempReal2 - tempReal;
                outRealUpperBand[i] = tempReal2 + (tempReal * optInNbDevUp);
                i++;
            }
            Label_02B1:
            return RetCode.Success;
        }
        public static RetCode Beta(int startIdx,int endIdx,SmartQuant.ISeries inReal0,SmartQuant.ISeries inReal1,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            double x;
            double y;
            double S_xx = 0.0;
            double S_xy = 0.0;
            double S_x = 0.0;
            double S_y = 0.0;
            double last_price_x = 0.0;
            double last_price_y = 0.0;
            double trailing_last_price_x = 0.0;
            double trailing_last_price_y = 0.0;
            double tmp_real = 0.0;
            double n = 0.0;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal0 == null) {
                return RetCode.BadParam;
            }
            if (inReal1 == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 5;
            }
            else if ((optInTimePeriod < 1) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int nbInitialElementNeeded = optInTimePeriod;
            if (startIdx < nbInitialElementNeeded) {
                startIdx = nbInitialElementNeeded;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            int trailingIdx = startIdx - nbInitialElementNeeded;
            trailing_last_price_x = inReal0[trailingIdx];
            last_price_x = trailing_last_price_x;
            trailing_last_price_y = inReal1[trailingIdx];
            last_price_y = trailing_last_price_y;
            trailingIdx++;
            int i = trailingIdx;
            while (true) {
                if (i >= startIdx) {
                    break;
                }
                tmp_real = inReal0[i];
                if ((-1E-08 >= last_price_x) || (last_price_x >= 1E-08)) {
                    x = (tmp_real - last_price_x) / last_price_x;
                }
                else {
                    x = 0.0;
                }
                last_price_x = tmp_real;
                tmp_real = inReal1[i];
                i++;
                if ((-1E-08 >= last_price_y) || (last_price_y >= 1E-08)) {
                    y = (tmp_real - last_price_y) / last_price_y;
                }
                else {
                    y = 0.0;
                }
                last_price_y = tmp_real;
                S_xx += x * x;
                S_xy += x * y;
                S_x += x;
                S_y += y;
            }
            int outIdx = 0;
            n = optInTimePeriod;
            do {
                tmp_real = inReal0[i];
                if ((-1E-08 >= last_price_x) || (last_price_x >= 1E-08)) {
                    x = (tmp_real - last_price_x) / last_price_x;
                }
                else {
                    x = 0.0;
                }
                last_price_x = tmp_real;
                tmp_real = inReal1[i];
                i++;
                if ((-1E-08 >= last_price_y) || (last_price_y >= 1E-08)) {
                    y = (tmp_real - last_price_y) / last_price_y;
                }
                else {
                    y = 0.0;
                }
                last_price_y = tmp_real;
                S_xx += x * x;
                S_xy += x * y;
                S_x += x;
                S_y += y;
                tmp_real = inReal0[trailingIdx];
                if ((-1E-08 >= trailing_last_price_x) || (trailing_last_price_x >= 1E-08)) {
                    x = (tmp_real - trailing_last_price_x) / trailing_last_price_x;
                }
                else {
                    x = 0.0;
                }
                trailing_last_price_x = tmp_real;
                tmp_real = inReal1[trailingIdx];
                trailingIdx++;
                if ((-1E-08 >= trailing_last_price_y) || (trailing_last_price_y >= 1E-08)) {
                    y = (tmp_real - trailing_last_price_y) / trailing_last_price_y;
                }
                else {
                    y = 0.0;
                }
                trailing_last_price_y = tmp_real;
                tmp_real = (n * S_xx) - (S_x * S_x);
                if ((-1E-08 >= tmp_real) || (tmp_real >= 1E-08)) {
                    outReal[outIdx] = ((n * S_xy) - (S_x * S_y)) / tmp_real;
                    outIdx++;
                }
                else {
                    outReal[outIdx] = 0.0;
                    outIdx++;
                }
                S_xx -= x * x;
                S_xy -= x * y;
                S_x -= x;
                S_y -= y;
            }
            while (i <= endIdx);
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode Bop(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,double[] outReal,SmartQuant.ISeries inBar)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int outIdx = 0;
            for (int i = startIdx; i <= endIdx; i++) {
                double tempReal = inHigh[i] - inLow[i];
                if (tempReal < 1E-08) {
                    outReal[outIdx] = 0.0;
                    outIdx++;
                }
                else {
                    outReal[outIdx] = (inClose[i] - inOpen[i]) / tempReal;
                    outIdx++;
                }
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode Cci(int startIdx,int endIdx,double[] inHigh,double[] inLow,double[] inClose,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outReal,SmartQuant.ISeries inBar)
        {
            int circBuffer_Idx = 0;
            int maxIdx_circBuffer = 0x1d;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inHigh == null) || (inLow == null)) || (inClose == null)) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 14;
            }
            else if ((optInTimePeriod < 2) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = optInTimePeriod - 1;
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            if (optInTimePeriod <= 0) {
                return RetCode.AllocErr;
            }
            double[] circBuffer = new double[optInTimePeriod];
            if (circBuffer == null) {
                return RetCode.AllocErr;
            }
            maxIdx_circBuffer = optInTimePeriod - 1;
            int i = startIdx - lookbackTotal;
            if (optInTimePeriod > 1) {
                while (i < startIdx) {
                    circBuffer[circBuffer_Idx] = ((inHigh[i] + inLow[i]) + inClose[i]) / 3.0;
                    i++;
                    circBuffer_Idx++;
                    if (circBuffer_Idx > maxIdx_circBuffer) {
                        circBuffer_Idx = 0;
                    }
                }
            }
            int outIdx = 0;
            do {
                double lastValue = ((inHigh[i] + inLow[i]) + inClose[i]) / 3.0;
                circBuffer[circBuffer_Idx] = lastValue;
                double theAverage = 0.0;
                int j = 0;
                while (j < optInTimePeriod) {
                    theAverage += circBuffer[j];
                    j++;
                }
                theAverage /= (double)optInTimePeriod;
                double tempReal2 = 0.0;
                for (j = 0; j < optInTimePeriod; j++) {
                    tempReal2 += Math.Abs((double)(circBuffer[j] - theAverage));
                }
                double tempReal = lastValue - theAverage;
                if ((tempReal != 0.0) && (tempReal2 != 0.0)) {
                    outReal[outIdx] = tempReal / (0.015 * (tempReal2 / ((double)optInTimePeriod)));
                    outIdx++;
                }
                else {
                    outReal[outIdx] = 0.0;
                    outIdx++;
                }
                circBuffer_Idx++;
                if (circBuffer_Idx > maxIdx_circBuffer) {
                    circBuffer_Idx = 0;
                }
                i++;
            }
            while (i <= endIdx);
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode Cdl2Crows(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = Cdl2CrowsLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double BodyLongPeriodTotal = 0.0;
            int BodyLongTrailingIdx = (startIdx - 2) - Globals.candleSettings[0].avgPeriod;
            int i = BodyLongTrailingIdx;
            while (true) {
                double num24;
                if (i >= (startIdx - 2)) {
                    break;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num24 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num23;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num23 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num20;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num21;
                            double num22;
                            if (inClose[i] >= inOpen[i]) {
                                num22 = inClose[i];
                            }
                            else {
                                num22 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num21 = inOpen[i];
                            }
                            else {
                                num21 = inClose[i];
                            }
                            num20 = (inHigh[i] - num22) + (num21 - inLow[i]);
                        }
                        else {
                            num20 = 0.0;
                        }
                        num23 = num20;
                    }
                    num24 = num23;
                }
                BodyLongPeriodTotal += num24;
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            Label_014D:
            if (inClose[i - 2] >= inOpen[i - 2]) {
                double num13;
                double num19;
                if (Globals.candleSettings[0].avgPeriod != 0.0) {
                    num19 = BodyLongPeriodTotal / ((double)Globals.candleSettings[0].avgPeriod);
                }
                else {
                    double num18;
                    if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                        num18 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                    }
                    else {
                        double num17;
                        if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                            num17 = inHigh[i - 2] - inLow[i - 2];
                        }
                        else {
                            double num14;
                            if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                                double num15;
                                double num16;
                                if (inClose[i - 2] >= inOpen[i - 2]) {
                                    num16 = inClose[i - 2];
                                }
                                else {
                                    num16 = inOpen[i - 2];
                                }
                                if (inClose[i - 2] >= inOpen[i - 2]) {
                                    num15 = inOpen[i - 2];
                                }
                                else {
                                    num15 = inClose[i - 2];
                                }
                                num14 = (inHigh[i - 2] - num16) + (num15 - inLow[i - 2]);
                            }
                            else {
                                num14 = 0.0;
                            }
                            num17 = num14;
                        }
                        num18 = num17;
                    }
                    num19 = num18;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                    num13 = 2.0;
                }
                else {
                    num13 = 1.0;
                }
                if ((Math.Abs((double)(inClose[i - 2] - inOpen[i - 2])) > ((Globals.candleSettings[0].factor * num19) / num13)) && (((inClose[i - 1] < inOpen[i - 1]) ? -1 : 1) == -1)) {
                    double num11;
                    double num12;
                    if (inOpen[i - 1] < inClose[i - 1]) {
                        num12 = inOpen[i - 1];
                    }
                    else {
                        num12 = inClose[i - 1];
                    }
                    if (inOpen[i - 2] > inClose[i - 2]) {
                        num11 = inOpen[i - 2];
                    }
                    else {
                        num11 = inClose[i - 2];
                    }
                    if ((((num12 > num11) && (((inClose[i] < inOpen[i]) ? -1 : 1) == -1)) && ((inOpen[i] < inOpen[i - 1]) && (inOpen[i] > inClose[i - 1]))) && ((inClose[i] > inOpen[i - 2]) && (inClose[i] < inClose[i - 2]))) {
                        outInteger[outIdx] = -100;
                        outIdx++;
                        goto Label_036E;
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_036E:
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
            }
            else {
                double num9;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i - 2] - inLow[i - 2];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i - 2] >= inOpen[i - 2]) {
                            num8 = inClose[i - 2];
                        }
                        else {
                            num8 = inOpen[i - 2];
                        }
                        if (inClose[i - 2] >= inOpen[i - 2]) {
                            num7 = inOpen[i - 2];
                        }
                        else {
                            num7 = inClose[i - 2];
                        }
                        num6 = (inHigh[i - 2] - num8) + (num7 - inLow[i - 2]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[BodyLongTrailingIdx] - inOpen[BodyLongTrailingIdx]));
            }
            else {
                double num4;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num4 = inHigh[BodyLongTrailingIdx] - inLow[BodyLongTrailingIdx];
                }
                else {
                    double num;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[BodyLongTrailingIdx] >= inOpen[BodyLongTrailingIdx]) {
                            num3 = inClose[BodyLongTrailingIdx];
                        }
                        else {
                            num3 = inOpen[BodyLongTrailingIdx];
                        }
                        if (inClose[BodyLongTrailingIdx] >= inOpen[BodyLongTrailingIdx]) {
                            num2 = inOpen[BodyLongTrailingIdx];
                        }
                        else {
                            num2 = inClose[BodyLongTrailingIdx];
                        }
                        num = (inHigh[BodyLongTrailingIdx] - num3) + (num2 - inLow[BodyLongTrailingIdx]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            BodyLongPeriodTotal += num10 - num5;
            i++;
            BodyLongTrailingIdx++;
            if (i <= endIdx) {
                goto Label_014D;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode Cdl3BlackCrows(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            int totIdx;
            double[] ShadowVeryShortPeriodTotal = new double[3];
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = Cdl3BlackCrowsLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            ShadowVeryShortPeriodTotal[2] = 0.0;
            ShadowVeryShortPeriodTotal[1] = 0.0;
            ShadowVeryShortPeriodTotal[0] = 0.0;
            int ShadowVeryShortTrailingIdx = startIdx - Globals.candleSettings[7].avgPeriod;
            int i = ShadowVeryShortTrailingIdx;
            while (true) {
                double num39;
                double num44;
                double num49;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num49 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                }
                else {
                    double num48;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num48 = inHigh[i - 2] - inLow[i - 2];
                    }
                    else {
                        double num45;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num46;
                            double num47;
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num47 = inClose[i - 2];
                            }
                            else {
                                num47 = inOpen[i - 2];
                            }
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num46 = inOpen[i - 2];
                            }
                            else {
                                num46 = inClose[i - 2];
                            }
                            num45 = (inHigh[i - 2] - num47) + (num46 - inLow[i - 2]);
                        }
                        else {
                            num45 = 0.0;
                        }
                        num48 = num45;
                    }
                    num49 = num48;
                }
                ShadowVeryShortPeriodTotal[2] += num49;
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num44 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num43;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num43 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num40;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num41;
                            double num42;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num42 = inClose[i - 1];
                            }
                            else {
                                num42 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num41 = inOpen[i - 1];
                            }
                            else {
                                num41 = inClose[i - 1];
                            }
                            num40 = (inHigh[i - 1] - num42) + (num41 - inLow[i - 1]);
                        }
                        else {
                            num40 = 0.0;
                        }
                        num43 = num40;
                    }
                    num44 = num43;
                }
                ShadowVeryShortPeriodTotal[1] += num44;
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num39 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num38;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num38 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num35;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num36;
                            double num37;
                            if (inClose[i] >= inOpen[i]) {
                                num37 = inClose[i];
                            }
                            else {
                                num37 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num36 = inOpen[i];
                            }
                            else {
                                num36 = inClose[i];
                            }
                            num35 = (inHigh[i] - num37) + (num36 - inLow[i]);
                        }
                        else {
                            num35 = 0.0;
                        }
                        num38 = num35;
                    }
                    num39 = num38;
                }
                ShadowVeryShortPeriodTotal[0] += num39;
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            Label_0317:
            if ((inClose[i - 3] >= inOpen[i - 3]) && (((inClose[i - 2] < inOpen[i - 2]) ? -1 : 1) == -1)) {
                double num27;
                double num33;
                double num34;
                if (inClose[i - 2] >= inOpen[i - 2]) {
                    num34 = inOpen[i - 2];
                }
                else {
                    num34 = inClose[i - 2];
                }
                if (Globals.candleSettings[7].avgPeriod != 0.0) {
                    num33 = ShadowVeryShortPeriodTotal[2] / ((double)Globals.candleSettings[7].avgPeriod);
                }
                else {
                    double num32;
                    if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                        num32 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                    }
                    else {
                        double num31;
                        if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                            num31 = inHigh[i - 2] - inLow[i - 2];
                        }
                        else {
                            double num28;
                            if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                double num29;
                                double num30;
                                if (inClose[i - 2] >= inOpen[i - 2]) {
                                    num30 = inClose[i - 2];
                                }
                                else {
                                    num30 = inOpen[i - 2];
                                }
                                if (inClose[i - 2] >= inOpen[i - 2]) {
                                    num29 = inOpen[i - 2];
                                }
                                else {
                                    num29 = inClose[i - 2];
                                }
                                num28 = (inHigh[i - 2] - num30) + (num29 - inLow[i - 2]);
                            }
                            else {
                                num28 = 0.0;
                            }
                            num31 = num28;
                        }
                        num32 = num31;
                    }
                    num33 = num32;
                }
                if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                    num27 = 2.0;
                }
                else {
                    num27 = 1.0;
                }
                if (((num34 - inLow[i - 2]) < ((Globals.candleSettings[7].factor * num33) / num27)) && (((inClose[i - 1] < inOpen[i - 1]) ? -1 : 1) == -1)) {
                    double num19;
                    double num25;
                    double num26;
                    if (inClose[i - 1] >= inOpen[i - 1]) {
                        num26 = inOpen[i - 1];
                    }
                    else {
                        num26 = inClose[i - 1];
                    }
                    if (Globals.candleSettings[7].avgPeriod != 0.0) {
                        num25 = ShadowVeryShortPeriodTotal[1] / ((double)Globals.candleSettings[7].avgPeriod);
                    }
                    else {
                        double num24;
                        if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                            num24 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                        }
                        else {
                            double num23;
                            if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                                num23 = inHigh[i - 1] - inLow[i - 1];
                            }
                            else {
                                double num20;
                                if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                    double num21;
                                    double num22;
                                    if (inClose[i - 1] >= inOpen[i - 1]) {
                                        num22 = inClose[i - 1];
                                    }
                                    else {
                                        num22 = inOpen[i - 1];
                                    }
                                    if (inClose[i - 1] >= inOpen[i - 1]) {
                                        num21 = inOpen[i - 1];
                                    }
                                    else {
                                        num21 = inClose[i - 1];
                                    }
                                    num20 = (inHigh[i - 1] - num22) + (num21 - inLow[i - 1]);
                                }
                                else {
                                    num20 = 0.0;
                                }
                                num23 = num20;
                            }
                            num24 = num23;
                        }
                        num25 = num24;
                    }
                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                        num19 = 2.0;
                    }
                    else {
                        num19 = 1.0;
                    }
                    if (((num26 - inLow[i - 1]) < ((Globals.candleSettings[7].factor * num25) / num19)) && (((inClose[i] < inOpen[i]) ? -1 : 1) == -1)) {
                        double num11;
                        double num17;
                        double num18;
                        if (inClose[i] >= inOpen[i]) {
                            num18 = inOpen[i];
                        }
                        else {
                            num18 = inClose[i];
                        }
                        if (Globals.candleSettings[7].avgPeriod != 0.0) {
                            num17 = ShadowVeryShortPeriodTotal[0] / ((double)Globals.candleSettings[7].avgPeriod);
                        }
                        else {
                            double num16;
                            if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                                num16 = Math.Abs((double)(inClose[i] - inOpen[i]));
                            }
                            else {
                                double num15;
                                if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                                    num15 = inHigh[i] - inLow[i];
                                }
                                else {
                                    double num12;
                                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                        double num13;
                                        double num14;
                                        if (inClose[i] >= inOpen[i]) {
                                            num14 = inClose[i];
                                        }
                                        else {
                                            num14 = inOpen[i];
                                        }
                                        if (inClose[i] >= inOpen[i]) {
                                            num13 = inOpen[i];
                                        }
                                        else {
                                            num13 = inClose[i];
                                        }
                                        num12 = (inHigh[i] - num14) + (num13 - inLow[i]);
                                    }
                                    else {
                                        num12 = 0.0;
                                    }
                                    num15 = num12;
                                }
                                num16 = num15;
                            }
                            num17 = num16;
                        }
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            num11 = 2.0;
                        }
                        else {
                            num11 = 1.0;
                        }
                        if (((((num18 - inLow[i]) < ((Globals.candleSettings[7].factor * num17) / num11)) && (inOpen[i - 1] < inOpen[i - 2])) && ((inOpen[i - 1] > inClose[i - 2]) && (inOpen[i] < inOpen[i - 1]))) && (((inOpen[i] > inClose[i - 1]) && (inHigh[i - 3] > inClose[i - 2])) && ((inClose[i - 2] > inClose[i - 1]) && (inClose[i - 1] > inClose[i])))) {
                            outInteger[outIdx] = -100;
                            outIdx++;
                            goto Label_081B;
                        }
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_081B:
            totIdx = 2;
            while (totIdx >= 0) {
                double num5;
                double num10;
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num10 = Math.Abs((double)(inClose[i - totIdx] - inOpen[i - totIdx]));
                }
                else {
                    double num9;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num9 = inHigh[i - totIdx] - inLow[i - totIdx];
                    }
                    else {
                        double num6;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num7;
                            double num8;
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num8 = inClose[i - totIdx];
                            }
                            else {
                                num8 = inOpen[i - totIdx];
                            }
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num7 = inOpen[i - totIdx];
                            }
                            else {
                                num7 = inClose[i - totIdx];
                            }
                            num6 = (inHigh[i - totIdx] - num8) + (num7 - inLow[i - totIdx]);
                        }
                        else {
                            num6 = 0.0;
                        }
                        num9 = num6;
                    }
                    num10 = num9;
                }
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num5 = Math.Abs((double)(inClose[ShadowVeryShortTrailingIdx - totIdx] - inOpen[ShadowVeryShortTrailingIdx - totIdx]));
                }
                else {
                    double num4;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num4 = inHigh[ShadowVeryShortTrailingIdx - totIdx] - inLow[ShadowVeryShortTrailingIdx - totIdx];
                    }
                    else {
                        double num;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num2;
                            double num3;
                            if (inClose[ShadowVeryShortTrailingIdx - totIdx] >= inOpen[ShadowVeryShortTrailingIdx - totIdx]) {
                                num3 = inClose[ShadowVeryShortTrailingIdx - totIdx];
                            }
                            else {
                                num3 = inOpen[ShadowVeryShortTrailingIdx - totIdx];
                            }
                            if (inClose[ShadowVeryShortTrailingIdx - totIdx] >= inOpen[ShadowVeryShortTrailingIdx - totIdx]) {
                                num2 = inOpen[ShadowVeryShortTrailingIdx - totIdx];
                            }
                            else {
                                num2 = inClose[ShadowVeryShortTrailingIdx - totIdx];
                            }
                            num = (inHigh[ShadowVeryShortTrailingIdx - totIdx] - num3) + (num2 - inLow[ShadowVeryShortTrailingIdx - totIdx]);
                        }
                        else {
                            num = 0.0;
                        }
                        num4 = num;
                    }
                    num5 = num4;
                }
                ShadowVeryShortPeriodTotal[totIdx] += num10 - num5;
                totIdx--;
            }
            i++;
            ShadowVeryShortTrailingIdx++;
            if (i <= endIdx) {
                goto Label_0317;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode Cdl3Inside(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            double num15;
            double num20;
            double num33;
            double num39;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = Cdl3InsideLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double BodyLongPeriodTotal = 0.0;
            double BodyShortPeriodTotal = 0.0;
            int BodyLongTrailingIdx = (startIdx - 2) - Globals.candleSettings[0].avgPeriod;
            int BodyShortTrailingIdx = (startIdx - 1) - Globals.candleSettings[2].avgPeriod;
            int i = BodyLongTrailingIdx;
            while (true) {
                double num49;
                if (i >= (startIdx - 2)) {
                    break;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num49 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num48;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num48 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num45;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num46;
                            double num47;
                            if (inClose[i] >= inOpen[i]) {
                                num47 = inClose[i];
                            }
                            else {
                                num47 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num46 = inOpen[i];
                            }
                            else {
                                num46 = inClose[i];
                            }
                            num45 = (inHigh[i] - num47) + (num46 - inLow[i]);
                        }
                        else {
                            num45 = 0.0;
                        }
                        num48 = num45;
                    }
                    num49 = num48;
                }
                BodyLongPeriodTotal += num49;
                i++;
            }
            i = BodyShortTrailingIdx;
            while (true) {
                double num44;
                if (i >= (startIdx - 1)) {
                    break;
                }
                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                    num44 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num43;
                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                        num43 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num40;
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            double num41;
                            double num42;
                            if (inClose[i] >= inOpen[i]) {
                                num42 = inClose[i];
                            }
                            else {
                                num42 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num41 = inOpen[i];
                            }
                            else {
                                num41 = inClose[i];
                            }
                            num40 = (inHigh[i] - num42) + (num41 - inLow[i]);
                        }
                        else {
                            num40 = 0.0;
                        }
                        num43 = num40;
                    }
                    num44 = num43;
                }
                BodyShortPeriodTotal += num44;
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            Label_0238:
            if (Globals.candleSettings[0].avgPeriod != 0.0) {
                num39 = BodyLongPeriodTotal / ((double)Globals.candleSettings[0].avgPeriod);
            }
            else {
                double num38;
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num38 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                }
                else {
                    double num37;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num37 = inHigh[i - 2] - inLow[i - 2];
                    }
                    else {
                        double num34;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num35;
                            double num36;
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num36 = inClose[i - 2];
                            }
                            else {
                                num36 = inOpen[i - 2];
                            }
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num35 = inOpen[i - 2];
                            }
                            else {
                                num35 = inClose[i - 2];
                            }
                            num34 = (inHigh[i - 2] - num36) + (num35 - inLow[i - 2]);
                        }
                        else {
                            num34 = 0.0;
                        }
                        num37 = num34;
                    }
                    num38 = num37;
                }
                num39 = num38;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                num33 = 2.0;
            }
            else {
                num33 = 1.0;
            }
            if (Math.Abs((double)(inClose[i - 2] - inOpen[i - 2])) > ((Globals.candleSettings[0].factor * num39) / num33)) {
                double num26;
                double num32;
                if (Globals.candleSettings[2].avgPeriod != 0.0) {
                    num32 = BodyShortPeriodTotal / ((double)Globals.candleSettings[2].avgPeriod);
                }
                else {
                    double num31;
                    if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                        num31 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                    }
                    else {
                        double num30;
                        if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                            num30 = inHigh[i - 1] - inLow[i - 1];
                        }
                        else {
                            double num27;
                            if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                                double num28;
                                double num29;
                                if (inClose[i - 1] >= inOpen[i - 1]) {
                                    num29 = inClose[i - 1];
                                }
                                else {
                                    num29 = inOpen[i - 1];
                                }
                                if (inClose[i - 1] >= inOpen[i - 1]) {
                                    num28 = inOpen[i - 1];
                                }
                                else {
                                    num28 = inClose[i - 1];
                                }
                                num27 = (inHigh[i - 1] - num29) + (num28 - inLow[i - 1]);
                            }
                            else {
                                num27 = 0.0;
                            }
                            num30 = num27;
                        }
                        num31 = num30;
                    }
                    num32 = num31;
                }
                if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                    num26 = 2.0;
                }
                else {
                    num26 = 1.0;
                }
                if (Math.Abs((double)(inClose[i - 1] - inOpen[i - 1])) <= ((Globals.candleSettings[2].factor * num32) / num26)) {
                    double num24;
                    double num25;
                    if (inClose[i - 1] > inOpen[i - 1]) {
                        num25 = inClose[i - 1];
                    }
                    else {
                        num25 = inOpen[i - 1];
                    }
                    if (inClose[i - 2] > inOpen[i - 2]) {
                        num24 = inClose[i - 2];
                    }
                    else {
                        num24 = inOpen[i - 2];
                    }
                    if (num25 < num24) {
                        double num22;
                        double num23;
                        if (inClose[i - 1] < inOpen[i - 1]) {
                            num23 = inClose[i - 1];
                        }
                        else {
                            num23 = inOpen[i - 1];
                        }
                        if (inClose[i - 2] < inOpen[i - 2]) {
                            num22 = inClose[i - 2];
                        }
                        else {
                            num22 = inOpen[i - 2];
                        }
                        if ((num23 > num22) && ((((inClose[i - 2] >= inOpen[i - 2]) && (((inClose[i] < inOpen[i]) ? -1 : 1) == -1)) && (inClose[i] < inOpen[i - 2])) || (((((inClose[i - 2] < inOpen[i - 2]) ? -1 : 1) == -1) && (inClose[i] >= inOpen[i])) && (inClose[i] > inOpen[i - 2])))) {
                            int num21;
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num21 = 1;
                            }
                            else {
                                num21 = -1;
                            }
                            outInteger[outIdx] = -num21 * 100;
                            outIdx++;
                            goto Label_0610;
                        }
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_0610:
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num20 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
            }
            else {
                double num19;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num19 = inHigh[i - 2] - inLow[i - 2];
                }
                else {
                    double num16;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num17;
                        double num18;
                        if (inClose[i - 2] >= inOpen[i - 2]) {
                            num18 = inClose[i - 2];
                        }
                        else {
                            num18 = inOpen[i - 2];
                        }
                        if (inClose[i - 2] >= inOpen[i - 2]) {
                            num17 = inOpen[i - 2];
                        }
                        else {
                            num17 = inClose[i - 2];
                        }
                        num16 = (inHigh[i - 2] - num18) + (num17 - inLow[i - 2]);
                    }
                    else {
                        num16 = 0.0;
                    }
                    num19 = num16;
                }
                num20 = num19;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num15 = Math.Abs((double)(inClose[BodyLongTrailingIdx] - inOpen[BodyLongTrailingIdx]));
            }
            else {
                double num14;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num14 = inHigh[BodyLongTrailingIdx] - inLow[BodyLongTrailingIdx];
                }
                else {
                    double num11;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num12;
                        double num13;
                        if (inClose[BodyLongTrailingIdx] >= inOpen[BodyLongTrailingIdx]) {
                            num13 = inClose[BodyLongTrailingIdx];
                        }
                        else {
                            num13 = inOpen[BodyLongTrailingIdx];
                        }
                        if (inClose[BodyLongTrailingIdx] >= inOpen[BodyLongTrailingIdx]) {
                            num12 = inOpen[BodyLongTrailingIdx];
                        }
                        else {
                            num12 = inClose[BodyLongTrailingIdx];
                        }
                        num11 = (inHigh[BodyLongTrailingIdx] - num13) + (num12 - inLow[BodyLongTrailingIdx]);
                    }
                    else {
                        num11 = 0.0;
                    }
                    num14 = num11;
                }
                num15 = num14;
            }
            BodyLongPeriodTotal += num20 - num15;
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
            }
            else {
                double num9;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i - 1] - inLow[i - 1];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num8 = inClose[i - 1];
                        }
                        else {
                            num8 = inOpen[i - 1];
                        }
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num7 = inOpen[i - 1];
                        }
                        else {
                            num7 = inClose[i - 1];
                        }
                        num6 = (inHigh[i - 1] - num8) + (num7 - inLow[i - 1]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[BodyShortTrailingIdx] - inOpen[BodyShortTrailingIdx]));
            }
            else {
                double num4;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num4 = inHigh[BodyShortTrailingIdx] - inLow[BodyShortTrailingIdx];
                }
                else {
                    double num;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[BodyShortTrailingIdx] >= inOpen[BodyShortTrailingIdx]) {
                            num3 = inClose[BodyShortTrailingIdx];
                        }
                        else {
                            num3 = inOpen[BodyShortTrailingIdx];
                        }
                        if (inClose[BodyShortTrailingIdx] >= inOpen[BodyShortTrailingIdx]) {
                            num2 = inOpen[BodyShortTrailingIdx];
                        }
                        else {
                            num2 = inClose[BodyShortTrailingIdx];
                        }
                        num = (inHigh[BodyShortTrailingIdx] - num3) + (num2 - inLow[BodyShortTrailingIdx]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            BodyShortPeriodTotal += num10 - num5;
            i++;
            BodyLongTrailingIdx++;
            BodyShortTrailingIdx++;
            if (i <= endIdx) {
                goto Label_0238;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode Cdl3LineStrike(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            int totIdx;
            int num46;
            double[] NearPeriodTotal = new double[4];
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = Cdl3LineStrikeLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            NearPeriodTotal[3] = 0.0;
            NearPeriodTotal[2] = 0.0;
            int NearTrailingIdx = startIdx - Globals.candleSettings[8].avgPeriod;
            int i = NearTrailingIdx;
            while (true) {
                double num51;
                double num56;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                    num56 = Math.Abs((double)(inClose[i - 3] - inOpen[i - 3]));
                }
                else {
                    double num55;
                    if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                        num55 = inHigh[i - 3] - inLow[i - 3];
                    }
                    else {
                        double num52;
                        if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                            double num53;
                            double num54;
                            if (inClose[i - 3] >= inOpen[i - 3]) {
                                num54 = inClose[i - 3];
                            }
                            else {
                                num54 = inOpen[i - 3];
                            }
                            if (inClose[i - 3] >= inOpen[i - 3]) {
                                num53 = inOpen[i - 3];
                            }
                            else {
                                num53 = inClose[i - 3];
                            }
                            num52 = (inHigh[i - 3] - num54) + (num53 - inLow[i - 3]);
                        }
                        else {
                            num52 = 0.0;
                        }
                        num55 = num52;
                    }
                    num56 = num55;
                }
                NearPeriodTotal[3] += num56;
                if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                    num51 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                }
                else {
                    double num50;
                    if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                        num50 = inHigh[i - 2] - inLow[i - 2];
                    }
                    else {
                        double num47;
                        if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                            double num48;
                            double num49;
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num49 = inClose[i - 2];
                            }
                            else {
                                num49 = inOpen[i - 2];
                            }
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num48 = inOpen[i - 2];
                            }
                            else {
                                num48 = inClose[i - 2];
                            }
                            num47 = (inHigh[i - 2] - num49) + (num48 - inLow[i - 2]);
                        }
                        else {
                            num47 = 0.0;
                        }
                        num50 = num47;
                    }
                    num51 = num50;
                }
                NearPeriodTotal[2] += num51;
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            Label_0256:
            if (inClose[i - 2] >= inOpen[i - 2]) {
                num46 = 1;
            }
            else {
                num46 = -1;
            }
            if (((inClose[i - 3] < inOpen[i - 3]) ? -1 : 1) == num46) {
                int num45;
                if (inClose[i - 1] >= inOpen[i - 1]) {
                    num45 = 1;
                }
                else {
                    num45 = -1;
                }
                if (((inClose[i - 2] < inOpen[i - 2]) ? -1 : 1) == num45) {
                    int num44;
                    if (inClose[i - 1] >= inOpen[i - 1]) {
                        num44 = 1;
                    }
                    else {
                        num44 = -1;
                    }
                    if (((inClose[i] < inOpen[i]) ? -1 : 1) == -num44) {
                        double num36;
                        double num42;
                        double num43;
                        if (inOpen[i - 3] < inClose[i - 3]) {
                            num43 = inOpen[i - 3];
                        }
                        else {
                            num43 = inClose[i - 3];
                        }
                        if (Globals.candleSettings[8].avgPeriod != 0.0) {
                            num42 = NearPeriodTotal[3] / ((double)Globals.candleSettings[8].avgPeriod);
                        }
                        else {
                            double num41;
                            if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                                num41 = Math.Abs((double)(inClose[i - 3] - inOpen[i - 3]));
                            }
                            else {
                                double num40;
                                if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                                    num40 = inHigh[i - 3] - inLow[i - 3];
                                }
                                else {
                                    double num37;
                                    if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                                        double num38;
                                        double num39;
                                        if (inClose[i - 3] >= inOpen[i - 3]) {
                                            num39 = inClose[i - 3];
                                        }
                                        else {
                                            num39 = inOpen[i - 3];
                                        }
                                        if (inClose[i - 3] >= inOpen[i - 3]) {
                                            num38 = inOpen[i - 3];
                                        }
                                        else {
                                            num38 = inClose[i - 3];
                                        }
                                        num37 = (inHigh[i - 3] - num39) + (num38 - inLow[i - 3]);
                                    }
                                    else {
                                        num37 = 0.0;
                                    }
                                    num40 = num37;
                                }
                                num41 = num40;
                            }
                            num42 = num41;
                        }
                        if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                            num36 = 2.0;
                        }
                        else {
                            num36 = 1.0;
                        }
                        if (inOpen[i - 2] >= (num43 - ((Globals.candleSettings[8].factor * num42) / num36))) {
                            double num28;
                            double num34;
                            double num35;
                            if (inOpen[i - 3] > inClose[i - 3]) {
                                num35 = inOpen[i - 3];
                            }
                            else {
                                num35 = inClose[i - 3];
                            }
                            if (Globals.candleSettings[8].avgPeriod != 0.0) {
                                num34 = NearPeriodTotal[3] / ((double)Globals.candleSettings[8].avgPeriod);
                            }
                            else {
                                double num33;
                                if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                                    num33 = Math.Abs((double)(inClose[i - 3] - inOpen[i - 3]));
                                }
                                else {
                                    double num32;
                                    if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                                        num32 = inHigh[i - 3] - inLow[i - 3];
                                    }
                                    else {
                                        double num29;
                                        if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                                            double num30;
                                            double num31;
                                            if (inClose[i - 3] >= inOpen[i - 3]) {
                                                num31 = inClose[i - 3];
                                            }
                                            else {
                                                num31 = inOpen[i - 3];
                                            }
                                            if (inClose[i - 3] >= inOpen[i - 3]) {
                                                num30 = inOpen[i - 3];
                                            }
                                            else {
                                                num30 = inClose[i - 3];
                                            }
                                            num29 = (inHigh[i - 3] - num31) + (num30 - inLow[i - 3]);
                                        }
                                        else {
                                            num29 = 0.0;
                                        }
                                        num32 = num29;
                                    }
                                    num33 = num32;
                                }
                                num34 = num33;
                            }
                            if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                                num28 = 2.0;
                            }
                            else {
                                num28 = 1.0;
                            }
                            if (inOpen[i - 2] <= (num35 + ((Globals.candleSettings[8].factor * num34) / num28))) {
                                double num20;
                                double num26;
                                double num27;
                                if (inOpen[i - 2] < inClose[i - 2]) {
                                    num27 = inOpen[i - 2];
                                }
                                else {
                                    num27 = inClose[i - 2];
                                }
                                if (Globals.candleSettings[8].avgPeriod != 0.0) {
                                    num26 = NearPeriodTotal[2] / ((double)Globals.candleSettings[8].avgPeriod);
                                }
                                else {
                                    double num25;
                                    if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                                        num25 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                                    }
                                    else {
                                        double num24;
                                        if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                                            num24 = inHigh[i - 2] - inLow[i - 2];
                                        }
                                        else {
                                            double num21;
                                            if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                                                double num22;
                                                double num23;
                                                if (inClose[i - 2] >= inOpen[i - 2]) {
                                                    num23 = inClose[i - 2];
                                                }
                                                else {
                                                    num23 = inOpen[i - 2];
                                                }
                                                if (inClose[i - 2] >= inOpen[i - 2]) {
                                                    num22 = inOpen[i - 2];
                                                }
                                                else {
                                                    num22 = inClose[i - 2];
                                                }
                                                num21 = (inHigh[i - 2] - num23) + (num22 - inLow[i - 2]);
                                            }
                                            else {
                                                num21 = 0.0;
                                            }
                                            num24 = num21;
                                        }
                                        num25 = num24;
                                    }
                                    num26 = num25;
                                }
                                if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                                    num20 = 2.0;
                                }
                                else {
                                    num20 = 1.0;
                                }
                                if (inOpen[i - 1] >= (num27 - ((Globals.candleSettings[8].factor * num26) / num20))) {
                                    double num12;
                                    double num18;
                                    double num19;
                                    if (inOpen[i - 2] > inClose[i - 2]) {
                                        num19 = inOpen[i - 2];
                                    }
                                    else {
                                        num19 = inClose[i - 2];
                                    }
                                    if (Globals.candleSettings[8].avgPeriod != 0.0) {
                                        num18 = NearPeriodTotal[2] / ((double)Globals.candleSettings[8].avgPeriod);
                                    }
                                    else {
                                        double num17;
                                        if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                                            num17 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                                        }
                                        else {
                                            double num16;
                                            if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                                                num16 = inHigh[i - 2] - inLow[i - 2];
                                            }
                                            else {
                                                double num13;
                                                if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                                                    double num14;
                                                    double num15;
                                                    if (inClose[i - 2] >= inOpen[i - 2]) {
                                                        num15 = inClose[i - 2];
                                                    }
                                                    else {
                                                        num15 = inOpen[i - 2];
                                                    }
                                                    if (inClose[i - 2] >= inOpen[i - 2]) {
                                                        num14 = inOpen[i - 2];
                                                    }
                                                    else {
                                                        num14 = inClose[i - 2];
                                                    }
                                                    num13 = (inHigh[i - 2] - num15) + (num14 - inLow[i - 2]);
                                                }
                                                else {
                                                    num13 = 0.0;
                                                }
                                                num16 = num13;
                                            }
                                            num17 = num16;
                                        }
                                        num18 = num17;
                                    }
                                    if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                                        num12 = 2.0;
                                    }
                                    else {
                                        num12 = 1.0;
                                    }
                                    if ((inOpen[i - 1] <= (num19 + ((Globals.candleSettings[8].factor * num18) / num12))) && ((((inClose[i - 1] >= inOpen[i - 1]) && (inClose[i - 1] > inClose[i - 2])) && (((inClose[i - 2] > inClose[i - 3]) && (inOpen[i] > inClose[i - 1])) && (inClose[i] < inOpen[i - 3]))) || ((((((inClose[i - 1] < inOpen[i - 1]) ? -1 : 1) == -1) && (inClose[i - 1] < inClose[i - 2])) && ((inClose[i - 2] < inClose[i - 3]) && (inOpen[i] < inClose[i - 1]))) && (inClose[i] > inOpen[i - 3])))) {
                                        int num11;
                                        if (inClose[i - 1] >= inOpen[i - 1]) {
                                            num11 = 1;
                                        }
                                        else {
                                            num11 = -1;
                                        }
                                        outInteger[outIdx] = num11 * 100;
                                        outIdx++;
                                        goto Label_0975;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_0975:
            totIdx = 3;
            while (totIdx >= 2) {
                double num5;
                double num10;
                if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                    num10 = Math.Abs((double)(inClose[i - totIdx] - inOpen[i - totIdx]));
                }
                else {
                    double num9;
                    if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                        num9 = inHigh[i - totIdx] - inLow[i - totIdx];
                    }
                    else {
                        double num6;
                        if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                            double num7;
                            double num8;
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num8 = inClose[i - totIdx];
                            }
                            else {
                                num8 = inOpen[i - totIdx];
                            }
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num7 = inOpen[i - totIdx];
                            }
                            else {
                                num7 = inClose[i - totIdx];
                            }
                            num6 = (inHigh[i - totIdx] - num8) + (num7 - inLow[i - totIdx]);
                        }
                        else {
                            num6 = 0.0;
                        }
                        num9 = num6;
                    }
                    num10 = num9;
                }
                if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                    num5 = Math.Abs((double)(inClose[NearTrailingIdx - totIdx] - inOpen[NearTrailingIdx - totIdx]));
                }
                else {
                    double num4;
                    if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                        num4 = inHigh[NearTrailingIdx - totIdx] - inLow[NearTrailingIdx - totIdx];
                    }
                    else {
                        double num;
                        if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                            double num2;
                            double num3;
                            if (inClose[NearTrailingIdx - totIdx] >= inOpen[NearTrailingIdx - totIdx]) {
                                num3 = inClose[NearTrailingIdx - totIdx];
                            }
                            else {
                                num3 = inOpen[NearTrailingIdx - totIdx];
                            }
                            if (inClose[NearTrailingIdx - totIdx] >= inOpen[NearTrailingIdx - totIdx]) {
                                num2 = inOpen[NearTrailingIdx - totIdx];
                            }
                            else {
                                num2 = inClose[NearTrailingIdx - totIdx];
                            }
                            num = (inHigh[NearTrailingIdx - totIdx] - num3) + (num2 - inLow[NearTrailingIdx - totIdx]);
                        }
                        else {
                            num = 0.0;
                        }
                        num4 = num;
                    }
                    num5 = num4;
                }
                NearPeriodTotal[totIdx] += num10 - num5;
                totIdx--;
            }
            i++;
            NearTrailingIdx++;
            if (i <= endIdx) {
                goto Label_0256;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode Cdl3Outside(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = Cdl3OutsideLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            int i = startIdx;
            int outIdx = 0;
            do {
                if ((((inClose[i - 1] >= inOpen[i - 1]) && (((inClose[i - 2] < inOpen[i - 2]) ? -1 : 1) == -1)) && (((inClose[i - 1] > inOpen[i - 2]) && (inOpen[i - 1] < inClose[i - 2])) && (inClose[i] > inClose[i - 1]))) || ((((((inClose[i - 1] < inOpen[i - 1]) ? -1 : 1) == -1) && (inClose[i - 2] >= inOpen[i - 2])) && ((inOpen[i - 1] > inClose[i - 2]) && (inClose[i - 1] < inOpen[i - 2]))) && (inClose[i] < inClose[i - 1]))) {
                    int num;
                    if (inClose[i - 1] >= inOpen[i - 1]) {
                        num = 1;
                    }
                    else {
                        num = -1;
                    }
                    outInteger[outIdx] = num * 100;
                    outIdx++;
                }
                else {
                    outInteger[outIdx] = 0;
                    outIdx++;
                }
                i++;
            }
            while (i <= endIdx);
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode Cdl3StarsInSouth(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            double num25;
            double num30;
            double num35;
            double num40;
            double[] ShadowVeryShortPeriodTotal = new double[2];
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = Cdl3StarsInSouthLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double BodyLongPeriodTotal = 0.0;
            int BodyLongTrailingIdx = startIdx - Globals.candleSettings[0].avgPeriod;
            double ShadowLongPeriodTotal = 0.0;
            int ShadowLongTrailingIdx = startIdx - Globals.candleSettings[4].avgPeriod;
            ShadowVeryShortPeriodTotal[1] = 0.0;
            ShadowVeryShortPeriodTotal[0] = 0.0;
            int ShadowVeryShortTrailingIdx = startIdx - Globals.candleSettings[7].avgPeriod;
            double BodyShortPeriodTotal = 0.0;
            int BodyShortTrailingIdx = startIdx - Globals.candleSettings[2].avgPeriod;
            int i = BodyLongTrailingIdx;
            while (true) {
                double num111;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num111 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                }
                else {
                    double num110;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num110 = inHigh[i - 2] - inLow[i - 2];
                    }
                    else {
                        double num107;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num108;
                            double num109;
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num109 = inClose[i - 2];
                            }
                            else {
                                num109 = inOpen[i - 2];
                            }
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num108 = inOpen[i - 2];
                            }
                            else {
                                num108 = inClose[i - 2];
                            }
                            num107 = (inHigh[i - 2] - num109) + (num108 - inLow[i - 2]);
                        }
                        else {
                            num107 = 0.0;
                        }
                        num110 = num107;
                    }
                    num111 = num110;
                }
                BodyLongPeriodTotal += num111;
                i++;
            }
            i = ShadowLongTrailingIdx;
            while (true) {
                double num106;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[4].rangeType == RangeType.RealBody) {
                    num106 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                }
                else {
                    double num105;
                    if (Globals.candleSettings[4].rangeType == RangeType.HighLow) {
                        num105 = inHigh[i - 2] - inLow[i - 2];
                    }
                    else {
                        double num102;
                        if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                            double num103;
                            double num104;
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num104 = inClose[i - 2];
                            }
                            else {
                                num104 = inOpen[i - 2];
                            }
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num103 = inOpen[i - 2];
                            }
                            else {
                                num103 = inClose[i - 2];
                            }
                            num102 = (inHigh[i - 2] - num104) + (num103 - inLow[i - 2]);
                        }
                        else {
                            num102 = 0.0;
                        }
                        num105 = num102;
                    }
                    num106 = num105;
                }
                ShadowLongPeriodTotal += num106;
                i++;
            }
            i = ShadowVeryShortTrailingIdx;
            while (true) {
                double num96;
                double num101;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num101 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num100;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num100 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num97;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num98;
                            double num99;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num99 = inClose[i - 1];
                            }
                            else {
                                num99 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num98 = inOpen[i - 1];
                            }
                            else {
                                num98 = inClose[i - 1];
                            }
                            num97 = (inHigh[i - 1] - num99) + (num98 - inLow[i - 1]);
                        }
                        else {
                            num97 = 0.0;
                        }
                        num100 = num97;
                    }
                    num101 = num100;
                }
                ShadowVeryShortPeriodTotal[1] += num101;
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num96 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num95;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num95 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num92;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num93;
                            double num94;
                            if (inClose[i] >= inOpen[i]) {
                                num94 = inClose[i];
                            }
                            else {
                                num94 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num93 = inOpen[i];
                            }
                            else {
                                num93 = inClose[i];
                            }
                            num92 = (inHigh[i] - num94) + (num93 - inLow[i]);
                        }
                        else {
                            num92 = 0.0;
                        }
                        num95 = num92;
                    }
                    num96 = num95;
                }
                ShadowVeryShortPeriodTotal[0] += num96;
                i++;
            }
            i = BodyShortTrailingIdx;
            while (true) {
                double num91;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                    num91 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num90;
                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                        num90 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num87;
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            double num88;
                            double num89;
                            if (inClose[i] >= inOpen[i]) {
                                num89 = inClose[i];
                            }
                            else {
                                num89 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num88 = inOpen[i];
                            }
                            else {
                                num88 = inClose[i];
                            }
                            num87 = (inHigh[i] - num89) + (num88 - inLow[i]);
                        }
                        else {
                            num87 = 0.0;
                        }
                        num90 = num87;
                    }
                    num91 = num90;
                }
                BodyShortPeriodTotal += num91;
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            Label_052C:
            if (((((inClose[i - 2] < inOpen[i - 2]) ? -1 : 1) == -1) && (((inClose[i - 1] < inOpen[i - 1]) ? -1 : 1) == -1)) && (((inClose[i] < inOpen[i]) ? -1 : 1) == -1)) {
                double num80;
                double num86;
                if (Globals.candleSettings[0].avgPeriod != 0.0) {
                    num86 = BodyLongPeriodTotal / ((double)Globals.candleSettings[0].avgPeriod);
                }
                else {
                    double num85;
                    if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                        num85 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                    }
                    else {
                        double num84;
                        if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                            num84 = inHigh[i - 2] - inLow[i - 2];
                        }
                        else {
                            double num81;
                            if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                                double num82;
                                double num83;
                                if (inClose[i - 2] >= inOpen[i - 2]) {
                                    num83 = inClose[i - 2];
                                }
                                else {
                                    num83 = inOpen[i - 2];
                                }
                                if (inClose[i - 2] >= inOpen[i - 2]) {
                                    num82 = inOpen[i - 2];
                                }
                                else {
                                    num82 = inClose[i - 2];
                                }
                                num81 = (inHigh[i - 2] - num83) + (num82 - inLow[i - 2]);
                            }
                            else {
                                num81 = 0.0;
                            }
                            num84 = num81;
                        }
                        num85 = num84;
                    }
                    num86 = num85;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                    num80 = 2.0;
                }
                else {
                    num80 = 1.0;
                }
                if (Math.Abs((double)(inClose[i - 2] - inOpen[i - 2])) > ((Globals.candleSettings[0].factor * num86) / num80)) {
                    double num72;
                    double num78;
                    double num79;
                    if (inClose[i - 2] >= inOpen[i - 2]) {
                        num79 = inOpen[i - 2];
                    }
                    else {
                        num79 = inClose[i - 2];
                    }
                    if (Globals.candleSettings[4].avgPeriod != 0.0) {
                        num78 = ShadowLongPeriodTotal / ((double)Globals.candleSettings[4].avgPeriod);
                    }
                    else {
                        double num77;
                        if (Globals.candleSettings[4].rangeType == RangeType.RealBody) {
                            num77 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                        }
                        else {
                            double num76;
                            if (Globals.candleSettings[4].rangeType == RangeType.HighLow) {
                                num76 = inHigh[i - 2] - inLow[i - 2];
                            }
                            else {
                                double num73;
                                if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                                    double num74;
                                    double num75;
                                    if (inClose[i - 2] >= inOpen[i - 2]) {
                                        num75 = inClose[i - 2];
                                    }
                                    else {
                                        num75 = inOpen[i - 2];
                                    }
                                    if (inClose[i - 2] >= inOpen[i - 2]) {
                                        num74 = inOpen[i - 2];
                                    }
                                    else {
                                        num74 = inClose[i - 2];
                                    }
                                    num73 = (inHigh[i - 2] - num75) + (num74 - inLow[i - 2]);
                                }
                                else {
                                    num73 = 0.0;
                                }
                                num76 = num73;
                            }
                            num77 = num76;
                        }
                        num78 = num77;
                    }
                    if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                        num72 = 2.0;
                    }
                    else {
                        num72 = 1.0;
                    }
                    if (((((num79 - inLow[i - 2]) > ((Globals.candleSettings[4].factor * num78) / num72)) && (Math.Abs((double)(inClose[i - 1] - inOpen[i - 1])) < Math.Abs((double)(inClose[i - 2] - inOpen[i - 2])))) && ((inOpen[i - 1] > inClose[i - 2]) && (inOpen[i - 1] <= inHigh[i - 2]))) && ((inLow[i - 1] < inClose[i - 2]) && (inLow[i - 1] >= inLow[i - 2]))) {
                        double num64;
                        double num70;
                        double num71;
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num71 = inOpen[i - 1];
                        }
                        else {
                            num71 = inClose[i - 1];
                        }
                        if (Globals.candleSettings[7].avgPeriod != 0.0) {
                            num70 = ShadowVeryShortPeriodTotal[1] / ((double)Globals.candleSettings[7].avgPeriod);
                        }
                        else {
                            double num69;
                            if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                                num69 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                            }
                            else {
                                double num68;
                                if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                                    num68 = inHigh[i - 1] - inLow[i - 1];
                                }
                                else {
                                    double num65;
                                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                        double num66;
                                        double num67;
                                        if (inClose[i - 1] >= inOpen[i - 1]) {
                                            num67 = inClose[i - 1];
                                        }
                                        else {
                                            num67 = inOpen[i - 1];
                                        }
                                        if (inClose[i - 1] >= inOpen[i - 1]) {
                                            num66 = inOpen[i - 1];
                                        }
                                        else {
                                            num66 = inClose[i - 1];
                                        }
                                        num65 = (inHigh[i - 1] - num67) + (num66 - inLow[i - 1]);
                                    }
                                    else {
                                        num65 = 0.0;
                                    }
                                    num68 = num65;
                                }
                                num69 = num68;
                            }
                            num70 = num69;
                        }
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            num64 = 2.0;
                        }
                        else {
                            num64 = 1.0;
                        }
                        if ((num71 - inLow[i - 1]) > ((Globals.candleSettings[7].factor * num70) / num64)) {
                            double num57;
                            double num63;
                            if (Globals.candleSettings[2].avgPeriod != 0.0) {
                                num63 = BodyShortPeriodTotal / ((double)Globals.candleSettings[2].avgPeriod);
                            }
                            else {
                                double num62;
                                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                                    num62 = Math.Abs((double)(inClose[i] - inOpen[i]));
                                }
                                else {
                                    double num61;
                                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                                        num61 = inHigh[i] - inLow[i];
                                    }
                                    else {
                                        double num58;
                                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                                            double num59;
                                            double num60;
                                            if (inClose[i] >= inOpen[i]) {
                                                num60 = inClose[i];
                                            }
                                            else {
                                                num60 = inOpen[i];
                                            }
                                            if (inClose[i] >= inOpen[i]) {
                                                num59 = inOpen[i];
                                            }
                                            else {
                                                num59 = inClose[i];
                                            }
                                            num58 = (inHigh[i] - num60) + (num59 - inLow[i]);
                                        }
                                        else {
                                            num58 = 0.0;
                                        }
                                        num61 = num58;
                                    }
                                    num62 = num61;
                                }
                                num63 = num62;
                            }
                            if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                                num57 = 2.0;
                            }
                            else {
                                num57 = 1.0;
                            }
                            if (Math.Abs((double)(inClose[i] - inOpen[i])) < ((Globals.candleSettings[2].factor * num63) / num57)) {
                                double num49;
                                double num55;
                                double num56;
                                if (inClose[i] >= inOpen[i]) {
                                    num56 = inOpen[i];
                                }
                                else {
                                    num56 = inClose[i];
                                }
                                if (Globals.candleSettings[7].avgPeriod != 0.0) {
                                    num55 = ShadowVeryShortPeriodTotal[0] / ((double)Globals.candleSettings[7].avgPeriod);
                                }
                                else {
                                    double num54;
                                    if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                                        num54 = Math.Abs((double)(inClose[i] - inOpen[i]));
                                    }
                                    else {
                                        double num53;
                                        if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                                            num53 = inHigh[i] - inLow[i];
                                        }
                                        else {
                                            double num50;
                                            if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                                double num51;
                                                double num52;
                                                if (inClose[i] >= inOpen[i]) {
                                                    num52 = inClose[i];
                                                }
                                                else {
                                                    num52 = inOpen[i];
                                                }
                                                if (inClose[i] >= inOpen[i]) {
                                                    num51 = inOpen[i];
                                                }
                                                else {
                                                    num51 = inClose[i];
                                                }
                                                num50 = (inHigh[i] - num52) + (num51 - inLow[i]);
                                            }
                                            else {
                                                num50 = 0.0;
                                            }
                                            num53 = num50;
                                        }
                                        num54 = num53;
                                    }
                                    num55 = num54;
                                }
                                if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                    num49 = 2.0;
                                }
                                else {
                                    num49 = 1.0;
                                }
                                if ((num56 - inLow[i]) < ((Globals.candleSettings[7].factor * num55) / num49)) {
                                    double num41;
                                    double num47;
                                    double num48;
                                    if (inClose[i] >= inOpen[i]) {
                                        num48 = inClose[i];
                                    }
                                    else {
                                        num48 = inOpen[i];
                                    }
                                    if (Globals.candleSettings[7].avgPeriod != 0.0) {
                                        num47 = ShadowVeryShortPeriodTotal[0] / ((double)Globals.candleSettings[7].avgPeriod);
                                    }
                                    else {
                                        double num46;
                                        if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                                            num46 = Math.Abs((double)(inClose[i] - inOpen[i]));
                                        }
                                        else {
                                            double num45;
                                            if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                                                num45 = inHigh[i] - inLow[i];
                                            }
                                            else {
                                                double num42;
                                                if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                                    double num43;
                                                    double num44;
                                                    if (inClose[i] >= inOpen[i]) {
                                                        num44 = inClose[i];
                                                    }
                                                    else {
                                                        num44 = inOpen[i];
                                                    }
                                                    if (inClose[i] >= inOpen[i]) {
                                                        num43 = inOpen[i];
                                                    }
                                                    else {
                                                        num43 = inClose[i];
                                                    }
                                                    num42 = (inHigh[i] - num44) + (num43 - inLow[i]);
                                                }
                                                else {
                                                    num42 = 0.0;
                                                }
                                                num45 = num42;
                                            }
                                            num46 = num45;
                                        }
                                        num47 = num46;
                                    }
                                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                        num41 = 2.0;
                                    }
                                    else {
                                        num41 = 1.0;
                                    }
                                    if ((((inHigh[i] - num48) < ((Globals.candleSettings[7].factor * num47) / num41)) && (inLow[i] > inLow[i - 1])) && (inHigh[i] < inHigh[i - 1])) {
                                        outInteger[outIdx] = 100;
                                        outIdx++;
                                        goto Label_0E31;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_0E31:
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num40 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
            }
            else {
                double num39;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num39 = inHigh[i - 2] - inLow[i - 2];
                }
                else {
                    double num36;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num37;
                        double num38;
                        if (inClose[i - 2] >= inOpen[i - 2]) {
                            num38 = inClose[i - 2];
                        }
                        else {
                            num38 = inOpen[i - 2];
                        }
                        if (inClose[i - 2] >= inOpen[i - 2]) {
                            num37 = inOpen[i - 2];
                        }
                        else {
                            num37 = inClose[i - 2];
                        }
                        num36 = (inHigh[i - 2] - num38) + (num37 - inLow[i - 2]);
                    }
                    else {
                        num36 = 0.0;
                    }
                    num39 = num36;
                }
                num40 = num39;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num35 = Math.Abs((double)(inClose[BodyLongTrailingIdx - 2] - inOpen[BodyLongTrailingIdx - 2]));
            }
            else {
                double num34;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num34 = inHigh[BodyLongTrailingIdx - 2] - inLow[BodyLongTrailingIdx - 2];
                }
                else {
                    double num31;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num32;
                        double num33;
                        if (inClose[BodyLongTrailingIdx - 2] >= inOpen[BodyLongTrailingIdx - 2]) {
                            num33 = inClose[BodyLongTrailingIdx - 2];
                        }
                        else {
                            num33 = inOpen[BodyLongTrailingIdx - 2];
                        }
                        if (inClose[BodyLongTrailingIdx - 2] >= inOpen[BodyLongTrailingIdx - 2]) {
                            num32 = inOpen[BodyLongTrailingIdx - 2];
                        }
                        else {
                            num32 = inClose[BodyLongTrailingIdx - 2];
                        }
                        num31 = (inHigh[BodyLongTrailingIdx - 2] - num33) + (num32 - inLow[BodyLongTrailingIdx - 2]);
                    }
                    else {
                        num31 = 0.0;
                    }
                    num34 = num31;
                }
                num35 = num34;
            }
            BodyLongPeriodTotal += num40 - num35;
            if (Globals.candleSettings[4].rangeType == RangeType.RealBody) {
                num30 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
            }
            else {
                double num29;
                if (Globals.candleSettings[4].rangeType == RangeType.HighLow) {
                    num29 = inHigh[i - 2] - inLow[i - 2];
                }
                else {
                    double num26;
                    if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                        double num27;
                        double num28;
                        if (inClose[i - 2] >= inOpen[i - 2]) {
                            num28 = inClose[i - 2];
                        }
                        else {
                            num28 = inOpen[i - 2];
                        }
                        if (inClose[i - 2] >= inOpen[i - 2]) {
                            num27 = inOpen[i - 2];
                        }
                        else {
                            num27 = inClose[i - 2];
                        }
                        num26 = (inHigh[i - 2] - num28) + (num27 - inLow[i - 2]);
                    }
                    else {
                        num26 = 0.0;
                    }
                    num29 = num26;
                }
                num30 = num29;
            }
            if (Globals.candleSettings[4].rangeType == RangeType.RealBody) {
                num25 = Math.Abs((double)(inClose[ShadowLongTrailingIdx - 2] - inOpen[ShadowLongTrailingIdx - 2]));
            }
            else {
                double num24;
                if (Globals.candleSettings[4].rangeType == RangeType.HighLow) {
                    num24 = inHigh[ShadowLongTrailingIdx - 2] - inLow[ShadowLongTrailingIdx - 2];
                }
                else {
                    double num21;
                    if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                        double num22;
                        double num23;
                        if (inClose[ShadowLongTrailingIdx - 2] >= inOpen[ShadowLongTrailingIdx - 2]) {
                            num23 = inClose[ShadowLongTrailingIdx - 2];
                        }
                        else {
                            num23 = inOpen[ShadowLongTrailingIdx - 2];
                        }
                        if (inClose[ShadowLongTrailingIdx - 2] >= inOpen[ShadowLongTrailingIdx - 2]) {
                            num22 = inOpen[ShadowLongTrailingIdx - 2];
                        }
                        else {
                            num22 = inClose[ShadowLongTrailingIdx - 2];
                        }
                        num21 = (inHigh[ShadowLongTrailingIdx - 2] - num23) + (num22 - inLow[ShadowLongTrailingIdx - 2]);
                    }
                    else {
                        num21 = 0.0;
                    }
                    num24 = num21;
                }
                num25 = num24;
            }
            ShadowLongPeriodTotal += num30 - num25;
            for (int totIdx = 1; totIdx >= 0; totIdx--) {
                double num15;
                double num20;
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num20 = Math.Abs((double)(inClose[i - totIdx] - inOpen[i - totIdx]));
                }
                else {
                    double num19;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num19 = inHigh[i - totIdx] - inLow[i - totIdx];
                    }
                    else {
                        double num16;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num17;
                            double num18;
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num18 = inClose[i - totIdx];
                            }
                            else {
                                num18 = inOpen[i - totIdx];
                            }
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num17 = inOpen[i - totIdx];
                            }
                            else {
                                num17 = inClose[i - totIdx];
                            }
                            num16 = (inHigh[i - totIdx] - num18) + (num17 - inLow[i - totIdx]);
                        }
                        else {
                            num16 = 0.0;
                        }
                        num19 = num16;
                    }
                    num20 = num19;
                }
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num15 = Math.Abs((double)(inClose[ShadowVeryShortTrailingIdx - totIdx] - inOpen[ShadowVeryShortTrailingIdx - totIdx]));
                }
                else {
                    double num14;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num14 = inHigh[ShadowVeryShortTrailingIdx - totIdx] - inLow[ShadowVeryShortTrailingIdx - totIdx];
                    }
                    else {
                        double num11;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num12;
                            double num13;
                            if (inClose[ShadowVeryShortTrailingIdx - totIdx] >= inOpen[ShadowVeryShortTrailingIdx - totIdx]) {
                                num13 = inClose[ShadowVeryShortTrailingIdx - totIdx];
                            }
                            else {
                                num13 = inOpen[ShadowVeryShortTrailingIdx - totIdx];
                            }
                            if (inClose[ShadowVeryShortTrailingIdx - totIdx] >= inOpen[ShadowVeryShortTrailingIdx - totIdx]) {
                                num12 = inOpen[ShadowVeryShortTrailingIdx - totIdx];
                            }
                            else {
                                num12 = inClose[ShadowVeryShortTrailingIdx - totIdx];
                            }
                            num11 = (inHigh[ShadowVeryShortTrailingIdx - totIdx] - num13) + (num12 - inLow[ShadowVeryShortTrailingIdx - totIdx]);
                        }
                        else {
                            num11 = 0.0;
                        }
                        num14 = num11;
                    }
                    num15 = num14;
                }
                ShadowVeryShortPeriodTotal[totIdx] += num20 - num15;
            }
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num9;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i] - inLow[i];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i] >= inOpen[i]) {
                            num8 = inClose[i];
                        }
                        else {
                            num8 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num7 = inOpen[i];
                        }
                        else {
                            num7 = inClose[i];
                        }
                        num6 = (inHigh[i] - num8) + (num7 - inLow[i]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[BodyShortTrailingIdx] - inOpen[BodyShortTrailingIdx]));
            }
            else {
                double num4;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num4 = inHigh[BodyShortTrailingIdx] - inLow[BodyShortTrailingIdx];
                }
                else {
                    double num;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[BodyShortTrailingIdx] >= inOpen[BodyShortTrailingIdx]) {
                            num3 = inClose[BodyShortTrailingIdx];
                        }
                        else {
                            num3 = inOpen[BodyShortTrailingIdx];
                        }
                        if (inClose[BodyShortTrailingIdx] >= inOpen[BodyShortTrailingIdx]) {
                            num2 = inOpen[BodyShortTrailingIdx];
                        }
                        else {
                            num2 = inClose[BodyShortTrailingIdx];
                        }
                        num = (inHigh[BodyShortTrailingIdx] - num3) + (num2 - inLow[BodyShortTrailingIdx]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            BodyShortPeriodTotal += num10 - num5;
            i++;
            BodyLongTrailingIdx++;
            ShadowLongTrailingIdx++;
            ShadowVeryShortTrailingIdx++;
            BodyShortTrailingIdx++;
            if (i <= endIdx) {
                goto Label_052C;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode Cdl3WhiteSoldiers(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            int totIdx;
            double num5;
            double num10;
            double[] ShadowVeryShortPeriodTotal = new double[3];
            double[] NearPeriodTotal = new double[3];
            double[] FarPeriodTotal = new double[3];
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = Cdl3WhiteSoldiersLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            ShadowVeryShortPeriodTotal[2] = 0.0;
            ShadowVeryShortPeriodTotal[1] = 0.0;
            ShadowVeryShortPeriodTotal[0] = 0.0;
            int ShadowVeryShortTrailingIdx = startIdx - Globals.candleSettings[7].avgPeriod;
            NearPeriodTotal[2] = 0.0;
            NearPeriodTotal[1] = 0.0;
            NearPeriodTotal[0] = 0.0;
            int NearTrailingIdx = startIdx - Globals.candleSettings[8].avgPeriod;
            FarPeriodTotal[2] = 0.0;
            FarPeriodTotal[1] = 0.0;
            FarPeriodTotal[0] = 0.0;
            int FarTrailingIdx = startIdx - Globals.candleSettings[9].avgPeriod;
            double BodyShortPeriodTotal = 0.0;
            int BodyShortTrailingIdx = startIdx - Globals.candleSettings[2].avgPeriod;
            int i = ShadowVeryShortTrailingIdx;
            while (true) {
                double num129;
                double num134;
                double num139;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num139 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                }
                else {
                    double num138;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num138 = inHigh[i - 2] - inLow[i - 2];
                    }
                    else {
                        double num135;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num136;
                            double num137;
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num137 = inClose[i - 2];
                            }
                            else {
                                num137 = inOpen[i - 2];
                            }
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num136 = inOpen[i - 2];
                            }
                            else {
                                num136 = inClose[i - 2];
                            }
                            num135 = (inHigh[i - 2] - num137) + (num136 - inLow[i - 2]);
                        }
                        else {
                            num135 = 0.0;
                        }
                        num138 = num135;
                    }
                    num139 = num138;
                }
                ShadowVeryShortPeriodTotal[2] += num139;
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num134 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num133;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num133 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num130;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num131;
                            double num132;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num132 = inClose[i - 1];
                            }
                            else {
                                num132 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num131 = inOpen[i - 1];
                            }
                            else {
                                num131 = inClose[i - 1];
                            }
                            num130 = (inHigh[i - 1] - num132) + (num131 - inLow[i - 1]);
                        }
                        else {
                            num130 = 0.0;
                        }
                        num133 = num130;
                    }
                    num134 = num133;
                }
                ShadowVeryShortPeriodTotal[1] += num134;
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num129 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num128;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num128 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num125;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num126;
                            double num127;
                            if (inClose[i] >= inOpen[i]) {
                                num127 = inClose[i];
                            }
                            else {
                                num127 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num126 = inOpen[i];
                            }
                            else {
                                num126 = inClose[i];
                            }
                            num125 = (inHigh[i] - num127) + (num126 - inLow[i]);
                        }
                        else {
                            num125 = 0.0;
                        }
                        num128 = num125;
                    }
                    num129 = num128;
                }
                ShadowVeryShortPeriodTotal[0] += num129;
                i++;
            }
            i = NearTrailingIdx;
            while (true) {
                double num119;
                double num124;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                    num124 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                }
                else {
                    double num123;
                    if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                        num123 = inHigh[i - 2] - inLow[i - 2];
                    }
                    else {
                        double num120;
                        if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                            double num121;
                            double num122;
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num122 = inClose[i - 2];
                            }
                            else {
                                num122 = inOpen[i - 2];
                            }
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num121 = inOpen[i - 2];
                            }
                            else {
                                num121 = inClose[i - 2];
                            }
                            num120 = (inHigh[i - 2] - num122) + (num121 - inLow[i - 2]);
                        }
                        else {
                            num120 = 0.0;
                        }
                        num123 = num120;
                    }
                    num124 = num123;
                }
                NearPeriodTotal[2] += num124;
                if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                    num119 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num118;
                    if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                        num118 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num115;
                        if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                            double num116;
                            double num117;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num117 = inClose[i - 1];
                            }
                            else {
                                num117 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num116 = inOpen[i - 1];
                            }
                            else {
                                num116 = inClose[i - 1];
                            }
                            num115 = (inHigh[i - 1] - num117) + (num116 - inLow[i - 1]);
                        }
                        else {
                            num115 = 0.0;
                        }
                        num118 = num115;
                    }
                    num119 = num118;
                }
                NearPeriodTotal[1] += num119;
                i++;
            }
            i = FarTrailingIdx;
            while (true) {
                double num109;
                double num114;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[9].rangeType == RangeType.RealBody) {
                    num114 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                }
                else {
                    double num113;
                    if (Globals.candleSettings[9].rangeType == RangeType.HighLow) {
                        num113 = inHigh[i - 2] - inLow[i - 2];
                    }
                    else {
                        double num110;
                        if (Globals.candleSettings[9].rangeType == RangeType.Shadows) {
                            double num111;
                            double num112;
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num112 = inClose[i - 2];
                            }
                            else {
                                num112 = inOpen[i - 2];
                            }
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num111 = inOpen[i - 2];
                            }
                            else {
                                num111 = inClose[i - 2];
                            }
                            num110 = (inHigh[i - 2] - num112) + (num111 - inLow[i - 2]);
                        }
                        else {
                            num110 = 0.0;
                        }
                        num113 = num110;
                    }
                    num114 = num113;
                }
                FarPeriodTotal[2] += num114;
                if (Globals.candleSettings[9].rangeType == RangeType.RealBody) {
                    num109 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num108;
                    if (Globals.candleSettings[9].rangeType == RangeType.HighLow) {
                        num108 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num105;
                        if (Globals.candleSettings[9].rangeType == RangeType.Shadows) {
                            double num106;
                            double num107;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num107 = inClose[i - 1];
                            }
                            else {
                                num107 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num106 = inOpen[i - 1];
                            }
                            else {
                                num106 = inClose[i - 1];
                            }
                            num105 = (inHigh[i - 1] - num107) + (num106 - inLow[i - 1]);
                        }
                        else {
                            num105 = 0.0;
                        }
                        num108 = num105;
                    }
                    num109 = num108;
                }
                FarPeriodTotal[1] += num109;
                i++;
            }
            i = BodyShortTrailingIdx;
            while (true) {
                double num104;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                    num104 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num103;
                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                        num103 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num100;
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            double num101;
                            double num102;
                            if (inClose[i] >= inOpen[i]) {
                                num102 = inClose[i];
                            }
                            else {
                                num102 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num101 = inOpen[i];
                            }
                            else {
                                num101 = inClose[i];
                            }
                            num100 = (inHigh[i] - num102) + (num101 - inLow[i]);
                        }
                        else {
                            num100 = 0.0;
                        }
                        num103 = num100;
                    }
                    num104 = num103;
                }
                BodyShortPeriodTotal += num104;
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            Label_08A5:
            if (inClose[i - 2] >= inOpen[i - 2]) {
                double num92;
                double num98;
                double num99;
                if (inClose[i - 2] >= inOpen[i - 2]) {
                    num99 = inClose[i - 2];
                }
                else {
                    num99 = inOpen[i - 2];
                }
                if (Globals.candleSettings[7].avgPeriod != 0.0) {
                    num98 = ShadowVeryShortPeriodTotal[2] / ((double)Globals.candleSettings[7].avgPeriod);
                }
                else {
                    double num97;
                    if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                        num97 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                    }
                    else {
                        double num96;
                        if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                            num96 = inHigh[i - 2] - inLow[i - 2];
                        }
                        else {
                            double num93;
                            if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                double num94;
                                double num95;
                                if (inClose[i - 2] >= inOpen[i - 2]) {
                                    num95 = inClose[i - 2];
                                }
                                else {
                                    num95 = inOpen[i - 2];
                                }
                                if (inClose[i - 2] >= inOpen[i - 2]) {
                                    num94 = inOpen[i - 2];
                                }
                                else {
                                    num94 = inClose[i - 2];
                                }
                                num93 = (inHigh[i - 2] - num95) + (num94 - inLow[i - 2]);
                            }
                            else {
                                num93 = 0.0;
                            }
                            num96 = num93;
                        }
                        num97 = num96;
                    }
                    num98 = num97;
                }
                if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                    num92 = 2.0;
                }
                else {
                    num92 = 1.0;
                }
                if (((inHigh[i - 2] - num99) < ((Globals.candleSettings[7].factor * num98) / num92)) && (inClose[i - 1] >= inOpen[i - 1])) {
                    double num84;
                    double num90;
                    double num91;
                    if (inClose[i - 1] >= inOpen[i - 1]) {
                        num91 = inClose[i - 1];
                    }
                    else {
                        num91 = inOpen[i - 1];
                    }
                    if (Globals.candleSettings[7].avgPeriod != 0.0) {
                        num90 = ShadowVeryShortPeriodTotal[1] / ((double)Globals.candleSettings[7].avgPeriod);
                    }
                    else {
                        double num89;
                        if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                            num89 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                        }
                        else {
                            double num88;
                            if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                                num88 = inHigh[i - 1] - inLow[i - 1];
                            }
                            else {
                                double num85;
                                if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                    double num86;
                                    double num87;
                                    if (inClose[i - 1] >= inOpen[i - 1]) {
                                        num87 = inClose[i - 1];
                                    }
                                    else {
                                        num87 = inOpen[i - 1];
                                    }
                                    if (inClose[i - 1] >= inOpen[i - 1]) {
                                        num86 = inOpen[i - 1];
                                    }
                                    else {
                                        num86 = inClose[i - 1];
                                    }
                                    num85 = (inHigh[i - 1] - num87) + (num86 - inLow[i - 1]);
                                }
                                else {
                                    num85 = 0.0;
                                }
                                num88 = num85;
                            }
                            num89 = num88;
                        }
                        num90 = num89;
                    }
                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                        num84 = 2.0;
                    }
                    else {
                        num84 = 1.0;
                    }
                    if (((inHigh[i - 1] - num91) < ((Globals.candleSettings[7].factor * num90) / num84)) && (inClose[i] >= inOpen[i])) {
                        double num76;
                        double num82;
                        double num83;
                        if (inClose[i] >= inOpen[i]) {
                            num83 = inClose[i];
                        }
                        else {
                            num83 = inOpen[i];
                        }
                        if (Globals.candleSettings[7].avgPeriod != 0.0) {
                            num82 = ShadowVeryShortPeriodTotal[0] / ((double)Globals.candleSettings[7].avgPeriod);
                        }
                        else {
                            double num81;
                            if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                                num81 = Math.Abs((double)(inClose[i] - inOpen[i]));
                            }
                            else {
                                double num80;
                                if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                                    num80 = inHigh[i] - inLow[i];
                                }
                                else {
                                    double num77;
                                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                        double num78;
                                        double num79;
                                        if (inClose[i] >= inOpen[i]) {
                                            num79 = inClose[i];
                                        }
                                        else {
                                            num79 = inOpen[i];
                                        }
                                        if (inClose[i] >= inOpen[i]) {
                                            num78 = inOpen[i];
                                        }
                                        else {
                                            num78 = inClose[i];
                                        }
                                        num77 = (inHigh[i] - num79) + (num78 - inLow[i]);
                                    }
                                    else {
                                        num77 = 0.0;
                                    }
                                    num80 = num77;
                                }
                                num81 = num80;
                            }
                            num82 = num81;
                        }
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            num76 = 2.0;
                        }
                        else {
                            num76 = 1.0;
                        }
                        if ((((inHigh[i] - num83) < ((Globals.candleSettings[7].factor * num82) / num76)) && (inClose[i] > inClose[i - 1])) && ((inClose[i - 1] > inClose[i - 2]) && (inOpen[i - 1] > inOpen[i - 2]))) {
                            double num69;
                            double num75;
                            if (Globals.candleSettings[8].avgPeriod != 0.0) {
                                num75 = NearPeriodTotal[2] / ((double)Globals.candleSettings[8].avgPeriod);
                            }
                            else {
                                double num74;
                                if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                                    num74 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                                }
                                else {
                                    double num73;
                                    if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                                        num73 = inHigh[i - 2] - inLow[i - 2];
                                    }
                                    else {
                                        double num70;
                                        if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                                            double num71;
                                            double num72;
                                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                                num72 = inClose[i - 2];
                                            }
                                            else {
                                                num72 = inOpen[i - 2];
                                            }
                                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                                num71 = inOpen[i - 2];
                                            }
                                            else {
                                                num71 = inClose[i - 2];
                                            }
                                            num70 = (inHigh[i - 2] - num72) + (num71 - inLow[i - 2]);
                                        }
                                        else {
                                            num70 = 0.0;
                                        }
                                        num73 = num70;
                                    }
                                    num74 = num73;
                                }
                                num75 = num74;
                            }
                            if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                                num69 = 2.0;
                            }
                            else {
                                num69 = 1.0;
                            }
                            if ((inOpen[i - 1] <= (inClose[i - 2] + ((Globals.candleSettings[8].factor * num75) / num69))) && (inOpen[i] > inOpen[i - 1])) {
                                double num62;
                                double num68;
                                if (Globals.candleSettings[8].avgPeriod != 0.0) {
                                    num68 = NearPeriodTotal[1] / ((double)Globals.candleSettings[8].avgPeriod);
                                }
                                else {
                                    double num67;
                                    if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                                        num67 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                                    }
                                    else {
                                        double num66;
                                        if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                                            num66 = inHigh[i - 1] - inLow[i - 1];
                                        }
                                        else {
                                            double num63;
                                            if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                                                double num64;
                                                double num65;
                                                if (inClose[i - 1] >= inOpen[i - 1]) {
                                                    num65 = inClose[i - 1];
                                                }
                                                else {
                                                    num65 = inOpen[i - 1];
                                                }
                                                if (inClose[i - 1] >= inOpen[i - 1]) {
                                                    num64 = inOpen[i - 1];
                                                }
                                                else {
                                                    num64 = inClose[i - 1];
                                                }
                                                num63 = (inHigh[i - 1] - num65) + (num64 - inLow[i - 1]);
                                            }
                                            else {
                                                num63 = 0.0;
                                            }
                                            num66 = num63;
                                        }
                                        num67 = num66;
                                    }
                                    num68 = num67;
                                }
                                if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                                    num62 = 2.0;
                                }
                                else {
                                    num62 = 1.0;
                                }
                                if (inOpen[i] <= (inClose[i - 1] + ((Globals.candleSettings[8].factor * num68) / num62))) {
                                    double num55;
                                    double num61;
                                    if (Globals.candleSettings[9].avgPeriod != 0.0) {
                                        num61 = FarPeriodTotal[2] / ((double)Globals.candleSettings[9].avgPeriod);
                                    }
                                    else {
                                        double num60;
                                        if (Globals.candleSettings[9].rangeType == RangeType.RealBody) {
                                            num60 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                                        }
                                        else {
                                            double num59;
                                            if (Globals.candleSettings[9].rangeType == RangeType.HighLow) {
                                                num59 = inHigh[i - 2] - inLow[i - 2];
                                            }
                                            else {
                                                double num56;
                                                if (Globals.candleSettings[9].rangeType == RangeType.Shadows) {
                                                    double num57;
                                                    double num58;
                                                    if (inClose[i - 2] >= inOpen[i - 2]) {
                                                        num58 = inClose[i - 2];
                                                    }
                                                    else {
                                                        num58 = inOpen[i - 2];
                                                    }
                                                    if (inClose[i - 2] >= inOpen[i - 2]) {
                                                        num57 = inOpen[i - 2];
                                                    }
                                                    else {
                                                        num57 = inClose[i - 2];
                                                    }
                                                    num56 = (inHigh[i - 2] - num58) + (num57 - inLow[i - 2]);
                                                }
                                                else {
                                                    num56 = 0.0;
                                                }
                                                num59 = num56;
                                            }
                                            num60 = num59;
                                        }
                                        num61 = num60;
                                    }
                                    if (Globals.candleSettings[9].rangeType == RangeType.Shadows) {
                                        num55 = 2.0;
                                    }
                                    else {
                                        num55 = 1.0;
                                    }
                                    if (Math.Abs((double)(inClose[i - 1] - inOpen[i - 1])) > (Math.Abs((double)(inClose[i - 2] - inOpen[i - 2])) - ((Globals.candleSettings[9].factor * num61) / num55))) {
                                        double num48;
                                        double num54;
                                        if (Globals.candleSettings[9].avgPeriod != 0.0) {
                                            num54 = FarPeriodTotal[1] / ((double)Globals.candleSettings[9].avgPeriod);
                                        }
                                        else {
                                            double num53;
                                            if (Globals.candleSettings[9].rangeType == RangeType.RealBody) {
                                                num53 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                                            }
                                            else {
                                                double num52;
                                                if (Globals.candleSettings[9].rangeType == RangeType.HighLow) {
                                                    num52 = inHigh[i - 1] - inLow[i - 1];
                                                }
                                                else {
                                                    double num49;
                                                    if (Globals.candleSettings[9].rangeType == RangeType.Shadows) {
                                                        double num50;
                                                        double num51;
                                                        if (inClose[i - 1] >= inOpen[i - 1]) {
                                                            num51 = inClose[i - 1];
                                                        }
                                                        else {
                                                            num51 = inOpen[i - 1];
                                                        }
                                                        if (inClose[i - 1] >= inOpen[i - 1]) {
                                                            num50 = inOpen[i - 1];
                                                        }
                                                        else {
                                                            num50 = inClose[i - 1];
                                                        }
                                                        num49 = (inHigh[i - 1] - num51) + (num50 - inLow[i - 1]);
                                                    }
                                                    else {
                                                        num49 = 0.0;
                                                    }
                                                    num52 = num49;
                                                }
                                                num53 = num52;
                                            }
                                            num54 = num53;
                                        }
                                        if (Globals.candleSettings[9].rangeType == RangeType.Shadows) {
                                            num48 = 2.0;
                                        }
                                        else {
                                            num48 = 1.0;
                                        }
                                        if (Math.Abs((double)(inClose[i] - inOpen[i])) > (Math.Abs((double)(inClose[i - 1] - inOpen[i - 1])) - ((Globals.candleSettings[9].factor * num54) / num48))) {
                                            double num41;
                                            double num47;
                                            if (Globals.candleSettings[2].avgPeriod != 0.0) {
                                                num47 = BodyShortPeriodTotal / ((double)Globals.candleSettings[2].avgPeriod);
                                            }
                                            else {
                                                double num46;
                                                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                                                    num46 = Math.Abs((double)(inClose[i] - inOpen[i]));
                                                }
                                                else {
                                                    double num45;
                                                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                                                        num45 = inHigh[i] - inLow[i];
                                                    }
                                                    else {
                                                        double num42;
                                                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                                                            double num43;
                                                            double num44;
                                                            if (inClose[i] >= inOpen[i]) {
                                                                num44 = inClose[i];
                                                            }
                                                            else {
                                                                num44 = inOpen[i];
                                                            }
                                                            if (inClose[i] >= inOpen[i]) {
                                                                num43 = inOpen[i];
                                                            }
                                                            else {
                                                                num43 = inClose[i];
                                                            }
                                                            num42 = (inHigh[i] - num44) + (num43 - inLow[i]);
                                                        }
                                                        else {
                                                            num42 = 0.0;
                                                        }
                                                        num45 = num42;
                                                    }
                                                    num46 = num45;
                                                }
                                                num47 = num46;
                                            }
                                            if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                                                num41 = 2.0;
                                            }
                                            else {
                                                num41 = 1.0;
                                            }
                                            if (Math.Abs((double)(inClose[i] - inOpen[i])) > ((Globals.candleSettings[2].factor * num47) / num41)) {
                                                outInteger[outIdx] = 100;
                                                outIdx++;
                                                goto Label_1465;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_1465:
            totIdx = 2;
            while (totIdx >= 0) {
                double num35;
                double num40;
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num40 = Math.Abs((double)(inClose[i - totIdx] - inOpen[i - totIdx]));
                }
                else {
                    double num39;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num39 = inHigh[i - totIdx] - inLow[i - totIdx];
                    }
                    else {
                        double num36;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num37;
                            double num38;
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num38 = inClose[i - totIdx];
                            }
                            else {
                                num38 = inOpen[i - totIdx];
                            }
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num37 = inOpen[i - totIdx];
                            }
                            else {
                                num37 = inClose[i - totIdx];
                            }
                            num36 = (inHigh[i - totIdx] - num38) + (num37 - inLow[i - totIdx]);
                        }
                        else {
                            num36 = 0.0;
                        }
                        num39 = num36;
                    }
                    num40 = num39;
                }
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num35 = Math.Abs((double)(inClose[ShadowVeryShortTrailingIdx - totIdx] - inOpen[ShadowVeryShortTrailingIdx - totIdx]));
                }
                else {
                    double num34;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num34 = inHigh[ShadowVeryShortTrailingIdx - totIdx] - inLow[ShadowVeryShortTrailingIdx - totIdx];
                    }
                    else {
                        double num31;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num32;
                            double num33;
                            if (inClose[ShadowVeryShortTrailingIdx - totIdx] >= inOpen[ShadowVeryShortTrailingIdx - totIdx]) {
                                num33 = inClose[ShadowVeryShortTrailingIdx - totIdx];
                            }
                            else {
                                num33 = inOpen[ShadowVeryShortTrailingIdx - totIdx];
                            }
                            if (inClose[ShadowVeryShortTrailingIdx - totIdx] >= inOpen[ShadowVeryShortTrailingIdx - totIdx]) {
                                num32 = inOpen[ShadowVeryShortTrailingIdx - totIdx];
                            }
                            else {
                                num32 = inClose[ShadowVeryShortTrailingIdx - totIdx];
                            }
                            num31 = (inHigh[ShadowVeryShortTrailingIdx - totIdx] - num33) + (num32 - inLow[ShadowVeryShortTrailingIdx - totIdx]);
                        }
                        else {
                            num31 = 0.0;
                        }
                        num34 = num31;
                    }
                    num35 = num34;
                }
                ShadowVeryShortPeriodTotal[totIdx] += num40 - num35;
                totIdx--;
            }
            for (totIdx = 2; totIdx >= 1; totIdx--) {
                double num15;
                double num20;
                double num25;
                double num30;
                if (Globals.candleSettings[9].rangeType == RangeType.RealBody) {
                    num30 = Math.Abs((double)(inClose[i - totIdx] - inOpen[i - totIdx]));
                }
                else {
                    double num29;
                    if (Globals.candleSettings[9].rangeType == RangeType.HighLow) {
                        num29 = inHigh[i - totIdx] - inLow[i - totIdx];
                    }
                    else {
                        double num26;
                        if (Globals.candleSettings[9].rangeType == RangeType.Shadows) {
                            double num27;
                            double num28;
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num28 = inClose[i - totIdx];
                            }
                            else {
                                num28 = inOpen[i - totIdx];
                            }
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num27 = inOpen[i - totIdx];
                            }
                            else {
                                num27 = inClose[i - totIdx];
                            }
                            num26 = (inHigh[i - totIdx] - num28) + (num27 - inLow[i - totIdx]);
                        }
                        else {
                            num26 = 0.0;
                        }
                        num29 = num26;
                    }
                    num30 = num29;
                }
                if (Globals.candleSettings[9].rangeType == RangeType.RealBody) {
                    num25 = Math.Abs((double)(inClose[FarTrailingIdx - totIdx] - inOpen[FarTrailingIdx - totIdx]));
                }
                else {
                    double num24;
                    if (Globals.candleSettings[9].rangeType == RangeType.HighLow) {
                        num24 = inHigh[FarTrailingIdx - totIdx] - inLow[FarTrailingIdx - totIdx];
                    }
                    else {
                        double num21;
                        if (Globals.candleSettings[9].rangeType == RangeType.Shadows) {
                            double num22;
                            double num23;
                            if (inClose[FarTrailingIdx - totIdx] >= inOpen[FarTrailingIdx - totIdx]) {
                                num23 = inClose[FarTrailingIdx - totIdx];
                            }
                            else {
                                num23 = inOpen[FarTrailingIdx - totIdx];
                            }
                            if (inClose[FarTrailingIdx - totIdx] >= inOpen[FarTrailingIdx - totIdx]) {
                                num22 = inOpen[FarTrailingIdx - totIdx];
                            }
                            else {
                                num22 = inClose[FarTrailingIdx - totIdx];
                            }
                            num21 = (inHigh[FarTrailingIdx - totIdx] - num23) + (num22 - inLow[FarTrailingIdx - totIdx]);
                        }
                        else {
                            num21 = 0.0;
                        }
                        num24 = num21;
                    }
                    num25 = num24;
                }
                FarPeriodTotal[totIdx] += num30 - num25;
                if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                    num20 = Math.Abs((double)(inClose[i - totIdx] - inOpen[i - totIdx]));
                }
                else {
                    double num19;
                    if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                        num19 = inHigh[i - totIdx] - inLow[i - totIdx];
                    }
                    else {
                        double num16;
                        if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                            double num17;
                            double num18;
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num18 = inClose[i - totIdx];
                            }
                            else {
                                num18 = inOpen[i - totIdx];
                            }
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num17 = inOpen[i - totIdx];
                            }
                            else {
                                num17 = inClose[i - totIdx];
                            }
                            num16 = (inHigh[i - totIdx] - num18) + (num17 - inLow[i - totIdx]);
                        }
                        else {
                            num16 = 0.0;
                        }
                        num19 = num16;
                    }
                    num20 = num19;
                }
                if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                    num15 = Math.Abs((double)(inClose[NearTrailingIdx - totIdx] - inOpen[NearTrailingIdx - totIdx]));
                }
                else {
                    double num14;
                    if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                        num14 = inHigh[NearTrailingIdx - totIdx] - inLow[NearTrailingIdx - totIdx];
                    }
                    else {
                        double num11;
                        if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                            double num12;
                            double num13;
                            if (inClose[NearTrailingIdx - totIdx] >= inOpen[NearTrailingIdx - totIdx]) {
                                num13 = inClose[NearTrailingIdx - totIdx];
                            }
                            else {
                                num13 = inOpen[NearTrailingIdx - totIdx];
                            }
                            if (inClose[NearTrailingIdx - totIdx] >= inOpen[NearTrailingIdx - totIdx]) {
                                num12 = inOpen[NearTrailingIdx - totIdx];
                            }
                            else {
                                num12 = inClose[NearTrailingIdx - totIdx];
                            }
                            num11 = (inHigh[NearTrailingIdx - totIdx] - num13) + (num12 - inLow[NearTrailingIdx - totIdx]);
                        }
                        else {
                            num11 = 0.0;
                        }
                        num14 = num11;
                    }
                    num15 = num14;
                }
                NearPeriodTotal[totIdx] += num20 - num15;
            }
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num9;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i] - inLow[i];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i] >= inOpen[i]) {
                            num8 = inClose[i];
                        }
                        else {
                            num8 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num7 = inOpen[i];
                        }
                        else {
                            num7 = inClose[i];
                        }
                        num6 = (inHigh[i] - num8) + (num7 - inLow[i]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[BodyShortTrailingIdx] - inOpen[BodyShortTrailingIdx]));
            }
            else {
                double num4;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num4 = inHigh[BodyShortTrailingIdx] - inLow[BodyShortTrailingIdx];
                }
                else {
                    double num;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[BodyShortTrailingIdx] >= inOpen[BodyShortTrailingIdx]) {
                            num3 = inClose[BodyShortTrailingIdx];
                        }
                        else {
                            num3 = inOpen[BodyShortTrailingIdx];
                        }
                        if (inClose[BodyShortTrailingIdx] >= inOpen[BodyShortTrailingIdx]) {
                            num2 = inOpen[BodyShortTrailingIdx];
                        }
                        else {
                            num2 = inClose[BodyShortTrailingIdx];
                        }
                        num = (inHigh[BodyShortTrailingIdx] - num3) + (num2 - inLow[BodyShortTrailingIdx]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            BodyShortPeriodTotal += num10 - num5;
            i++;
            ShadowVeryShortTrailingIdx++;
            NearTrailingIdx++;
            FarTrailingIdx++;
            BodyShortTrailingIdx++;
            if (i <= endIdx) {
                goto Label_08A5;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlAbandonedBaby(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,double optInPenetration,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            double num15;
            double num20;
            double num25;
            double num30;
            double num46;
            double num52;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (optInPenetration == -4E+37) {
                optInPenetration = 0.3;
            }
            else if ((optInPenetration < 0.0) || (optInPenetration > 3E+37)) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlAbandonedBabyLookback(optInPenetration);
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double BodyLongPeriodTotal = 0.0;
            double BodyDojiPeriodTotal = 0.0;
            double BodyShortPeriodTotal = 0.0;
            int BodyLongTrailingIdx = (startIdx - 2) - Globals.candleSettings[0].avgPeriod;
            int BodyDojiTrailingIdx = (startIdx - 1) - Globals.candleSettings[3].avgPeriod;
            int BodyShortTrailingIdx = startIdx - Globals.candleSettings[2].avgPeriod;
            int i = BodyLongTrailingIdx;
            while (true) {
                double num67;
                if (i >= (startIdx - 2)) {
                    break;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num67 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num66;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num66 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num63;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num64;
                            double num65;
                            if (inClose[i] >= inOpen[i]) {
                                num65 = inClose[i];
                            }
                            else {
                                num65 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num64 = inOpen[i];
                            }
                            else {
                                num64 = inClose[i];
                            }
                            num63 = (inHigh[i] - num65) + (num64 - inLow[i]);
                        }
                        else {
                            num63 = 0.0;
                        }
                        num66 = num63;
                    }
                    num67 = num66;
                }
                BodyLongPeriodTotal += num67;
                i++;
            }
            i = BodyDojiTrailingIdx;
            while (true) {
                double num62;
                if (i >= (startIdx - 1)) {
                    break;
                }
                if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                    num62 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num61;
                    if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                        num61 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num58;
                        if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                            double num59;
                            double num60;
                            if (inClose[i] >= inOpen[i]) {
                                num60 = inClose[i];
                            }
                            else {
                                num60 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num59 = inOpen[i];
                            }
                            else {
                                num59 = inClose[i];
                            }
                            num58 = (inHigh[i] - num60) + (num59 - inLow[i]);
                        }
                        else {
                            num58 = 0.0;
                        }
                        num61 = num58;
                    }
                    num62 = num61;
                }
                BodyDojiPeriodTotal += num62;
                i++;
            }
            i = BodyShortTrailingIdx;
            while (true) {
                double num57;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                    num57 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num56;
                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                        num56 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num53;
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            double num54;
                            double num55;
                            if (inClose[i] >= inOpen[i]) {
                                num55 = inClose[i];
                            }
                            else {
                                num55 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num54 = inOpen[i];
                            }
                            else {
                                num54 = inClose[i];
                            }
                            num53 = (inHigh[i] - num55) + (num54 - inLow[i]);
                        }
                        else {
                            num53 = 0.0;
                        }
                        num56 = num53;
                    }
                    num57 = num56;
                }
                BodyShortPeriodTotal += num57;
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            Label_035B:
            if (Globals.candleSettings[0].avgPeriod != 0.0) {
                num52 = BodyLongPeriodTotal / ((double)Globals.candleSettings[0].avgPeriod);
            }
            else {
                double num51;
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num51 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                }
                else {
                    double num50;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num50 = inHigh[i - 2] - inLow[i - 2];
                    }
                    else {
                        double num47;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num48;
                            double num49;
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num49 = inClose[i - 2];
                            }
                            else {
                                num49 = inOpen[i - 2];
                            }
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num48 = inOpen[i - 2];
                            }
                            else {
                                num48 = inClose[i - 2];
                            }
                            num47 = (inHigh[i - 2] - num49) + (num48 - inLow[i - 2]);
                        }
                        else {
                            num47 = 0.0;
                        }
                        num50 = num47;
                    }
                    num51 = num50;
                }
                num52 = num51;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                num46 = 2.0;
            }
            else {
                num46 = 1.0;
            }
            if (Math.Abs((double)(inClose[i - 2] - inOpen[i - 2])) > ((Globals.candleSettings[0].factor * num52) / num46)) {
                double num39;
                double num45;
                if (Globals.candleSettings[3].avgPeriod != 0.0) {
                    num45 = BodyDojiPeriodTotal / ((double)Globals.candleSettings[3].avgPeriod);
                }
                else {
                    double num44;
                    if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                        num44 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                    }
                    else {
                        double num43;
                        if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                            num43 = inHigh[i - 1] - inLow[i - 1];
                        }
                        else {
                            double num40;
                            if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                                double num41;
                                double num42;
                                if (inClose[i - 1] >= inOpen[i - 1]) {
                                    num42 = inClose[i - 1];
                                }
                                else {
                                    num42 = inOpen[i - 1];
                                }
                                if (inClose[i - 1] >= inOpen[i - 1]) {
                                    num41 = inOpen[i - 1];
                                }
                                else {
                                    num41 = inClose[i - 1];
                                }
                                num40 = (inHigh[i - 1] - num42) + (num41 - inLow[i - 1]);
                            }
                            else {
                                num40 = 0.0;
                            }
                            num43 = num40;
                        }
                        num44 = num43;
                    }
                    num45 = num44;
                }
                if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                    num39 = 2.0;
                }
                else {
                    num39 = 1.0;
                }
                if (Math.Abs((double)(inClose[i - 1] - inOpen[i - 1])) <= ((Globals.candleSettings[3].factor * num45) / num39)) {
                    double num32;
                    double num38;
                    if (Globals.candleSettings[2].avgPeriod != 0.0) {
                        num38 = BodyShortPeriodTotal / ((double)Globals.candleSettings[2].avgPeriod);
                    }
                    else {
                        double num37;
                        if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                            num37 = Math.Abs((double)(inClose[i] - inOpen[i]));
                        }
                        else {
                            double num36;
                            if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                                num36 = inHigh[i] - inLow[i];
                            }
                            else {
                                double num33;
                                if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                                    double num34;
                                    double num35;
                                    if (inClose[i] >= inOpen[i]) {
                                        num35 = inClose[i];
                                    }
                                    else {
                                        num35 = inOpen[i];
                                    }
                                    if (inClose[i] >= inOpen[i]) {
                                        num34 = inOpen[i];
                                    }
                                    else {
                                        num34 = inClose[i];
                                    }
                                    num33 = (inHigh[i] - num35) + (num34 - inLow[i]);
                                }
                                else {
                                    num33 = 0.0;
                                }
                                num36 = num33;
                            }
                            num37 = num36;
                        }
                        num38 = num37;
                    }
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        num32 = 2.0;
                    }
                    else {
                        num32 = 1.0;
                    }
                    if ((Math.Abs((double)(inClose[i] - inOpen[i])) > ((Globals.candleSettings[2].factor * num38) / num32)) && ((((inClose[i - 2] >= inOpen[i - 2]) && (((inClose[i] < inOpen[i]) ? -1 : 1) == -1)) && (((inClose[i] < (inClose[i - 2] - (Math.Abs((double)(inClose[i - 2] - inOpen[i - 2])) * optInPenetration))) && (inLow[i - 1] > inHigh[i - 2])) && (inHigh[i] < inLow[i - 1]))) || ((((((inClose[i - 2] < inOpen[i - 2]) ? -1 : 1) == -1) && (inClose[i] >= inOpen[i])) && ((inClose[i] > (inClose[i - 2] + (Math.Abs((double)(inClose[i - 2] - inOpen[i - 2])) * optInPenetration))) && (inHigh[i - 1] < inLow[i - 2]))) && (inLow[i] > inHigh[i - 1])))) {
                        int num31;
                        if (inClose[i] >= inOpen[i]) {
                            num31 = 1;
                        }
                        else {
                            num31 = -1;
                        }
                        outInteger[outIdx] = num31 * 100;
                        outIdx++;
                        goto Label_0844;
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_0844:
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num30 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
            }
            else {
                double num29;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num29 = inHigh[i - 2] - inLow[i - 2];
                }
                else {
                    double num26;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num27;
                        double num28;
                        if (inClose[i - 2] >= inOpen[i - 2]) {
                            num28 = inClose[i - 2];
                        }
                        else {
                            num28 = inOpen[i - 2];
                        }
                        if (inClose[i - 2] >= inOpen[i - 2]) {
                            num27 = inOpen[i - 2];
                        }
                        else {
                            num27 = inClose[i - 2];
                        }
                        num26 = (inHigh[i - 2] - num28) + (num27 - inLow[i - 2]);
                    }
                    else {
                        num26 = 0.0;
                    }
                    num29 = num26;
                }
                num30 = num29;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num25 = Math.Abs((double)(inClose[BodyLongTrailingIdx] - inOpen[BodyLongTrailingIdx]));
            }
            else {
                double num24;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num24 = inHigh[BodyLongTrailingIdx] - inLow[BodyLongTrailingIdx];
                }
                else {
                    double num21;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num22;
                        double num23;
                        if (inClose[BodyLongTrailingIdx] >= inOpen[BodyLongTrailingIdx]) {
                            num23 = inClose[BodyLongTrailingIdx];
                        }
                        else {
                            num23 = inOpen[BodyLongTrailingIdx];
                        }
                        if (inClose[BodyLongTrailingIdx] >= inOpen[BodyLongTrailingIdx]) {
                            num22 = inOpen[BodyLongTrailingIdx];
                        }
                        else {
                            num22 = inClose[BodyLongTrailingIdx];
                        }
                        num21 = (inHigh[BodyLongTrailingIdx] - num23) + (num22 - inLow[BodyLongTrailingIdx]);
                    }
                    else {
                        num21 = 0.0;
                    }
                    num24 = num21;
                }
                num25 = num24;
            }
            BodyLongPeriodTotal += num30 - num25;
            if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                num20 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
            }
            else {
                double num19;
                if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                    num19 = inHigh[i - 1] - inLow[i - 1];
                }
                else {
                    double num16;
                    if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                        double num17;
                        double num18;
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num18 = inClose[i - 1];
                        }
                        else {
                            num18 = inOpen[i - 1];
                        }
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num17 = inOpen[i - 1];
                        }
                        else {
                            num17 = inClose[i - 1];
                        }
                        num16 = (inHigh[i - 1] - num18) + (num17 - inLow[i - 1]);
                    }
                    else {
                        num16 = 0.0;
                    }
                    num19 = num16;
                }
                num20 = num19;
            }
            if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                num15 = Math.Abs((double)(inClose[BodyDojiTrailingIdx] - inOpen[BodyDojiTrailingIdx]));
            }
            else {
                double num14;
                if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                    num14 = inHigh[BodyDojiTrailingIdx] - inLow[BodyDojiTrailingIdx];
                }
                else {
                    double num11;
                    if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                        double num12;
                        double num13;
                        if (inClose[BodyDojiTrailingIdx] >= inOpen[BodyDojiTrailingIdx]) {
                            num13 = inClose[BodyDojiTrailingIdx];
                        }
                        else {
                            num13 = inOpen[BodyDojiTrailingIdx];
                        }
                        if (inClose[BodyDojiTrailingIdx] >= inOpen[BodyDojiTrailingIdx]) {
                            num12 = inOpen[BodyDojiTrailingIdx];
                        }
                        else {
                            num12 = inClose[BodyDojiTrailingIdx];
                        }
                        num11 = (inHigh[BodyDojiTrailingIdx] - num13) + (num12 - inLow[BodyDojiTrailingIdx]);
                    }
                    else {
                        num11 = 0.0;
                    }
                    num14 = num11;
                }
                num15 = num14;
            }
            BodyDojiPeriodTotal += num20 - num15;
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num9;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i] - inLow[i];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i] >= inOpen[i]) {
                            num8 = inClose[i];
                        }
                        else {
                            num8 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num7 = inOpen[i];
                        }
                        else {
                            num7 = inClose[i];
                        }
                        num6 = (inHigh[i] - num8) + (num7 - inLow[i]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[BodyShortTrailingIdx] - inOpen[BodyShortTrailingIdx]));
            }
            else {
                double num4;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num4 = inHigh[BodyShortTrailingIdx] - inLow[BodyShortTrailingIdx];
                }
                else {
                    double num;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[BodyShortTrailingIdx] >= inOpen[BodyShortTrailingIdx]) {
                            num3 = inClose[BodyShortTrailingIdx];
                        }
                        else {
                            num3 = inOpen[BodyShortTrailingIdx];
                        }
                        if (inClose[BodyShortTrailingIdx] >= inOpen[BodyShortTrailingIdx]) {
                            num2 = inOpen[BodyShortTrailingIdx];
                        }
                        else {
                            num2 = inClose[BodyShortTrailingIdx];
                        }
                        num = (inHigh[BodyShortTrailingIdx] - num3) + (num2 - inLow[BodyShortTrailingIdx]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            BodyShortPeriodTotal += num10 - num5;
            i++;
            BodyLongTrailingIdx++;
            BodyDojiTrailingIdx++;
            BodyShortTrailingIdx++;
            if (i <= endIdx) {
                goto Label_035B;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlAdvanceBlock(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            int totIdx;
            double num5;
            double num10;
            double num75;
            double num81;
            double num89;
            double num95;
            double num96;
            double num102;
            double num103;
            double num104;
            double num110;
            double num111;
            double num117;
            double num118;
            double num124;
            double[] ShadowShortPeriodTotal = new double[3];
            double[] ShadowLongPeriodTotal = new double[2];
            double[] NearPeriodTotal = new double[3];
            double[] FarPeriodTotal = new double[3];
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlAdvanceBlockLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            ShadowShortPeriodTotal[2] = 0.0;
            ShadowShortPeriodTotal[1] = 0.0;
            ShadowShortPeriodTotal[0] = 0.0;
            int ShadowShortTrailingIdx = startIdx - Globals.candleSettings[6].avgPeriod;
            ShadowLongPeriodTotal[1] = 0.0;
            ShadowLongPeriodTotal[0] = 0.0;
            int ShadowLongTrailingIdx = startIdx - Globals.candleSettings[4].avgPeriod;
            NearPeriodTotal[2] = 0.0;
            NearPeriodTotal[1] = 0.0;
            NearPeriodTotal[0] = 0.0;
            int NearTrailingIdx = startIdx - Globals.candleSettings[8].avgPeriod;
            FarPeriodTotal[2] = 0.0;
            FarPeriodTotal[1] = 0.0;
            FarPeriodTotal[0] = 0.0;
            int FarTrailingIdx = startIdx - Globals.candleSettings[9].avgPeriod;
            double BodyLongPeriodTotal = 0.0;
            int BodyLongTrailingIdx = startIdx - Globals.candleSettings[0].avgPeriod;
            int i = ShadowShortTrailingIdx;
            while (true) {
                double num164;
                double num169;
                double num174;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[6].rangeType == RangeType.RealBody) {
                    num174 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                }
                else {
                    double num173;
                    if (Globals.candleSettings[6].rangeType == RangeType.HighLow) {
                        num173 = inHigh[i - 2] - inLow[i - 2];
                    }
                    else {
                        double num170;
                        if (Globals.candleSettings[6].rangeType == RangeType.Shadows) {
                            double num171;
                            double num172;
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num172 = inClose[i - 2];
                            }
                            else {
                                num172 = inOpen[i - 2];
                            }
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num171 = inOpen[i - 2];
                            }
                            else {
                                num171 = inClose[i - 2];
                            }
                            num170 = (inHigh[i - 2] - num172) + (num171 - inLow[i - 2]);
                        }
                        else {
                            num170 = 0.0;
                        }
                        num173 = num170;
                    }
                    num174 = num173;
                }
                ShadowShortPeriodTotal[2] += num174;
                if (Globals.candleSettings[6].rangeType == RangeType.RealBody) {
                    num169 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num168;
                    if (Globals.candleSettings[6].rangeType == RangeType.HighLow) {
                        num168 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num165;
                        if (Globals.candleSettings[6].rangeType == RangeType.Shadows) {
                            double num166;
                            double num167;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num167 = inClose[i - 1];
                            }
                            else {
                                num167 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num166 = inOpen[i - 1];
                            }
                            else {
                                num166 = inClose[i - 1];
                            }
                            num165 = (inHigh[i - 1] - num167) + (num166 - inLow[i - 1]);
                        }
                        else {
                            num165 = 0.0;
                        }
                        num168 = num165;
                    }
                    num169 = num168;
                }
                ShadowShortPeriodTotal[1] += num169;
                if (Globals.candleSettings[6].rangeType == RangeType.RealBody) {
                    num164 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num163;
                    if (Globals.candleSettings[6].rangeType == RangeType.HighLow) {
                        num163 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num160;
                        if (Globals.candleSettings[6].rangeType == RangeType.Shadows) {
                            double num161;
                            double num162;
                            if (inClose[i] >= inOpen[i]) {
                                num162 = inClose[i];
                            }
                            else {
                                num162 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num161 = inOpen[i];
                            }
                            else {
                                num161 = inClose[i];
                            }
                            num160 = (inHigh[i] - num162) + (num161 - inLow[i]);
                        }
                        else {
                            num160 = 0.0;
                        }
                        num163 = num160;
                    }
                    num164 = num163;
                }
                ShadowShortPeriodTotal[0] += num164;
                i++;
            }
            i = ShadowLongTrailingIdx;
            while (true) {
                double num154;
                double num159;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[4].rangeType == RangeType.RealBody) {
                    num159 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num158;
                    if (Globals.candleSettings[4].rangeType == RangeType.HighLow) {
                        num158 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num155;
                        if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                            double num156;
                            double num157;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num157 = inClose[i - 1];
                            }
                            else {
                                num157 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num156 = inOpen[i - 1];
                            }
                            else {
                                num156 = inClose[i - 1];
                            }
                            num155 = (inHigh[i - 1] - num157) + (num156 - inLow[i - 1]);
                        }
                        else {
                            num155 = 0.0;
                        }
                        num158 = num155;
                    }
                    num159 = num158;
                }
                ShadowLongPeriodTotal[1] += num159;
                if (Globals.candleSettings[4].rangeType == RangeType.RealBody) {
                    num154 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num153;
                    if (Globals.candleSettings[4].rangeType == RangeType.HighLow) {
                        num153 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num150;
                        if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                            double num151;
                            double num152;
                            if (inClose[i] >= inOpen[i]) {
                                num152 = inClose[i];
                            }
                            else {
                                num152 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num151 = inOpen[i];
                            }
                            else {
                                num151 = inClose[i];
                            }
                            num150 = (inHigh[i] - num152) + (num151 - inLow[i]);
                        }
                        else {
                            num150 = 0.0;
                        }
                        num153 = num150;
                    }
                    num154 = num153;
                }
                ShadowLongPeriodTotal[0] += num154;
                i++;
            }
            i = NearTrailingIdx;
            while (true) {
                double num144;
                double num149;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                    num149 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                }
                else {
                    double num148;
                    if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                        num148 = inHigh[i - 2] - inLow[i - 2];
                    }
                    else {
                        double num145;
                        if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                            double num146;
                            double num147;
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num147 = inClose[i - 2];
                            }
                            else {
                                num147 = inOpen[i - 2];
                            }
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num146 = inOpen[i - 2];
                            }
                            else {
                                num146 = inClose[i - 2];
                            }
                            num145 = (inHigh[i - 2] - num147) + (num146 - inLow[i - 2]);
                        }
                        else {
                            num145 = 0.0;
                        }
                        num148 = num145;
                    }
                    num149 = num148;
                }
                NearPeriodTotal[2] += num149;
                if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                    num144 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num143;
                    if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                        num143 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num140;
                        if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                            double num141;
                            double num142;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num142 = inClose[i - 1];
                            }
                            else {
                                num142 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num141 = inOpen[i - 1];
                            }
                            else {
                                num141 = inClose[i - 1];
                            }
                            num140 = (inHigh[i - 1] - num142) + (num141 - inLow[i - 1]);
                        }
                        else {
                            num140 = 0.0;
                        }
                        num143 = num140;
                    }
                    num144 = num143;
                }
                NearPeriodTotal[1] += num144;
                i++;
            }
            i = FarTrailingIdx;
            while (true) {
                double num134;
                double num139;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[9].rangeType == RangeType.RealBody) {
                    num139 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                }
                else {
                    double num138;
                    if (Globals.candleSettings[9].rangeType == RangeType.HighLow) {
                        num138 = inHigh[i - 2] - inLow[i - 2];
                    }
                    else {
                        double num135;
                        if (Globals.candleSettings[9].rangeType == RangeType.Shadows) {
                            double num136;
                            double num137;
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num137 = inClose[i - 2];
                            }
                            else {
                                num137 = inOpen[i - 2];
                            }
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num136 = inOpen[i - 2];
                            }
                            else {
                                num136 = inClose[i - 2];
                            }
                            num135 = (inHigh[i - 2] - num137) + (num136 - inLow[i - 2]);
                        }
                        else {
                            num135 = 0.0;
                        }
                        num138 = num135;
                    }
                    num139 = num138;
                }
                FarPeriodTotal[2] += num139;
                if (Globals.candleSettings[9].rangeType == RangeType.RealBody) {
                    num134 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num133;
                    if (Globals.candleSettings[9].rangeType == RangeType.HighLow) {
                        num133 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num130;
                        if (Globals.candleSettings[9].rangeType == RangeType.Shadows) {
                            double num131;
                            double num132;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num132 = inClose[i - 1];
                            }
                            else {
                                num132 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num131 = inOpen[i - 1];
                            }
                            else {
                                num131 = inClose[i - 1];
                            }
                            num130 = (inHigh[i - 1] - num132) + (num131 - inLow[i - 1]);
                        }
                        else {
                            num130 = 0.0;
                        }
                        num133 = num130;
                    }
                    num134 = num133;
                }
                FarPeriodTotal[1] += num134;
                i++;
            }
            i = BodyLongTrailingIdx;
            while (true) {
                double num129;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num129 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                }
                else {
                    double num128;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num128 = inHigh[i - 2] - inLow[i - 2];
                    }
                    else {
                        double num125;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num126;
                            double num127;
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num127 = inClose[i - 2];
                            }
                            else {
                                num127 = inOpen[i - 2];
                            }
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num126 = inOpen[i - 2];
                            }
                            else {
                                num126 = inClose[i - 2];
                            }
                            num125 = (inHigh[i - 2] - num127) + (num126 - inLow[i - 2]);
                        }
                        else {
                            num125 = 0.0;
                        }
                        num128 = num125;
                    }
                    num129 = num128;
                }
                BodyLongPeriodTotal += num129;
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            Label_0B40:
            if (((((inClose[i - 2] < inOpen[i - 2]) || (inClose[i - 1] < inOpen[i - 1])) || (inClose[i] < inOpen[i])) || ((inClose[i] <= inClose[i - 1]) || (inClose[i - 1] <= inClose[i - 2]))) || (inOpen[i - 1] <= inOpen[i - 2])) {
                goto Label_1A80;
            }
            if (Globals.candleSettings[8].avgPeriod != 0.0) {
                num124 = NearPeriodTotal[2] / ((double)Globals.candleSettings[8].avgPeriod);
            }
            else {
                double num123;
                if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                    num123 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                }
                else {
                    double num122;
                    if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                        num122 = inHigh[i - 2] - inLow[i - 2];
                    }
                    else {
                        double num119;
                        if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                            double num120;
                            double num121;
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num121 = inClose[i - 2];
                            }
                            else {
                                num121 = inOpen[i - 2];
                            }
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num120 = inOpen[i - 2];
                            }
                            else {
                                num120 = inClose[i - 2];
                            }
                            num119 = (inHigh[i - 2] - num121) + (num120 - inLow[i - 2]);
                        }
                        else {
                            num119 = 0.0;
                        }
                        num122 = num119;
                    }
                    num123 = num122;
                }
                num124 = num123;
            }
            if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                num118 = 2.0;
            }
            else {
                num118 = 1.0;
            }
            if ((inOpen[i - 1] > (inClose[i - 2] + ((Globals.candleSettings[8].factor * num124) / num118))) || (inOpen[i] <= inOpen[i - 1])) {
                goto Label_1A80;
            }
            if (Globals.candleSettings[8].avgPeriod != 0.0) {
                num117 = NearPeriodTotal[1] / ((double)Globals.candleSettings[8].avgPeriod);
            }
            else {
                double num116;
                if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                    num116 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num115;
                    if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                        num115 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num112;
                        if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                            double num113;
                            double num114;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num114 = inClose[i - 1];
                            }
                            else {
                                num114 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num113 = inOpen[i - 1];
                            }
                            else {
                                num113 = inClose[i - 1];
                            }
                            num112 = (inHigh[i - 1] - num114) + (num113 - inLow[i - 1]);
                        }
                        else {
                            num112 = 0.0;
                        }
                        num115 = num112;
                    }
                    num116 = num115;
                }
                num117 = num116;
            }
            if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                num111 = 2.0;
            }
            else {
                num111 = 1.0;
            }
            if (inOpen[i] > (inClose[i - 1] + ((Globals.candleSettings[8].factor * num117) / num111))) {
                goto Label_1A80;
            }
            if (Globals.candleSettings[0].avgPeriod != 0.0) {
                num110 = BodyLongPeriodTotal / ((double)Globals.candleSettings[0].avgPeriod);
            }
            else {
                double num109;
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num109 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                }
                else {
                    double num108;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num108 = inHigh[i - 2] - inLow[i - 2];
                    }
                    else {
                        double num105;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num106;
                            double num107;
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num107 = inClose[i - 2];
                            }
                            else {
                                num107 = inOpen[i - 2];
                            }
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num106 = inOpen[i - 2];
                            }
                            else {
                                num106 = inClose[i - 2];
                            }
                            num105 = (inHigh[i - 2] - num107) + (num106 - inLow[i - 2]);
                        }
                        else {
                            num105 = 0.0;
                        }
                        num108 = num105;
                    }
                    num109 = num108;
                }
                num110 = num109;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                num104 = 2.0;
            }
            else {
                num104 = 1.0;
            }
            if (Math.Abs((double)(inClose[i - 2] - inOpen[i - 2])) <= ((Globals.candleSettings[0].factor * num110) / num104)) {
                goto Label_1A80;
            }
            if (inClose[i - 2] >= inOpen[i - 2]) {
                num103 = inClose[i - 2];
            }
            else {
                num103 = inOpen[i - 2];
            }
            if (Globals.candleSettings[6].avgPeriod != 0.0) {
                num102 = ShadowShortPeriodTotal[2] / ((double)Globals.candleSettings[6].avgPeriod);
            }
            else {
                double num101;
                if (Globals.candleSettings[6].rangeType == RangeType.RealBody) {
                    num101 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                }
                else {
                    double num100;
                    if (Globals.candleSettings[6].rangeType == RangeType.HighLow) {
                        num100 = inHigh[i - 2] - inLow[i - 2];
                    }
                    else {
                        double num97;
                        if (Globals.candleSettings[6].rangeType == RangeType.Shadows) {
                            double num98;
                            double num99;
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num99 = inClose[i - 2];
                            }
                            else {
                                num99 = inOpen[i - 2];
                            }
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num98 = inOpen[i - 2];
                            }
                            else {
                                num98 = inClose[i - 2];
                            }
                            num97 = (inHigh[i - 2] - num99) + (num98 - inLow[i - 2]);
                        }
                        else {
                            num97 = 0.0;
                        }
                        num100 = num97;
                    }
                    num101 = num100;
                }
                num102 = num101;
            }
            if (Globals.candleSettings[6].rangeType == RangeType.Shadows) {
                num96 = 2.0;
            }
            else {
                num96 = 1.0;
            }
            if ((inHigh[i - 2] - num103) >= ((Globals.candleSettings[6].factor * num102) / num96)) {
                goto Label_1A80;
            }
            if (Globals.candleSettings[9].avgPeriod != 0.0) {
                num95 = FarPeriodTotal[2] / ((double)Globals.candleSettings[9].avgPeriod);
            }
            else {
                double num94;
                if (Globals.candleSettings[9].rangeType == RangeType.RealBody) {
                    num94 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                }
                else {
                    double num93;
                    if (Globals.candleSettings[9].rangeType == RangeType.HighLow) {
                        num93 = inHigh[i - 2] - inLow[i - 2];
                    }
                    else {
                        double num90;
                        if (Globals.candleSettings[9].rangeType == RangeType.Shadows) {
                            double num91;
                            double num92;
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num92 = inClose[i - 2];
                            }
                            else {
                                num92 = inOpen[i - 2];
                            }
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num91 = inOpen[i - 2];
                            }
                            else {
                                num91 = inClose[i - 2];
                            }
                            num90 = (inHigh[i - 2] - num92) + (num91 - inLow[i - 2]);
                        }
                        else {
                            num90 = 0.0;
                        }
                        num93 = num90;
                    }
                    num94 = num93;
                }
                num95 = num94;
            }
            if (Globals.candleSettings[9].rangeType == RangeType.Shadows) {
                num89 = 2.0;
            }
            else {
                num89 = 1.0;
            }
            if (Math.Abs((double)(inClose[i - 1] - inOpen[i - 1])) < (Math.Abs((double)(inClose[i - 2] - inOpen[i - 2])) - ((Globals.candleSettings[9].factor * num95) / num89))) {
                double num82;
                double num88;
                if (Globals.candleSettings[8].avgPeriod != 0.0) {
                    num88 = NearPeriodTotal[1] / ((double)Globals.candleSettings[8].avgPeriod);
                }
                else {
                    double num87;
                    if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                        num87 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                    }
                    else {
                        double num86;
                        if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                            num86 = inHigh[i - 1] - inLow[i - 1];
                        }
                        else {
                            double num83;
                            if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                                double num84;
                                double num85;
                                if (inClose[i - 1] >= inOpen[i - 1]) {
                                    num85 = inClose[i - 1];
                                }
                                else {
                                    num85 = inOpen[i - 1];
                                }
                                if (inClose[i - 1] >= inOpen[i - 1]) {
                                    num84 = inOpen[i - 1];
                                }
                                else {
                                    num84 = inClose[i - 1];
                                }
                                num83 = (inHigh[i - 1] - num85) + (num84 - inLow[i - 1]);
                            }
                            else {
                                num83 = 0.0;
                            }
                            num86 = num83;
                        }
                        num87 = num86;
                    }
                    num88 = num87;
                }
                if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                    num82 = 2.0;
                }
                else {
                    num82 = 1.0;
                }
                if (Math.Abs((double)(inClose[i] - inOpen[i])) < (Math.Abs((double)(inClose[i - 1] - inOpen[i - 1])) + ((Globals.candleSettings[8].factor * num88) / num82))) {
                    goto Label_1A71;
                }
            }
            if (Globals.candleSettings[9].avgPeriod != 0.0) {
                num81 = FarPeriodTotal[1] / ((double)Globals.candleSettings[9].avgPeriod);
            }
            else {
                double num80;
                if (Globals.candleSettings[9].rangeType == RangeType.RealBody) {
                    num80 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num79;
                    if (Globals.candleSettings[9].rangeType == RangeType.HighLow) {
                        num79 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num76;
                        if (Globals.candleSettings[9].rangeType == RangeType.Shadows) {
                            double num77;
                            double num78;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num78 = inClose[i - 1];
                            }
                            else {
                                num78 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num77 = inOpen[i - 1];
                            }
                            else {
                                num77 = inClose[i - 1];
                            }
                            num76 = (inHigh[i - 1] - num78) + (num77 - inLow[i - 1]);
                        }
                        else {
                            num76 = 0.0;
                        }
                        num79 = num76;
                    }
                    num80 = num79;
                }
                num81 = num80;
            }
            if (Globals.candleSettings[9].rangeType == RangeType.Shadows) {
                num75 = 2.0;
            }
            else {
                num75 = 1.0;
            }
            if (Math.Abs((double)(inClose[i] - inOpen[i])) >= (Math.Abs((double)(inClose[i - 1] - inOpen[i - 1])) - ((Globals.candleSettings[9].factor * num81) / num75))) {
                double num51;
                double num57;
                double num58;
                if ((Math.Abs((double)(inClose[i] - inOpen[i])) < Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]))) && (Math.Abs((double)(inClose[i - 1] - inOpen[i - 1])) < Math.Abs((double)(inClose[i - 2] - inOpen[i - 2])))) {
                    double num59;
                    double num65;
                    double num66;
                    double num67;
                    double num73;
                    double num74;
                    if (inClose[i] >= inOpen[i]) {
                        num74 = inClose[i];
                    }
                    else {
                        num74 = inOpen[i];
                    }
                    if (Globals.candleSettings[6].avgPeriod != 0.0) {
                        num73 = ShadowShortPeriodTotal[0] / ((double)Globals.candleSettings[6].avgPeriod);
                    }
                    else {
                        double num72;
                        if (Globals.candleSettings[6].rangeType == RangeType.RealBody) {
                            num72 = Math.Abs((double)(inClose[i] - inOpen[i]));
                        }
                        else {
                            double num71;
                            if (Globals.candleSettings[6].rangeType == RangeType.HighLow) {
                                num71 = inHigh[i] - inLow[i];
                            }
                            else {
                                double num68;
                                if (Globals.candleSettings[6].rangeType == RangeType.Shadows) {
                                    double num69;
                                    double num70;
                                    if (inClose[i] >= inOpen[i]) {
                                        num70 = inClose[i];
                                    }
                                    else {
                                        num70 = inOpen[i];
                                    }
                                    if (inClose[i] >= inOpen[i]) {
                                        num69 = inOpen[i];
                                    }
                                    else {
                                        num69 = inClose[i];
                                    }
                                    num68 = (inHigh[i] - num70) + (num69 - inLow[i]);
                                }
                                else {
                                    num68 = 0.0;
                                }
                                num71 = num68;
                            }
                            num72 = num71;
                        }
                        num73 = num72;
                    }
                    if (Globals.candleSettings[6].rangeType == RangeType.Shadows) {
                        num67 = 2.0;
                    }
                    else {
                        num67 = 1.0;
                    }
                    if ((inHigh[i] - num74) > ((Globals.candleSettings[6].factor * num73) / num67)) {
                        goto Label_1A71;
                    }
                    if (inClose[i - 1] >= inOpen[i - 1]) {
                        num66 = inClose[i - 1];
                    }
                    else {
                        num66 = inOpen[i - 1];
                    }
                    if (Globals.candleSettings[6].avgPeriod != 0.0) {
                        num65 = ShadowShortPeriodTotal[1] / ((double)Globals.candleSettings[6].avgPeriod);
                    }
                    else {
                        double num64;
                        if (Globals.candleSettings[6].rangeType == RangeType.RealBody) {
                            num64 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                        }
                        else {
                            double num63;
                            if (Globals.candleSettings[6].rangeType == RangeType.HighLow) {
                                num63 = inHigh[i - 1] - inLow[i - 1];
                            }
                            else {
                                double num60;
                                if (Globals.candleSettings[6].rangeType == RangeType.Shadows) {
                                    double num61;
                                    double num62;
                                    if (inClose[i - 1] >= inOpen[i - 1]) {
                                        num62 = inClose[i - 1];
                                    }
                                    else {
                                        num62 = inOpen[i - 1];
                                    }
                                    if (inClose[i - 1] >= inOpen[i - 1]) {
                                        num61 = inOpen[i - 1];
                                    }
                                    else {
                                        num61 = inClose[i - 1];
                                    }
                                    num60 = (inHigh[i - 1] - num62) + (num61 - inLow[i - 1]);
                                }
                                else {
                                    num60 = 0.0;
                                }
                                num63 = num60;
                            }
                            num64 = num63;
                        }
                        num65 = num64;
                    }
                    if (Globals.candleSettings[6].rangeType == RangeType.Shadows) {
                        num59 = 2.0;
                    }
                    else {
                        num59 = 1.0;
                    }
                    if ((inHigh[i - 1] - num66) > ((Globals.candleSettings[6].factor * num65) / num59)) {
                        goto Label_1A71;
                    }
                }
                if (Math.Abs((double)(inClose[i] - inOpen[i])) >= Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]))) {
                    goto Label_1A80;
                }
                if (inClose[i] >= inOpen[i]) {
                    num58 = inClose[i];
                }
                else {
                    num58 = inOpen[i];
                }
                if (Globals.candleSettings[4].avgPeriod != 0.0) {
                    num57 = ShadowLongPeriodTotal[0] / ((double)Globals.candleSettings[4].avgPeriod);
                }
                else {
                    double num56;
                    if (Globals.candleSettings[4].rangeType == RangeType.RealBody) {
                        num56 = Math.Abs((double)(inClose[i] - inOpen[i]));
                    }
                    else {
                        double num55;
                        if (Globals.candleSettings[4].rangeType == RangeType.HighLow) {
                            num55 = inHigh[i] - inLow[i];
                        }
                        else {
                            double num52;
                            if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                                double num53;
                                double num54;
                                if (inClose[i] >= inOpen[i]) {
                                    num54 = inClose[i];
                                }
                                else {
                                    num54 = inOpen[i];
                                }
                                if (inClose[i] >= inOpen[i]) {
                                    num53 = inOpen[i];
                                }
                                else {
                                    num53 = inClose[i];
                                }
                                num52 = (inHigh[i] - num54) + (num53 - inLow[i]);
                            }
                            else {
                                num52 = 0.0;
                            }
                            num55 = num52;
                        }
                        num56 = num55;
                    }
                    num57 = num56;
                }
                if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                    num51 = 2.0;
                }
                else {
                    num51 = 1.0;
                }
                if ((inHigh[i] - num58) <= ((Globals.candleSettings[4].factor * num57) / num51)) {
                    goto Label_1A80;
                }
            }
            Label_1A71:
            outInteger[outIdx] = -100;
            outIdx++;
            goto Label_1A8C;
            Label_1A80:
            outInteger[outIdx] = 0;
            outIdx++;
            Label_1A8C:
            totIdx = 2;
            while (totIdx >= 0) {
                double num45;
                double num50;
                if (Globals.candleSettings[6].rangeType == RangeType.RealBody) {
                    num50 = Math.Abs((double)(inClose[i - totIdx] - inOpen[i - totIdx]));
                }
                else {
                    double num49;
                    if (Globals.candleSettings[6].rangeType == RangeType.HighLow) {
                        num49 = inHigh[i - totIdx] - inLow[i - totIdx];
                    }
                    else {
                        double num46;
                        if (Globals.candleSettings[6].rangeType == RangeType.Shadows) {
                            double num47;
                            double num48;
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num48 = inClose[i - totIdx];
                            }
                            else {
                                num48 = inOpen[i - totIdx];
                            }
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num47 = inOpen[i - totIdx];
                            }
                            else {
                                num47 = inClose[i - totIdx];
                            }
                            num46 = (inHigh[i - totIdx] - num48) + (num47 - inLow[i - totIdx]);
                        }
                        else {
                            num46 = 0.0;
                        }
                        num49 = num46;
                    }
                    num50 = num49;
                }
                if (Globals.candleSettings[6].rangeType == RangeType.RealBody) {
                    num45 = Math.Abs((double)(inClose[ShadowShortTrailingIdx - totIdx] - inOpen[ShadowShortTrailingIdx - totIdx]));
                }
                else {
                    double num44;
                    if (Globals.candleSettings[6].rangeType == RangeType.HighLow) {
                        num44 = inHigh[ShadowShortTrailingIdx - totIdx] - inLow[ShadowShortTrailingIdx - totIdx];
                    }
                    else {
                        double num41;
                        if (Globals.candleSettings[6].rangeType == RangeType.Shadows) {
                            double num42;
                            double num43;
                            if (inClose[ShadowShortTrailingIdx - totIdx] >= inOpen[ShadowShortTrailingIdx - totIdx]) {
                                num43 = inClose[ShadowShortTrailingIdx - totIdx];
                            }
                            else {
                                num43 = inOpen[ShadowShortTrailingIdx - totIdx];
                            }
                            if (inClose[ShadowShortTrailingIdx - totIdx] >= inOpen[ShadowShortTrailingIdx - totIdx]) {
                                num42 = inOpen[ShadowShortTrailingIdx - totIdx];
                            }
                            else {
                                num42 = inClose[ShadowShortTrailingIdx - totIdx];
                            }
                            num41 = (inHigh[ShadowShortTrailingIdx - totIdx] - num43) + (num42 - inLow[ShadowShortTrailingIdx - totIdx]);
                        }
                        else {
                            num41 = 0.0;
                        }
                        num44 = num41;
                    }
                    num45 = num44;
                }
                ShadowShortPeriodTotal[totIdx] += num50 - num45;
                totIdx--;
            }
            for (totIdx = 1; totIdx >= 0; totIdx--) {
                double num35;
                double num40;
                if (Globals.candleSettings[4].rangeType == RangeType.RealBody) {
                    num40 = Math.Abs((double)(inClose[i - totIdx] - inOpen[i - totIdx]));
                }
                else {
                    double num39;
                    if (Globals.candleSettings[4].rangeType == RangeType.HighLow) {
                        num39 = inHigh[i - totIdx] - inLow[i - totIdx];
                    }
                    else {
                        double num36;
                        if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                            double num37;
                            double num38;
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num38 = inClose[i - totIdx];
                            }
                            else {
                                num38 = inOpen[i - totIdx];
                            }
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num37 = inOpen[i - totIdx];
                            }
                            else {
                                num37 = inClose[i - totIdx];
                            }
                            num36 = (inHigh[i - totIdx] - num38) + (num37 - inLow[i - totIdx]);
                        }
                        else {
                            num36 = 0.0;
                        }
                        num39 = num36;
                    }
                    num40 = num39;
                }
                if (Globals.candleSettings[4].rangeType == RangeType.RealBody) {
                    num35 = Math.Abs((double)(inClose[ShadowLongTrailingIdx - totIdx] - inOpen[ShadowLongTrailingIdx - totIdx]));
                }
                else {
                    double num34;
                    if (Globals.candleSettings[4].rangeType == RangeType.HighLow) {
                        num34 = inHigh[ShadowLongTrailingIdx - totIdx] - inLow[ShadowLongTrailingIdx - totIdx];
                    }
                    else {
                        double num31;
                        if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                            double num32;
                            double num33;
                            if (inClose[ShadowLongTrailingIdx - totIdx] >= inOpen[ShadowLongTrailingIdx - totIdx]) {
                                num33 = inClose[ShadowLongTrailingIdx - totIdx];
                            }
                            else {
                                num33 = inOpen[ShadowLongTrailingIdx - totIdx];
                            }
                            if (inClose[ShadowLongTrailingIdx - totIdx] >= inOpen[ShadowLongTrailingIdx - totIdx]) {
                                num32 = inOpen[ShadowLongTrailingIdx - totIdx];
                            }
                            else {
                                num32 = inClose[ShadowLongTrailingIdx - totIdx];
                            }
                            num31 = (inHigh[ShadowLongTrailingIdx - totIdx] - num33) + (num32 - inLow[ShadowLongTrailingIdx - totIdx]);
                        }
                        else {
                            num31 = 0.0;
                        }
                        num34 = num31;
                    }
                    num35 = num34;
                }
                ShadowLongPeriodTotal[totIdx] += num40 - num35;
            }
            for (totIdx = 2; totIdx >= 1; totIdx--) {
                double num15;
                double num20;
                double num25;
                double num30;
                if (Globals.candleSettings[9].rangeType == RangeType.RealBody) {
                    num30 = Math.Abs((double)(inClose[i - totIdx] - inOpen[i - totIdx]));
                }
                else {
                    double num29;
                    if (Globals.candleSettings[9].rangeType == RangeType.HighLow) {
                        num29 = inHigh[i - totIdx] - inLow[i - totIdx];
                    }
                    else {
                        double num26;
                        if (Globals.candleSettings[9].rangeType == RangeType.Shadows) {
                            double num27;
                            double num28;
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num28 = inClose[i - totIdx];
                            }
                            else {
                                num28 = inOpen[i - totIdx];
                            }
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num27 = inOpen[i - totIdx];
                            }
                            else {
                                num27 = inClose[i - totIdx];
                            }
                            num26 = (inHigh[i - totIdx] - num28) + (num27 - inLow[i - totIdx]);
                        }
                        else {
                            num26 = 0.0;
                        }
                        num29 = num26;
                    }
                    num30 = num29;
                }
                if (Globals.candleSettings[9].rangeType == RangeType.RealBody) {
                    num25 = Math.Abs((double)(inClose[FarTrailingIdx - totIdx] - inOpen[FarTrailingIdx - totIdx]));
                }
                else {
                    double num24;
                    if (Globals.candleSettings[9].rangeType == RangeType.HighLow) {
                        num24 = inHigh[FarTrailingIdx - totIdx] - inLow[FarTrailingIdx - totIdx];
                    }
                    else {
                        double num21;
                        if (Globals.candleSettings[9].rangeType == RangeType.Shadows) {
                            double num22;
                            double num23;
                            if (inClose[FarTrailingIdx - totIdx] >= inOpen[FarTrailingIdx - totIdx]) {
                                num23 = inClose[FarTrailingIdx - totIdx];
                            }
                            else {
                                num23 = inOpen[FarTrailingIdx - totIdx];
                            }
                            if (inClose[FarTrailingIdx - totIdx] >= inOpen[FarTrailingIdx - totIdx]) {
                                num22 = inOpen[FarTrailingIdx - totIdx];
                            }
                            else {
                                num22 = inClose[FarTrailingIdx - totIdx];
                            }
                            num21 = (inHigh[FarTrailingIdx - totIdx] - num23) + (num22 - inLow[FarTrailingIdx - totIdx]);
                        }
                        else {
                            num21 = 0.0;
                        }
                        num24 = num21;
                    }
                    num25 = num24;
                }
                FarPeriodTotal[totIdx] += num30 - num25;
                if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                    num20 = Math.Abs((double)(inClose[i - totIdx] - inOpen[i - totIdx]));
                }
                else {
                    double num19;
                    if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                        num19 = inHigh[i - totIdx] - inLow[i - totIdx];
                    }
                    else {
                        double num16;
                        if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                            double num17;
                            double num18;
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num18 = inClose[i - totIdx];
                            }
                            else {
                                num18 = inOpen[i - totIdx];
                            }
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num17 = inOpen[i - totIdx];
                            }
                            else {
                                num17 = inClose[i - totIdx];
                            }
                            num16 = (inHigh[i - totIdx] - num18) + (num17 - inLow[i - totIdx]);
                        }
                        else {
                            num16 = 0.0;
                        }
                        num19 = num16;
                    }
                    num20 = num19;
                }
                if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                    num15 = Math.Abs((double)(inClose[NearTrailingIdx - totIdx] - inOpen[NearTrailingIdx - totIdx]));
                }
                else {
                    double num14;
                    if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                        num14 = inHigh[NearTrailingIdx - totIdx] - inLow[NearTrailingIdx - totIdx];
                    }
                    else {
                        double num11;
                        if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                            double num12;
                            double num13;
                            if (inClose[NearTrailingIdx - totIdx] >= inOpen[NearTrailingIdx - totIdx]) {
                                num13 = inClose[NearTrailingIdx - totIdx];
                            }
                            else {
                                num13 = inOpen[NearTrailingIdx - totIdx];
                            }
                            if (inClose[NearTrailingIdx - totIdx] >= inOpen[NearTrailingIdx - totIdx]) {
                                num12 = inOpen[NearTrailingIdx - totIdx];
                            }
                            else {
                                num12 = inClose[NearTrailingIdx - totIdx];
                            }
                            num11 = (inHigh[NearTrailingIdx - totIdx] - num13) + (num12 - inLow[NearTrailingIdx - totIdx]);
                        }
                        else {
                            num11 = 0.0;
                        }
                        num14 = num11;
                    }
                    num15 = num14;
                }
                NearPeriodTotal[totIdx] += num20 - num15;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
            }
            else {
                double num9;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i - 2] - inLow[i - 2];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i - 2] >= inOpen[i - 2]) {
                            num8 = inClose[i - 2];
                        }
                        else {
                            num8 = inOpen[i - 2];
                        }
                        if (inClose[i - 2] >= inOpen[i - 2]) {
                            num7 = inOpen[i - 2];
                        }
                        else {
                            num7 = inClose[i - 2];
                        }
                        num6 = (inHigh[i - 2] - num8) + (num7 - inLow[i - 2]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[BodyLongTrailingIdx - 2] - inOpen[BodyLongTrailingIdx - 2]));
            }
            else {
                double num4;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num4 = inHigh[BodyLongTrailingIdx - 2] - inLow[BodyLongTrailingIdx - 2];
                }
                else {
                    double num;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[BodyLongTrailingIdx - 2] >= inOpen[BodyLongTrailingIdx - 2]) {
                            num3 = inClose[BodyLongTrailingIdx - 2];
                        }
                        else {
                            num3 = inOpen[BodyLongTrailingIdx - 2];
                        }
                        if (inClose[BodyLongTrailingIdx - 2] >= inOpen[BodyLongTrailingIdx - 2]) {
                            num2 = inOpen[BodyLongTrailingIdx - 2];
                        }
                        else {
                            num2 = inClose[BodyLongTrailingIdx - 2];
                        }
                        num = (inHigh[BodyLongTrailingIdx - 2] - num3) + (num2 - inLow[BodyLongTrailingIdx - 2]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            BodyLongPeriodTotal += num10 - num5;
            i++;
            ShadowShortTrailingIdx++;
            ShadowLongTrailingIdx++;
            NearTrailingIdx++;
            FarTrailingIdx++;
            BodyLongTrailingIdx++;
            if (i <= endIdx) {
                goto Label_0B40;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlBeltHold(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            double num15;
            double num20;
            int num21;
            double num22;
            double num28;
            double num29;
            double num38;
            double num44;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlBeltHoldLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double BodyLongPeriodTotal = 0.0;
            int BodyLongTrailingIdx = startIdx - Globals.candleSettings[0].avgPeriod;
            double ShadowVeryShortPeriodTotal = 0.0;
            int ShadowVeryShortTrailingIdx = startIdx - Globals.candleSettings[7].avgPeriod;
            int i = BodyLongTrailingIdx;
            while (true) {
                double num54;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num54 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num53;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num53 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num50;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num51;
                            double num52;
                            if (inClose[i] >= inOpen[i]) {
                                num52 = inClose[i];
                            }
                            else {
                                num52 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num51 = inOpen[i];
                            }
                            else {
                                num51 = inClose[i];
                            }
                            num50 = (inHigh[i] - num52) + (num51 - inLow[i]);
                        }
                        else {
                            num50 = 0.0;
                        }
                        num53 = num50;
                    }
                    num54 = num53;
                }
                BodyLongPeriodTotal += num54;
                i++;
            }
            i = ShadowVeryShortTrailingIdx;
            while (true) {
                double num49;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num49 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num48;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num48 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num45;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num46;
                            double num47;
                            if (inClose[i] >= inOpen[i]) {
                                num47 = inClose[i];
                            }
                            else {
                                num47 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num46 = inOpen[i];
                            }
                            else {
                                num46 = inClose[i];
                            }
                            num45 = (inHigh[i] - num47) + (num46 - inLow[i]);
                        }
                        else {
                            num45 = 0.0;
                        }
                        num48 = num45;
                    }
                    num49 = num48;
                }
                ShadowVeryShortPeriodTotal += num49;
                i++;
            }
            int outIdx = 0;
            Label_022E:
            if (Globals.candleSettings[0].avgPeriod != 0.0) {
                num44 = BodyLongPeriodTotal / ((double)Globals.candleSettings[0].avgPeriod);
            }
            else {
                double num43;
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num43 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num42;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num42 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num39;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num40;
                            double num41;
                            if (inClose[i] >= inOpen[i]) {
                                num41 = inClose[i];
                            }
                            else {
                                num41 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num40 = inOpen[i];
                            }
                            else {
                                num40 = inClose[i];
                            }
                            num39 = (inHigh[i] - num41) + (num40 - inLow[i]);
                        }
                        else {
                            num39 = 0.0;
                        }
                        num42 = num39;
                    }
                    num43 = num42;
                }
                num44 = num43;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                num38 = 2.0;
            }
            else {
                num38 = 1.0;
            }
            if (Math.Abs((double)(inClose[i] - inOpen[i])) <= ((Globals.candleSettings[0].factor * num44) / num38)) {
                goto Label_064A;
            }
            if (inClose[i] >= inOpen[i]) {
                double num30;
                double num36;
                double num37;
                if (inClose[i] >= inOpen[i]) {
                    num37 = inOpen[i];
                }
                else {
                    num37 = inClose[i];
                }
                if (Globals.candleSettings[7].avgPeriod != 0.0) {
                    num36 = ShadowVeryShortPeriodTotal / ((double)Globals.candleSettings[7].avgPeriod);
                }
                else {
                    double num35;
                    if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                        num35 = Math.Abs((double)(inClose[i] - inOpen[i]));
                    }
                    else {
                        double num34;
                        if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                            num34 = inHigh[i] - inLow[i];
                        }
                        else {
                            double num31;
                            if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                double num32;
                                double num33;
                                if (inClose[i] >= inOpen[i]) {
                                    num33 = inClose[i];
                                }
                                else {
                                    num33 = inOpen[i];
                                }
                                if (inClose[i] >= inOpen[i]) {
                                    num32 = inOpen[i];
                                }
                                else {
                                    num32 = inClose[i];
                                }
                                num31 = (inHigh[i] - num33) + (num32 - inLow[i]);
                            }
                            else {
                                num31 = 0.0;
                            }
                            num34 = num31;
                        }
                        num35 = num34;
                    }
                    num36 = num35;
                }
                if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                    num30 = 2.0;
                }
                else {
                    num30 = 1.0;
                }
                if ((num37 - inLow[i]) < ((Globals.candleSettings[7].factor * num36) / num30)) {
                    goto Label_062A;
                }
            }
            if (((inClose[i] < inOpen[i]) ? -1 : 1) != -1) {
                goto Label_064A;
            }
            if (inClose[i] >= inOpen[i]) {
                num29 = inClose[i];
            }
            else {
                num29 = inOpen[i];
            }
            if (Globals.candleSettings[7].avgPeriod != 0.0) {
                num28 = ShadowVeryShortPeriodTotal / ((double)Globals.candleSettings[7].avgPeriod);
            }
            else {
                double num27;
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num27 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num26;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num26 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num23;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num24;
                            double num25;
                            if (inClose[i] >= inOpen[i]) {
                                num25 = inClose[i];
                            }
                            else {
                                num25 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num24 = inOpen[i];
                            }
                            else {
                                num24 = inClose[i];
                            }
                            num23 = (inHigh[i] - num25) + (num24 - inLow[i]);
                        }
                        else {
                            num23 = 0.0;
                        }
                        num26 = num23;
                    }
                    num27 = num26;
                }
                num28 = num27;
            }
            if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                num22 = 2.0;
            }
            else {
                num22 = 1.0;
            }
            if ((inHigh[i] - num29) >= ((Globals.candleSettings[7].factor * num28) / num22)) {
                goto Label_064A;
            }
            Label_062A:
            if (inClose[i] >= inOpen[i]) {
                num21 = 1;
            }
            else {
                num21 = -1;
            }
            outInteger[outIdx] = num21 * 100;
            outIdx++;
            goto Label_0653;
            Label_064A:
            outInteger[outIdx] = 0;
            outIdx++;
            Label_0653:
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num20 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num19;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num19 = inHigh[i] - inLow[i];
                }
                else {
                    double num16;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num17;
                        double num18;
                        if (inClose[i] >= inOpen[i]) {
                            num18 = inClose[i];
                        }
                        else {
                            num18 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num17 = inOpen[i];
                        }
                        else {
                            num17 = inClose[i];
                        }
                        num16 = (inHigh[i] - num18) + (num17 - inLow[i]);
                    }
                    else {
                        num16 = 0.0;
                    }
                    num19 = num16;
                }
                num20 = num19;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num15 = Math.Abs((double)(inClose[BodyLongTrailingIdx] - inOpen[BodyLongTrailingIdx]));
            }
            else {
                double num14;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num14 = inHigh[BodyLongTrailingIdx] - inLow[BodyLongTrailingIdx];
                }
                else {
                    double num11;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num12;
                        double num13;
                        if (inClose[BodyLongTrailingIdx] >= inOpen[BodyLongTrailingIdx]) {
                            num13 = inClose[BodyLongTrailingIdx];
                        }
                        else {
                            num13 = inOpen[BodyLongTrailingIdx];
                        }
                        if (inClose[BodyLongTrailingIdx] >= inOpen[BodyLongTrailingIdx]) {
                            num12 = inOpen[BodyLongTrailingIdx];
                        }
                        else {
                            num12 = inClose[BodyLongTrailingIdx];
                        }
                        num11 = (inHigh[BodyLongTrailingIdx] - num13) + (num12 - inLow[BodyLongTrailingIdx]);
                    }
                    else {
                        num11 = 0.0;
                    }
                    num14 = num11;
                }
                num15 = num14;
            }
            BodyLongPeriodTotal += num20 - num15;
            if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num9;
                if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i] - inLow[i];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i] >= inOpen[i]) {
                            num8 = inClose[i];
                        }
                        else {
                            num8 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num7 = inOpen[i];
                        }
                        else {
                            num7 = inClose[i];
                        }
                        num6 = (inHigh[i] - num8) + (num7 - inLow[i]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[ShadowVeryShortTrailingIdx] - inOpen[ShadowVeryShortTrailingIdx]));
            }
            else {
                double num4;
                if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                    num4 = inHigh[ShadowVeryShortTrailingIdx] - inLow[ShadowVeryShortTrailingIdx];
                }
                else {
                    double num;
                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[ShadowVeryShortTrailingIdx] >= inOpen[ShadowVeryShortTrailingIdx]) {
                            num3 = inClose[ShadowVeryShortTrailingIdx];
                        }
                        else {
                            num3 = inOpen[ShadowVeryShortTrailingIdx];
                        }
                        if (inClose[ShadowVeryShortTrailingIdx] >= inOpen[ShadowVeryShortTrailingIdx]) {
                            num2 = inOpen[ShadowVeryShortTrailingIdx];
                        }
                        else {
                            num2 = inClose[ShadowVeryShortTrailingIdx];
                        }
                        num = (inHigh[ShadowVeryShortTrailingIdx] - num3) + (num2 - inLow[ShadowVeryShortTrailingIdx]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            ShadowVeryShortPeriodTotal += num10 - num5;
            i++;
            BodyLongTrailingIdx++;
            ShadowVeryShortTrailingIdx++;
            if (i <= endIdx) {
                goto Label_022E;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlBreakaway(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            int num11;
            double num12;
            double num13;
            int num16;
            int num17;
            int num18;
            double num19;
            double num25;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlBreakawayLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double BodyLongPeriodTotal = 0.0;
            int BodyLongTrailingIdx = startIdx - Globals.candleSettings[0].avgPeriod;
            int i = BodyLongTrailingIdx;
            while (true) {
                double num30;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num30 = Math.Abs((double)(inClose[i - 4] - inOpen[i - 4]));
                }
                else {
                    double num29;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num29 = inHigh[i - 4] - inLow[i - 4];
                    }
                    else {
                        double num26;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num27;
                            double num28;
                            if (inClose[i - 4] >= inOpen[i - 4]) {
                                num28 = inClose[i - 4];
                            }
                            else {
                                num28 = inOpen[i - 4];
                            }
                            if (inClose[i - 4] >= inOpen[i - 4]) {
                                num27 = inOpen[i - 4];
                            }
                            else {
                                num27 = inClose[i - 4];
                            }
                            num26 = (inHigh[i - 4] - num28) + (num27 - inLow[i - 4]);
                        }
                        else {
                            num26 = 0.0;
                        }
                        num29 = num26;
                    }
                    num30 = num29;
                }
                BodyLongPeriodTotal += num30;
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            Label_0168:
            if (Globals.candleSettings[0].avgPeriod != 0.0) {
                num25 = BodyLongPeriodTotal / ((double)Globals.candleSettings[0].avgPeriod);
            }
            else {
                double num24;
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num24 = Math.Abs((double)(inClose[i - 4] - inOpen[i - 4]));
                }
                else {
                    double num23;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num23 = inHigh[i - 4] - inLow[i - 4];
                    }
                    else {
                        double num20;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num21;
                            double num22;
                            if (inClose[i - 4] >= inOpen[i - 4]) {
                                num22 = inClose[i - 4];
                            }
                            else {
                                num22 = inOpen[i - 4];
                            }
                            if (inClose[i - 4] >= inOpen[i - 4]) {
                                num21 = inOpen[i - 4];
                            }
                            else {
                                num21 = inClose[i - 4];
                            }
                            num20 = (inHigh[i - 4] - num22) + (num21 - inLow[i - 4]);
                        }
                        else {
                            num20 = 0.0;
                        }
                        num23 = num20;
                    }
                    num24 = num23;
                }
                num25 = num24;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                num19 = 2.0;
            }
            else {
                num19 = 1.0;
            }
            if (Math.Abs((double)(inClose[i - 4] - inOpen[i - 4])) <= ((Globals.candleSettings[0].factor * num25) / num19)) {
                goto Label_04B7;
            }
            if (inClose[i - 3] >= inOpen[i - 3]) {
                num18 = 1;
            }
            else {
                num18 = -1;
            }
            if (((inClose[i - 4] < inOpen[i - 4]) ? -1 : 1) != num18) {
                goto Label_04B7;
            }
            if (inClose[i - 1] >= inOpen[i - 1]) {
                num17 = 1;
            }
            else {
                num17 = -1;
            }
            if (((inClose[i - 3] < inOpen[i - 3]) ? -1 : 1) != num17) {
                goto Label_04B7;
            }
            if (inClose[i] >= inOpen[i]) {
                num16 = 1;
            }
            else {
                num16 = -1;
            }
            if (((inClose[i - 1] < inOpen[i - 1]) ? -1 : 1) != -num16) {
                goto Label_04B7;
            }
            if (((inClose[i - 4] < inOpen[i - 4]) ? -1 : 1) == -1) {
                double num14;
                double num15;
                if (inOpen[i - 3] > inClose[i - 3]) {
                    num15 = inOpen[i - 3];
                }
                else {
                    num15 = inClose[i - 3];
                }
                if (inOpen[i - 4] < inClose[i - 4]) {
                    num14 = inOpen[i - 4];
                }
                else {
                    num14 = inClose[i - 4];
                }
                if ((((num15 < num14) && (inHigh[i - 2] < inHigh[i - 3])) && ((inLow[i - 2] < inLow[i - 3]) && (inHigh[i - 1] < inHigh[i - 2]))) && (((inLow[i - 1] < inLow[i - 2]) && (inClose[i] > inOpen[i - 3])) && (inClose[i] < inClose[i - 4]))) {
                    goto Label_0497;
                }
            }
            if (inClose[i - 4] < inOpen[i - 4]) {
                goto Label_04B7;
            }
            if (inOpen[i - 3] < inClose[i - 3]) {
                num13 = inOpen[i - 3];
            }
            else {
                num13 = inClose[i - 3];
            }
            if (inOpen[i - 4] > inClose[i - 4]) {
                num12 = inOpen[i - 4];
            }
            else {
                num12 = inClose[i - 4];
            }
            if ((((num13 <= num12) || (inHigh[i - 2] <= inHigh[i - 3])) || ((inLow[i - 2] <= inLow[i - 3]) || (inHigh[i - 1] <= inHigh[i - 2]))) || (((inLow[i - 1] <= inLow[i - 2]) || (inClose[i] >= inOpen[i - 3])) || (inClose[i] <= inClose[i - 4]))) {
                goto Label_04B7;
            }
            Label_0497:
            if (inClose[i] >= inOpen[i]) {
                num11 = 1;
            }
            else {
                num11 = -1;
            }
            outInteger[outIdx] = num11 * 100;
            outIdx++;
            goto Label_04C0;
            Label_04B7:
            outInteger[outIdx] = 0;
            outIdx++;
            Label_04C0:
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i - 4] - inOpen[i - 4]));
            }
            else {
                double num9;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i - 4] - inLow[i - 4];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i - 4] >= inOpen[i - 4]) {
                            num8 = inClose[i - 4];
                        }
                        else {
                            num8 = inOpen[i - 4];
                        }
                        if (inClose[i - 4] >= inOpen[i - 4]) {
                            num7 = inOpen[i - 4];
                        }
                        else {
                            num7 = inClose[i - 4];
                        }
                        num6 = (inHigh[i - 4] - num8) + (num7 - inLow[i - 4]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[BodyLongTrailingIdx - 4] - inOpen[BodyLongTrailingIdx - 4]));
            }
            else {
                double num4;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num4 = inHigh[BodyLongTrailingIdx - 4] - inLow[BodyLongTrailingIdx - 4];
                }
                else {
                    double num;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[BodyLongTrailingIdx - 4] >= inOpen[BodyLongTrailingIdx - 4]) {
                            num3 = inClose[BodyLongTrailingIdx - 4];
                        }
                        else {
                            num3 = inOpen[BodyLongTrailingIdx - 4];
                        }
                        if (inClose[BodyLongTrailingIdx - 4] >= inOpen[BodyLongTrailingIdx - 4]) {
                            num2 = inOpen[BodyLongTrailingIdx - 4];
                        }
                        else {
                            num2 = inClose[BodyLongTrailingIdx - 4];
                        }
                        num = (inHigh[BodyLongTrailingIdx - 4] - num3) + (num2 - inLow[BodyLongTrailingIdx - 4]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            BodyLongPeriodTotal += num10 - num5;
            i++;
            BodyLongTrailingIdx++;
            if (i <= endIdx) {
                goto Label_0168;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlClosingMarubozu(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            double num15;
            double num20;
            int num21;
            double num22;
            double num28;
            double num29;
            double num38;
            double num44;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlClosingMarubozuLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double BodyLongPeriodTotal = 0.0;
            int BodyLongTrailingIdx = startIdx - Globals.candleSettings[0].avgPeriod;
            double ShadowVeryShortPeriodTotal = 0.0;
            int ShadowVeryShortTrailingIdx = startIdx - Globals.candleSettings[7].avgPeriod;
            int i = BodyLongTrailingIdx;
            while (true) {
                double num54;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num54 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num53;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num53 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num50;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num51;
                            double num52;
                            if (inClose[i] >= inOpen[i]) {
                                num52 = inClose[i];
                            }
                            else {
                                num52 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num51 = inOpen[i];
                            }
                            else {
                                num51 = inClose[i];
                            }
                            num50 = (inHigh[i] - num52) + (num51 - inLow[i]);
                        }
                        else {
                            num50 = 0.0;
                        }
                        num53 = num50;
                    }
                    num54 = num53;
                }
                BodyLongPeriodTotal += num54;
                i++;
            }
            i = ShadowVeryShortTrailingIdx;
            while (true) {
                double num49;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num49 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num48;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num48 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num45;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num46;
                            double num47;
                            if (inClose[i] >= inOpen[i]) {
                                num47 = inClose[i];
                            }
                            else {
                                num47 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num46 = inOpen[i];
                            }
                            else {
                                num46 = inClose[i];
                            }
                            num45 = (inHigh[i] - num47) + (num46 - inLow[i]);
                        }
                        else {
                            num45 = 0.0;
                        }
                        num48 = num45;
                    }
                    num49 = num48;
                }
                ShadowVeryShortPeriodTotal += num49;
                i++;
            }
            int outIdx = 0;
            Label_022E:
            if (Globals.candleSettings[0].avgPeriod != 0.0) {
                num44 = BodyLongPeriodTotal / ((double)Globals.candleSettings[0].avgPeriod);
            }
            else {
                double num43;
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num43 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num42;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num42 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num39;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num40;
                            double num41;
                            if (inClose[i] >= inOpen[i]) {
                                num41 = inClose[i];
                            }
                            else {
                                num41 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num40 = inOpen[i];
                            }
                            else {
                                num40 = inClose[i];
                            }
                            num39 = (inHigh[i] - num41) + (num40 - inLow[i]);
                        }
                        else {
                            num39 = 0.0;
                        }
                        num42 = num39;
                    }
                    num43 = num42;
                }
                num44 = num43;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                num38 = 2.0;
            }
            else {
                num38 = 1.0;
            }
            if (Math.Abs((double)(inClose[i] - inOpen[i])) <= ((Globals.candleSettings[0].factor * num44) / num38)) {
                goto Label_064A;
            }
            if (inClose[i] >= inOpen[i]) {
                double num30;
                double num36;
                double num37;
                if (inClose[i] >= inOpen[i]) {
                    num37 = inClose[i];
                }
                else {
                    num37 = inOpen[i];
                }
                if (Globals.candleSettings[7].avgPeriod != 0.0) {
                    num36 = ShadowVeryShortPeriodTotal / ((double)Globals.candleSettings[7].avgPeriod);
                }
                else {
                    double num35;
                    if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                        num35 = Math.Abs((double)(inClose[i] - inOpen[i]));
                    }
                    else {
                        double num34;
                        if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                            num34 = inHigh[i] - inLow[i];
                        }
                        else {
                            double num31;
                            if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                double num32;
                                double num33;
                                if (inClose[i] >= inOpen[i]) {
                                    num33 = inClose[i];
                                }
                                else {
                                    num33 = inOpen[i];
                                }
                                if (inClose[i] >= inOpen[i]) {
                                    num32 = inOpen[i];
                                }
                                else {
                                    num32 = inClose[i];
                                }
                                num31 = (inHigh[i] - num33) + (num32 - inLow[i]);
                            }
                            else {
                                num31 = 0.0;
                            }
                            num34 = num31;
                        }
                        num35 = num34;
                    }
                    num36 = num35;
                }
                if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                    num30 = 2.0;
                }
                else {
                    num30 = 1.0;
                }
                if ((inHigh[i] - num37) < ((Globals.candleSettings[7].factor * num36) / num30)) {
                    goto Label_062A;
                }
            }
            if (((inClose[i] < inOpen[i]) ? -1 : 1) != -1) {
                goto Label_064A;
            }
            if (inClose[i] >= inOpen[i]) {
                num29 = inOpen[i];
            }
            else {
                num29 = inClose[i];
            }
            if (Globals.candleSettings[7].avgPeriod != 0.0) {
                num28 = ShadowVeryShortPeriodTotal / ((double)Globals.candleSettings[7].avgPeriod);
            }
            else {
                double num27;
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num27 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num26;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num26 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num23;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num24;
                            double num25;
                            if (inClose[i] >= inOpen[i]) {
                                num25 = inClose[i];
                            }
                            else {
                                num25 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num24 = inOpen[i];
                            }
                            else {
                                num24 = inClose[i];
                            }
                            num23 = (inHigh[i] - num25) + (num24 - inLow[i]);
                        }
                        else {
                            num23 = 0.0;
                        }
                        num26 = num23;
                    }
                    num27 = num26;
                }
                num28 = num27;
            }
            if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                num22 = 2.0;
            }
            else {
                num22 = 1.0;
            }
            if ((num29 - inLow[i]) >= ((Globals.candleSettings[7].factor * num28) / num22)) {
                goto Label_064A;
            }
            Label_062A:
            if (inClose[i] >= inOpen[i]) {
                num21 = 1;
            }
            else {
                num21 = -1;
            }
            outInteger[outIdx] = num21 * 100;
            outIdx++;
            goto Label_0653;
            Label_064A:
            outInteger[outIdx] = 0;
            outIdx++;
            Label_0653:
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num20 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num19;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num19 = inHigh[i] - inLow[i];
                }
                else {
                    double num16;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num17;
                        double num18;
                        if (inClose[i] >= inOpen[i]) {
                            num18 = inClose[i];
                        }
                        else {
                            num18 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num17 = inOpen[i];
                        }
                        else {
                            num17 = inClose[i];
                        }
                        num16 = (inHigh[i] - num18) + (num17 - inLow[i]);
                    }
                    else {
                        num16 = 0.0;
                    }
                    num19 = num16;
                }
                num20 = num19;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num15 = Math.Abs((double)(inClose[BodyLongTrailingIdx] - inOpen[BodyLongTrailingIdx]));
            }
            else {
                double num14;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num14 = inHigh[BodyLongTrailingIdx] - inLow[BodyLongTrailingIdx];
                }
                else {
                    double num11;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num12;
                        double num13;
                        if (inClose[BodyLongTrailingIdx] >= inOpen[BodyLongTrailingIdx]) {
                            num13 = inClose[BodyLongTrailingIdx];
                        }
                        else {
                            num13 = inOpen[BodyLongTrailingIdx];
                        }
                        if (inClose[BodyLongTrailingIdx] >= inOpen[BodyLongTrailingIdx]) {
                            num12 = inOpen[BodyLongTrailingIdx];
                        }
                        else {
                            num12 = inClose[BodyLongTrailingIdx];
                        }
                        num11 = (inHigh[BodyLongTrailingIdx] - num13) + (num12 - inLow[BodyLongTrailingIdx]);
                    }
                    else {
                        num11 = 0.0;
                    }
                    num14 = num11;
                }
                num15 = num14;
            }
            BodyLongPeriodTotal += num20 - num15;
            if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num9;
                if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i] - inLow[i];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i] >= inOpen[i]) {
                            num8 = inClose[i];
                        }
                        else {
                            num8 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num7 = inOpen[i];
                        }
                        else {
                            num7 = inClose[i];
                        }
                        num6 = (inHigh[i] - num8) + (num7 - inLow[i]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[ShadowVeryShortTrailingIdx] - inOpen[ShadowVeryShortTrailingIdx]));
            }
            else {
                double num4;
                if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                    num4 = inHigh[ShadowVeryShortTrailingIdx] - inLow[ShadowVeryShortTrailingIdx];
                }
                else {
                    double num;
                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[ShadowVeryShortTrailingIdx] >= inOpen[ShadowVeryShortTrailingIdx]) {
                            num3 = inClose[ShadowVeryShortTrailingIdx];
                        }
                        else {
                            num3 = inOpen[ShadowVeryShortTrailingIdx];
                        }
                        if (inClose[ShadowVeryShortTrailingIdx] >= inOpen[ShadowVeryShortTrailingIdx]) {
                            num2 = inOpen[ShadowVeryShortTrailingIdx];
                        }
                        else {
                            num2 = inClose[ShadowVeryShortTrailingIdx];
                        }
                        num = (inHigh[ShadowVeryShortTrailingIdx] - num3) + (num2 - inLow[ShadowVeryShortTrailingIdx]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            ShadowVeryShortPeriodTotal += num10 - num5;
            i++;
            BodyLongTrailingIdx++;
            ShadowVeryShortTrailingIdx++;
            if (i <= endIdx) {
                goto Label_022E;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlConcealBabysWall(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            int totIdx;
            double[] ShadowVeryShortPeriodTotal = new double[4];
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlConcealBabysWallLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            ShadowVeryShortPeriodTotal[3] = 0.0;
            ShadowVeryShortPeriodTotal[2] = 0.0;
            ShadowVeryShortPeriodTotal[1] = 0.0;
            int ShadowVeryShortTrailingIdx = startIdx - Globals.candleSettings[7].avgPeriod;
            int i = ShadowVeryShortTrailingIdx;
            while (true) {
                double num57;
                double num62;
                double num67;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num67 = Math.Abs((double)(inClose[i - 3] - inOpen[i - 3]));
                }
                else {
                    double num66;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num66 = inHigh[i - 3] - inLow[i - 3];
                    }
                    else {
                        double num63;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num64;
                            double num65;
                            if (inClose[i - 3] >= inOpen[i - 3]) {
                                num65 = inClose[i - 3];
                            }
                            else {
                                num65 = inOpen[i - 3];
                            }
                            if (inClose[i - 3] >= inOpen[i - 3]) {
                                num64 = inOpen[i - 3];
                            }
                            else {
                                num64 = inClose[i - 3];
                            }
                            num63 = (inHigh[i - 3] - num65) + (num64 - inLow[i - 3]);
                        }
                        else {
                            num63 = 0.0;
                        }
                        num66 = num63;
                    }
                    num67 = num66;
                }
                ShadowVeryShortPeriodTotal[3] += num67;
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num62 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                }
                else {
                    double num61;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num61 = inHigh[i - 2] - inLow[i - 2];
                    }
                    else {
                        double num58;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num59;
                            double num60;
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num60 = inClose[i - 2];
                            }
                            else {
                                num60 = inOpen[i - 2];
                            }
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num59 = inOpen[i - 2];
                            }
                            else {
                                num59 = inClose[i - 2];
                            }
                            num58 = (inHigh[i - 2] - num60) + (num59 - inLow[i - 2]);
                        }
                        else {
                            num58 = 0.0;
                        }
                        num61 = num58;
                    }
                    num62 = num61;
                }
                ShadowVeryShortPeriodTotal[2] += num62;
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num57 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num56;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num56 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num53;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num54;
                            double num55;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num55 = inClose[i - 1];
                            }
                            else {
                                num55 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num54 = inOpen[i - 1];
                            }
                            else {
                                num54 = inClose[i - 1];
                            }
                            num53 = (inHigh[i - 1] - num55) + (num54 - inLow[i - 1]);
                        }
                        else {
                            num53 = 0.0;
                        }
                        num56 = num53;
                    }
                    num57 = num56;
                }
                ShadowVeryShortPeriodTotal[1] += num57;
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            Label_0336:
            if ((((((inClose[i - 3] < inOpen[i - 3]) ? -1 : 1) == -1) && (((inClose[i - 2] < inOpen[i - 2]) ? -1 : 1) == -1)) && (((inClose[i - 1] < inOpen[i - 1]) ? -1 : 1) == -1)) && (((inClose[i] < inOpen[i]) ? -1 : 1) == -1)) {
                double num45;
                double num51;
                double num52;
                if (inClose[i - 3] >= inOpen[i - 3]) {
                    num52 = inOpen[i - 3];
                }
                else {
                    num52 = inClose[i - 3];
                }
                if (Globals.candleSettings[7].avgPeriod != 0.0) {
                    num51 = ShadowVeryShortPeriodTotal[3] / ((double)Globals.candleSettings[7].avgPeriod);
                }
                else {
                    double num50;
                    if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                        num50 = Math.Abs((double)(inClose[i - 3] - inOpen[i - 3]));
                    }
                    else {
                        double num49;
                        if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                            num49 = inHigh[i - 3] - inLow[i - 3];
                        }
                        else {
                            double num46;
                            if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                double num47;
                                double num48;
                                if (inClose[i - 3] >= inOpen[i - 3]) {
                                    num48 = inClose[i - 3];
                                }
                                else {
                                    num48 = inOpen[i - 3];
                                }
                                if (inClose[i - 3] >= inOpen[i - 3]) {
                                    num47 = inOpen[i - 3];
                                }
                                else {
                                    num47 = inClose[i - 3];
                                }
                                num46 = (inHigh[i - 3] - num48) + (num47 - inLow[i - 3]);
                            }
                            else {
                                num46 = 0.0;
                            }
                            num49 = num46;
                        }
                        num50 = num49;
                    }
                    num51 = num50;
                }
                if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                    num45 = 2.0;
                }
                else {
                    num45 = 1.0;
                }
                if ((num52 - inLow[i - 3]) < ((Globals.candleSettings[7].factor * num51) / num45)) {
                    double num37;
                    double num43;
                    double num44;
                    if (inClose[i - 3] >= inOpen[i - 3]) {
                        num44 = inClose[i - 3];
                    }
                    else {
                        num44 = inOpen[i - 3];
                    }
                    if (Globals.candleSettings[7].avgPeriod != 0.0) {
                        num43 = ShadowVeryShortPeriodTotal[3] / ((double)Globals.candleSettings[7].avgPeriod);
                    }
                    else {
                        double num42;
                        if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                            num42 = Math.Abs((double)(inClose[i - 3] - inOpen[i - 3]));
                        }
                        else {
                            double num41;
                            if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                                num41 = inHigh[i - 3] - inLow[i - 3];
                            }
                            else {
                                double num38;
                                if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                    double num39;
                                    double num40;
                                    if (inClose[i - 3] >= inOpen[i - 3]) {
                                        num40 = inClose[i - 3];
                                    }
                                    else {
                                        num40 = inOpen[i - 3];
                                    }
                                    if (inClose[i - 3] >= inOpen[i - 3]) {
                                        num39 = inOpen[i - 3];
                                    }
                                    else {
                                        num39 = inClose[i - 3];
                                    }
                                    num38 = (inHigh[i - 3] - num40) + (num39 - inLow[i - 3]);
                                }
                                else {
                                    num38 = 0.0;
                                }
                                num41 = num38;
                            }
                            num42 = num41;
                        }
                        num43 = num42;
                    }
                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                        num37 = 2.0;
                    }
                    else {
                        num37 = 1.0;
                    }
                    if ((inHigh[i - 3] - num44) < ((Globals.candleSettings[7].factor * num43) / num37)) {
                        double num29;
                        double num35;
                        double num36;
                        if (inClose[i - 2] >= inOpen[i - 2]) {
                            num36 = inOpen[i - 2];
                        }
                        else {
                            num36 = inClose[i - 2];
                        }
                        if (Globals.candleSettings[7].avgPeriod != 0.0) {
                            num35 = ShadowVeryShortPeriodTotal[2] / ((double)Globals.candleSettings[7].avgPeriod);
                        }
                        else {
                            double num34;
                            if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                                num34 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                            }
                            else {
                                double num33;
                                if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                                    num33 = inHigh[i - 2] - inLow[i - 2];
                                }
                                else {
                                    double num30;
                                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                        double num31;
                                        double num32;
                                        if (inClose[i - 2] >= inOpen[i - 2]) {
                                            num32 = inClose[i - 2];
                                        }
                                        else {
                                            num32 = inOpen[i - 2];
                                        }
                                        if (inClose[i - 2] >= inOpen[i - 2]) {
                                            num31 = inOpen[i - 2];
                                        }
                                        else {
                                            num31 = inClose[i - 2];
                                        }
                                        num30 = (inHigh[i - 2] - num32) + (num31 - inLow[i - 2]);
                                    }
                                    else {
                                        num30 = 0.0;
                                    }
                                    num33 = num30;
                                }
                                num34 = num33;
                            }
                            num35 = num34;
                        }
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            num29 = 2.0;
                        }
                        else {
                            num29 = 1.0;
                        }
                        if ((num36 - inLow[i - 2]) < ((Globals.candleSettings[7].factor * num35) / num29)) {
                            double num21;
                            double num27;
                            double num28;
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num28 = inClose[i - 2];
                            }
                            else {
                                num28 = inOpen[i - 2];
                            }
                            if (Globals.candleSettings[7].avgPeriod != 0.0) {
                                num27 = ShadowVeryShortPeriodTotal[2] / ((double)Globals.candleSettings[7].avgPeriod);
                            }
                            else {
                                double num26;
                                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                                    num26 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                                }
                                else {
                                    double num25;
                                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                                        num25 = inHigh[i - 2] - inLow[i - 2];
                                    }
                                    else {
                                        double num22;
                                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                            double num23;
                                            double num24;
                                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                                num24 = inClose[i - 2];
                                            }
                                            else {
                                                num24 = inOpen[i - 2];
                                            }
                                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                                num23 = inOpen[i - 2];
                                            }
                                            else {
                                                num23 = inClose[i - 2];
                                            }
                                            num22 = (inHigh[i - 2] - num24) + (num23 - inLow[i - 2]);
                                        }
                                        else {
                                            num22 = 0.0;
                                        }
                                        num25 = num22;
                                    }
                                    num26 = num25;
                                }
                                num27 = num26;
                            }
                            if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                num21 = 2.0;
                            }
                            else {
                                num21 = 1.0;
                            }
                            if ((inHigh[i - 2] - num28) < ((Globals.candleSettings[7].factor * num27) / num21)) {
                                double num19;
                                double num20;
                                if (inOpen[i - 1] > inClose[i - 1]) {
                                    num20 = inOpen[i - 1];
                                }
                                else {
                                    num20 = inClose[i - 1];
                                }
                                if (inOpen[i - 2] < inClose[i - 2]) {
                                    num19 = inOpen[i - 2];
                                }
                                else {
                                    num19 = inClose[i - 2];
                                }
                                if (num20 < num19) {
                                    double num11;
                                    double num17;
                                    double num18;
                                    if (inClose[i - 1] >= inOpen[i - 1]) {
                                        num18 = inClose[i - 1];
                                    }
                                    else {
                                        num18 = inOpen[i - 1];
                                    }
                                    if (Globals.candleSettings[7].avgPeriod != 0.0) {
                                        num17 = ShadowVeryShortPeriodTotal[1] / ((double)Globals.candleSettings[7].avgPeriod);
                                    }
                                    else {
                                        double num16;
                                        if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                                            num16 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                                        }
                                        else {
                                            double num15;
                                            if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                                                num15 = inHigh[i - 1] - inLow[i - 1];
                                            }
                                            else {
                                                double num12;
                                                if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                                    double num13;
                                                    double num14;
                                                    if (inClose[i - 1] >= inOpen[i - 1]) {
                                                        num14 = inClose[i - 1];
                                                    }
                                                    else {
                                                        num14 = inOpen[i - 1];
                                                    }
                                                    if (inClose[i - 1] >= inOpen[i - 1]) {
                                                        num13 = inOpen[i - 1];
                                                    }
                                                    else {
                                                        num13 = inClose[i - 1];
                                                    }
                                                    num12 = (inHigh[i - 1] - num14) + (num13 - inLow[i - 1]);
                                                }
                                                else {
                                                    num12 = 0.0;
                                                }
                                                num15 = num12;
                                            }
                                            num16 = num15;
                                        }
                                        num17 = num16;
                                    }
                                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                        num11 = 2.0;
                                    }
                                    else {
                                        num11 = 1.0;
                                    }
                                    if ((((inHigh[i - 1] - num18) > ((Globals.candleSettings[7].factor * num17) / num11)) && (inHigh[i - 1] > inClose[i - 2])) && ((inHigh[i] > inHigh[i - 1]) && (inLow[i] < inLow[i - 1]))) {
                                        outInteger[outIdx] = 100;
                                        outIdx++;
                                        goto Label_0B63;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_0B63:
            totIdx = 3;
            while (totIdx >= 1) {
                double num5;
                double num10;
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num10 = Math.Abs((double)(inClose[i - totIdx] - inOpen[i - totIdx]));
                }
                else {
                    double num9;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num9 = inHigh[i - totIdx] - inLow[i - totIdx];
                    }
                    else {
                        double num6;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num7;
                            double num8;
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num8 = inClose[i - totIdx];
                            }
                            else {
                                num8 = inOpen[i - totIdx];
                            }
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num7 = inOpen[i - totIdx];
                            }
                            else {
                                num7 = inClose[i - totIdx];
                            }
                            num6 = (inHigh[i - totIdx] - num8) + (num7 - inLow[i - totIdx]);
                        }
                        else {
                            num6 = 0.0;
                        }
                        num9 = num6;
                    }
                    num10 = num9;
                }
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num5 = Math.Abs((double)(inClose[ShadowVeryShortTrailingIdx - totIdx] - inOpen[ShadowVeryShortTrailingIdx - totIdx]));
                }
                else {
                    double num4;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num4 = inHigh[ShadowVeryShortTrailingIdx - totIdx] - inLow[ShadowVeryShortTrailingIdx - totIdx];
                    }
                    else {
                        double num;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num2;
                            double num3;
                            if (inClose[ShadowVeryShortTrailingIdx - totIdx] >= inOpen[ShadowVeryShortTrailingIdx - totIdx]) {
                                num3 = inClose[ShadowVeryShortTrailingIdx - totIdx];
                            }
                            else {
                                num3 = inOpen[ShadowVeryShortTrailingIdx - totIdx];
                            }
                            if (inClose[ShadowVeryShortTrailingIdx - totIdx] >= inOpen[ShadowVeryShortTrailingIdx - totIdx]) {
                                num2 = inOpen[ShadowVeryShortTrailingIdx - totIdx];
                            }
                            else {
                                num2 = inClose[ShadowVeryShortTrailingIdx - totIdx];
                            }
                            num = (inHigh[ShadowVeryShortTrailingIdx - totIdx] - num3) + (num2 - inLow[ShadowVeryShortTrailingIdx - totIdx]);
                        }
                        else {
                            num = 0.0;
                        }
                        num4 = num;
                    }
                    num5 = num4;
                }
                ShadowVeryShortPeriodTotal[totIdx] += num10 - num5;
                totIdx--;
            }
            i++;
            ShadowVeryShortTrailingIdx++;
            if (i <= endIdx) {
                goto Label_0336;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlCounterAttack(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num15;
            double num20;
            int num50;
            double[] BodyLongPeriodTotal = new double[2];
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlCounterAttackLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double EqualPeriodTotal = 0.0;
            int EqualTrailingIdx = startIdx - Globals.candleSettings[10].avgPeriod;
            BodyLongPeriodTotal[1] = 0.0;
            BodyLongPeriodTotal[0] = 0.0;
            int BodyLongTrailingIdx = startIdx - Globals.candleSettings[0].avgPeriod;
            int i = EqualTrailingIdx;
            while (true) {
                double num65;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                    num65 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num64;
                    if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                        num64 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num61;
                        if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                            double num62;
                            double num63;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num63 = inClose[i - 1];
                            }
                            else {
                                num63 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num62 = inOpen[i - 1];
                            }
                            else {
                                num62 = inClose[i - 1];
                            }
                            num61 = (inHigh[i - 1] - num63) + (num62 - inLow[i - 1]);
                        }
                        else {
                            num61 = 0.0;
                        }
                        num64 = num61;
                    }
                    num65 = num64;
                }
                EqualPeriodTotal += num65;
                i++;
            }
            i = BodyLongTrailingIdx;
            while (true) {
                double num55;
                double num60;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num60 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num59;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num59 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num56;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num57;
                            double num58;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num58 = inClose[i - 1];
                            }
                            else {
                                num58 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num57 = inOpen[i - 1];
                            }
                            else {
                                num57 = inClose[i - 1];
                            }
                            num56 = (inHigh[i - 1] - num58) + (num57 - inLow[i - 1]);
                        }
                        else {
                            num56 = 0.0;
                        }
                        num59 = num56;
                    }
                    num60 = num59;
                }
                BodyLongPeriodTotal[1] += num60;
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num55 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num54;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num54 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num51;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num52;
                            double num53;
                            if (inClose[i] >= inOpen[i]) {
                                num53 = inClose[i];
                            }
                            else {
                                num53 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num52 = inOpen[i];
                            }
                            else {
                                num52 = inClose[i];
                            }
                            num51 = (inHigh[i] - num53) + (num52 - inLow[i]);
                        }
                        else {
                            num51 = 0.0;
                        }
                        num54 = num51;
                    }
                    num55 = num54;
                }
                BodyLongPeriodTotal[0] += num55;
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            Label_0345:
            if (inClose[i] >= inOpen[i]) {
                num50 = 1;
            }
            else {
                num50 = -1;
            }
            if (((inClose[i - 1] < inOpen[i - 1]) ? -1 : 1) == -num50) {
                double num43;
                double num49;
                if (Globals.candleSettings[0].avgPeriod != 0.0) {
                    num49 = BodyLongPeriodTotal[1] / ((double)Globals.candleSettings[0].avgPeriod);
                }
                else {
                    double num48;
                    if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                        num48 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                    }
                    else {
                        double num47;
                        if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                            num47 = inHigh[i - 1] - inLow[i - 1];
                        }
                        else {
                            double num44;
                            if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                                double num45;
                                double num46;
                                if (inClose[i - 1] >= inOpen[i - 1]) {
                                    num46 = inClose[i - 1];
                                }
                                else {
                                    num46 = inOpen[i - 1];
                                }
                                if (inClose[i - 1] >= inOpen[i - 1]) {
                                    num45 = inOpen[i - 1];
                                }
                                else {
                                    num45 = inClose[i - 1];
                                }
                                num44 = (inHigh[i - 1] - num46) + (num45 - inLow[i - 1]);
                            }
                            else {
                                num44 = 0.0;
                            }
                            num47 = num44;
                        }
                        num48 = num47;
                    }
                    num49 = num48;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                    num43 = 2.0;
                }
                else {
                    num43 = 1.0;
                }
                if (Math.Abs((double)(inClose[i - 1] - inOpen[i - 1])) > ((Globals.candleSettings[0].factor * num49) / num43)) {
                    double num36;
                    double num42;
                    if (Globals.candleSettings[0].avgPeriod != 0.0) {
                        num42 = BodyLongPeriodTotal[0] / ((double)Globals.candleSettings[0].avgPeriod);
                    }
                    else {
                        double num41;
                        if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                            num41 = Math.Abs((double)(inClose[i] - inOpen[i]));
                        }
                        else {
                            double num40;
                            if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                                num40 = inHigh[i] - inLow[i];
                            }
                            else {
                                double num37;
                                if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                                    double num38;
                                    double num39;
                                    if (inClose[i] >= inOpen[i]) {
                                        num39 = inClose[i];
                                    }
                                    else {
                                        num39 = inOpen[i];
                                    }
                                    if (inClose[i] >= inOpen[i]) {
                                        num38 = inOpen[i];
                                    }
                                    else {
                                        num38 = inClose[i];
                                    }
                                    num37 = (inHigh[i] - num39) + (num38 - inLow[i]);
                                }
                                else {
                                    num37 = 0.0;
                                }
                                num40 = num37;
                            }
                            num41 = num40;
                        }
                        num42 = num41;
                    }
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        num36 = 2.0;
                    }
                    else {
                        num36 = 1.0;
                    }
                    if (Math.Abs((double)(inClose[i] - inOpen[i])) > ((Globals.candleSettings[0].factor * num42) / num36)) {
                        double num29;
                        double num35;
                        if (Globals.candleSettings[10].avgPeriod != 0.0) {
                            num35 = EqualPeriodTotal / ((double)Globals.candleSettings[10].avgPeriod);
                        }
                        else {
                            double num34;
                            if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                                num34 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                            }
                            else {
                                double num33;
                                if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                                    num33 = inHigh[i - 1] - inLow[i - 1];
                                }
                                else {
                                    double num30;
                                    if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                                        double num31;
                                        double num32;
                                        if (inClose[i - 1] >= inOpen[i - 1]) {
                                            num32 = inClose[i - 1];
                                        }
                                        else {
                                            num32 = inOpen[i - 1];
                                        }
                                        if (inClose[i - 1] >= inOpen[i - 1]) {
                                            num31 = inOpen[i - 1];
                                        }
                                        else {
                                            num31 = inClose[i - 1];
                                        }
                                        num30 = (inHigh[i - 1] - num32) + (num31 - inLow[i - 1]);
                                    }
                                    else {
                                        num30 = 0.0;
                                    }
                                    num33 = num30;
                                }
                                num34 = num33;
                            }
                            num35 = num34;
                        }
                        if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                            num29 = 2.0;
                        }
                        else {
                            num29 = 1.0;
                        }
                        if (inClose[i] <= (inClose[i - 1] + ((Globals.candleSettings[10].factor * num35) / num29))) {
                            double num22;
                            double num28;
                            if (Globals.candleSettings[10].avgPeriod != 0.0) {
                                num28 = EqualPeriodTotal / ((double)Globals.candleSettings[10].avgPeriod);
                            }
                            else {
                                double num27;
                                if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                                    num27 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                                }
                                else {
                                    double num26;
                                    if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                                        num26 = inHigh[i - 1] - inLow[i - 1];
                                    }
                                    else {
                                        double num23;
                                        if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                                            double num24;
                                            double num25;
                                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                                num25 = inClose[i - 1];
                                            }
                                            else {
                                                num25 = inOpen[i - 1];
                                            }
                                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                                num24 = inOpen[i - 1];
                                            }
                                            else {
                                                num24 = inClose[i - 1];
                                            }
                                            num23 = (inHigh[i - 1] - num25) + (num24 - inLow[i - 1]);
                                        }
                                        else {
                                            num23 = 0.0;
                                        }
                                        num26 = num23;
                                    }
                                    num27 = num26;
                                }
                                num28 = num27;
                            }
                            if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                                num22 = 2.0;
                            }
                            else {
                                num22 = 1.0;
                            }
                            if (inClose[i] >= (inClose[i - 1] - ((Globals.candleSettings[10].factor * num28) / num22))) {
                                int num21;
                                if (inClose[i] >= inOpen[i]) {
                                    num21 = 1;
                                }
                                else {
                                    num21 = -1;
                                }
                                outInteger[outIdx] = num21 * 100;
                                outIdx++;
                                goto Label_0902;
                            }
                        }
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_0902:
            if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                num20 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
            }
            else {
                double num19;
                if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                    num19 = inHigh[i - 1] - inLow[i - 1];
                }
                else {
                    double num16;
                    if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                        double num17;
                        double num18;
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num18 = inClose[i - 1];
                        }
                        else {
                            num18 = inOpen[i - 1];
                        }
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num17 = inOpen[i - 1];
                        }
                        else {
                            num17 = inClose[i - 1];
                        }
                        num16 = (inHigh[i - 1] - num18) + (num17 - inLow[i - 1]);
                    }
                    else {
                        num16 = 0.0;
                    }
                    num19 = num16;
                }
                num20 = num19;
            }
            if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                num15 = Math.Abs((double)(inClose[EqualTrailingIdx - 1] - inOpen[EqualTrailingIdx - 1]));
            }
            else {
                double num14;
                if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                    num14 = inHigh[EqualTrailingIdx - 1] - inLow[EqualTrailingIdx - 1];
                }
                else {
                    double num11;
                    if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                        double num12;
                        double num13;
                        if (inClose[EqualTrailingIdx - 1] >= inOpen[EqualTrailingIdx - 1]) {
                            num13 = inClose[EqualTrailingIdx - 1];
                        }
                        else {
                            num13 = inOpen[EqualTrailingIdx - 1];
                        }
                        if (inClose[EqualTrailingIdx - 1] >= inOpen[EqualTrailingIdx - 1]) {
                            num12 = inOpen[EqualTrailingIdx - 1];
                        }
                        else {
                            num12 = inClose[EqualTrailingIdx - 1];
                        }
                        num11 = (inHigh[EqualTrailingIdx - 1] - num13) + (num12 - inLow[EqualTrailingIdx - 1]);
                    }
                    else {
                        num11 = 0.0;
                    }
                    num14 = num11;
                }
                num15 = num14;
            }
            EqualPeriodTotal += num20 - num15;
            for (int totIdx = 1; totIdx >= 0; totIdx--) {
                double num5;
                double num10;
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num10 = Math.Abs((double)(inClose[i - totIdx] - inOpen[i - totIdx]));
                }
                else {
                    double num9;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num9 = inHigh[i - totIdx] - inLow[i - totIdx];
                    }
                    else {
                        double num6;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num7;
                            double num8;
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num8 = inClose[i - totIdx];
                            }
                            else {
                                num8 = inOpen[i - totIdx];
                            }
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num7 = inOpen[i - totIdx];
                            }
                            else {
                                num7 = inClose[i - totIdx];
                            }
                            num6 = (inHigh[i - totIdx] - num8) + (num7 - inLow[i - totIdx]);
                        }
                        else {
                            num6 = 0.0;
                        }
                        num9 = num6;
                    }
                    num10 = num9;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num5 = Math.Abs((double)(inClose[BodyLongTrailingIdx - totIdx] - inOpen[BodyLongTrailingIdx - totIdx]));
                }
                else {
                    double num4;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num4 = inHigh[BodyLongTrailingIdx - totIdx] - inLow[BodyLongTrailingIdx - totIdx];
                    }
                    else {
                        double num;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num2;
                            double num3;
                            if (inClose[BodyLongTrailingIdx - totIdx] >= inOpen[BodyLongTrailingIdx - totIdx]) {
                                num3 = inClose[BodyLongTrailingIdx - totIdx];
                            }
                            else {
                                num3 = inOpen[BodyLongTrailingIdx - totIdx];
                            }
                            if (inClose[BodyLongTrailingIdx - totIdx] >= inOpen[BodyLongTrailingIdx - totIdx]) {
                                num2 = inOpen[BodyLongTrailingIdx - totIdx];
                            }
                            else {
                                num2 = inClose[BodyLongTrailingIdx - totIdx];
                            }
                            num = (inHigh[BodyLongTrailingIdx - totIdx] - num3) + (num2 - inLow[BodyLongTrailingIdx - totIdx]);
                        }
                        else {
                            num = 0.0;
                        }
                        num4 = num;
                    }
                    num5 = num4;
                }
                BodyLongPeriodTotal[totIdx] += num10 - num5;
            }
            i++;
            EqualTrailingIdx++;
            BodyLongTrailingIdx++;
            if (i <= endIdx) {
                goto Label_0345;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlDarkCloudCover(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,double optInPenetration,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (optInPenetration == -4E+37) {
                optInPenetration = 0.5;
            }
            else if ((optInPenetration < 0.0) || (optInPenetration > 3E+37)) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlDarkCloudCoverLookback(optInPenetration);
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double BodyLongPeriodTotal = 0.0;
            int BodyLongTrailingIdx = startIdx - Globals.candleSettings[0].avgPeriod;
            int i = BodyLongTrailingIdx;
            while (true) {
                double num22;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num22 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num21;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num21 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num18;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num19;
                            double num20;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num20 = inClose[i - 1];
                            }
                            else {
                                num20 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num19 = inOpen[i - 1];
                            }
                            else {
                                num19 = inClose[i - 1];
                            }
                            num18 = (inHigh[i - 1] - num20) + (num19 - inLow[i - 1]);
                        }
                        else {
                            num18 = 0.0;
                        }
                        num21 = num18;
                    }
                    num22 = num21;
                }
                BodyLongPeriodTotal += num22;
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            Label_01A3:
            if (inClose[i - 1] >= inOpen[i - 1]) {
                double num11;
                double num17;
                if (Globals.candleSettings[0].avgPeriod != 0.0) {
                    num17 = BodyLongPeriodTotal / ((double)Globals.candleSettings[0].avgPeriod);
                }
                else {
                    double num16;
                    if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                        num16 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                    }
                    else {
                        double num15;
                        if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                            num15 = inHigh[i - 1] - inLow[i - 1];
                        }
                        else {
                            double num12;
                            if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                                double num13;
                                double num14;
                                if (inClose[i - 1] >= inOpen[i - 1]) {
                                    num14 = inClose[i - 1];
                                }
                                else {
                                    num14 = inOpen[i - 1];
                                }
                                if (inClose[i - 1] >= inOpen[i - 1]) {
                                    num13 = inOpen[i - 1];
                                }
                                else {
                                    num13 = inClose[i - 1];
                                }
                                num12 = (inHigh[i - 1] - num14) + (num13 - inLow[i - 1]);
                            }
                            else {
                                num12 = 0.0;
                            }
                            num15 = num12;
                        }
                        num16 = num15;
                    }
                    num17 = num16;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                    num11 = 2.0;
                }
                else {
                    num11 = 1.0;
                }
                if ((((Math.Abs((double)(inClose[i - 1] - inOpen[i - 1])) > ((Globals.candleSettings[0].factor * num17) / num11)) && (((inClose[i] < inOpen[i]) ? -1 : 1) == -1)) && ((inOpen[i] > inHigh[i - 1]) && (inClose[i] > inOpen[i - 1]))) && (inClose[i] < (inClose[i - 1] - (Math.Abs((double)(inClose[i - 1] - inOpen[i - 1])) * optInPenetration)))) {
                    outInteger[outIdx] = -100;
                    outIdx++;
                    goto Label_0373;
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_0373:
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
            }
            else {
                double num9;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i - 1] - inLow[i - 1];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num8 = inClose[i - 1];
                        }
                        else {
                            num8 = inOpen[i - 1];
                        }
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num7 = inOpen[i - 1];
                        }
                        else {
                            num7 = inClose[i - 1];
                        }
                        num6 = (inHigh[i - 1] - num8) + (num7 - inLow[i - 1]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[BodyLongTrailingIdx - 1] - inOpen[BodyLongTrailingIdx - 1]));
            }
            else {
                double num4;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num4 = inHigh[BodyLongTrailingIdx - 1] - inLow[BodyLongTrailingIdx - 1];
                }
                else {
                    double num;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[BodyLongTrailingIdx - 1] >= inOpen[BodyLongTrailingIdx - 1]) {
                            num3 = inClose[BodyLongTrailingIdx - 1];
                        }
                        else {
                            num3 = inOpen[BodyLongTrailingIdx - 1];
                        }
                        if (inClose[BodyLongTrailingIdx - 1] >= inOpen[BodyLongTrailingIdx - 1]) {
                            num2 = inOpen[BodyLongTrailingIdx - 1];
                        }
                        else {
                            num2 = inClose[BodyLongTrailingIdx - 1];
                        }
                        num = (inHigh[BodyLongTrailingIdx - 1] - num3) + (num2 - inLow[BodyLongTrailingIdx - 1]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            BodyLongPeriodTotal += num10 - num5;
            i++;
            BodyLongTrailingIdx++;
            if (i <= endIdx) {
                goto Label_01A3;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlDoji(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlDojiLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double BodyDojiPeriodTotal = 0.0;
            int BodyDojiTrailingIdx = startIdx - Globals.candleSettings[3].avgPeriod;
            int i = BodyDojiTrailingIdx;
            while (true) {
                double num22;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                    num22 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num21;
                    if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                        num21 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num18;
                        if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                            double num19;
                            double num20;
                            if (inClose[i] >= inOpen[i]) {
                                num20 = inClose[i];
                            }
                            else {
                                num20 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num19 = inOpen[i];
                            }
                            else {
                                num19 = inClose[i];
                            }
                            num18 = (inHigh[i] - num20) + (num19 - inLow[i]);
                        }
                        else {
                            num18 = 0.0;
                        }
                        num21 = num18;
                    }
                    num22 = num21;
                }
                BodyDojiPeriodTotal += num22;
                i++;
            }
            int outIdx = 0;
            do {
                double num5;
                double num10;
                double num11;
                double num17;
                if (Globals.candleSettings[3].avgPeriod != 0.0) {
                    num17 = BodyDojiPeriodTotal / ((double)Globals.candleSettings[3].avgPeriod);
                }
                else {
                    double num16;
                    if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                        num16 = Math.Abs((double)(inClose[i] - inOpen[i]));
                    }
                    else {
                        double num15;
                        if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                            num15 = inHigh[i] - inLow[i];
                        }
                        else {
                            double num12;
                            if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                                double num13;
                                double num14;
                                if (inClose[i] >= inOpen[i]) {
                                    num14 = inClose[i];
                                }
                                else {
                                    num14 = inOpen[i];
                                }
                                if (inClose[i] >= inOpen[i]) {
                                    num13 = inOpen[i];
                                }
                                else {
                                    num13 = inClose[i];
                                }
                                num12 = (inHigh[i] - num14) + (num13 - inLow[i]);
                            }
                            else {
                                num12 = 0.0;
                            }
                            num15 = num12;
                        }
                        num16 = num15;
                    }
                    num17 = num16;
                }
                if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                    num11 = 2.0;
                }
                else {
                    num11 = 1.0;
                }
                if (Math.Abs((double)(inClose[i] - inOpen[i])) <= ((Globals.candleSettings[3].factor * num17) / num11)) {
                    outInteger[outIdx] = 100;
                    outIdx++;
                }
                else {
                    outInteger[outIdx] = 0;
                    outIdx++;
                }
                if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                    num10 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num9;
                    if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                        num9 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num6;
                        if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                            double num7;
                            double num8;
                            if (inClose[i] >= inOpen[i]) {
                                num8 = inClose[i];
                            }
                            else {
                                num8 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num7 = inOpen[i];
                            }
                            else {
                                num7 = inClose[i];
                            }
                            num6 = (inHigh[i] - num8) + (num7 - inLow[i]);
                        }
                        else {
                            num6 = 0.0;
                        }
                        num9 = num6;
                    }
                    num10 = num9;
                }
                if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                    num5 = Math.Abs((double)(inClose[BodyDojiTrailingIdx] - inOpen[BodyDojiTrailingIdx]));
                }
                else {
                    double num4;
                    if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                        num4 = inHigh[BodyDojiTrailingIdx] - inLow[BodyDojiTrailingIdx];
                    }
                    else {
                        double num;
                        if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                            double num2;
                            double num3;
                            if (inClose[BodyDojiTrailingIdx] >= inOpen[BodyDojiTrailingIdx]) {
                                num3 = inClose[BodyDojiTrailingIdx];
                            }
                            else {
                                num3 = inOpen[BodyDojiTrailingIdx];
                            }
                            if (inClose[BodyDojiTrailingIdx] >= inOpen[BodyDojiTrailingIdx]) {
                                num2 = inOpen[BodyDojiTrailingIdx];
                            }
                            else {
                                num2 = inClose[BodyDojiTrailingIdx];
                            }
                            num = (inHigh[BodyDojiTrailingIdx] - num3) + (num2 - inLow[BodyDojiTrailingIdx]);
                        }
                        else {
                            num = 0.0;
                        }
                        num4 = num;
                    }
                    num5 = num4;
                }
                BodyDojiPeriodTotal += num10 - num5;
                i++;
                BodyDojiTrailingIdx++;
            }
            while (i <= endIdx);
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlDojiStar(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            double num15;
            double num20;
            int num21;
            double num22;
            double num23;
            double num26;
            double num32;
            double num33;
            double num39;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlDojiStarLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double BodyLongPeriodTotal = 0.0;
            double BodyDojiPeriodTotal = 0.0;
            int BodyLongTrailingIdx = (startIdx - 1) - Globals.candleSettings[0].avgPeriod;
            int BodyDojiTrailingIdx = startIdx - Globals.candleSettings[3].avgPeriod;
            int i = BodyLongTrailingIdx;
            while (true) {
                double num49;
                if (i >= (startIdx - 1)) {
                    break;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num49 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num48;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num48 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num45;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num46;
                            double num47;
                            if (inClose[i] >= inOpen[i]) {
                                num47 = inClose[i];
                            }
                            else {
                                num47 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num46 = inOpen[i];
                            }
                            else {
                                num46 = inClose[i];
                            }
                            num45 = (inHigh[i] - num47) + (num46 - inLow[i]);
                        }
                        else {
                            num45 = 0.0;
                        }
                        num48 = num45;
                    }
                    num49 = num48;
                }
                BodyLongPeriodTotal += num49;
                i++;
            }
            i = BodyDojiTrailingIdx;
            while (true) {
                double num44;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                    num44 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num43;
                    if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                        num43 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num40;
                        if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                            double num41;
                            double num42;
                            if (inClose[i] >= inOpen[i]) {
                                num42 = inClose[i];
                            }
                            else {
                                num42 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num41 = inOpen[i];
                            }
                            else {
                                num41 = inClose[i];
                            }
                            num40 = (inHigh[i] - num42) + (num41 - inLow[i]);
                        }
                        else {
                            num40 = 0.0;
                        }
                        num43 = num40;
                    }
                    num44 = num43;
                }
                BodyDojiPeriodTotal += num44;
                i++;
            }
            int outIdx = 0;
            Label_0232:
            if (Globals.candleSettings[0].avgPeriod != 0.0) {
                num39 = BodyLongPeriodTotal / ((double)Globals.candleSettings[0].avgPeriod);
            }
            else {
                double num38;
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num38 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num37;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num37 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num34;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num35;
                            double num36;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num36 = inClose[i - 1];
                            }
                            else {
                                num36 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num35 = inOpen[i - 1];
                            }
                            else {
                                num35 = inClose[i - 1];
                            }
                            num34 = (inHigh[i - 1] - num36) + (num35 - inLow[i - 1]);
                        }
                        else {
                            num34 = 0.0;
                        }
                        num37 = num34;
                    }
                    num38 = num37;
                }
                num39 = num38;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                num33 = 2.0;
            }
            else {
                num33 = 1.0;
            }
            if (Math.Abs((double)(inClose[i - 1] - inOpen[i - 1])) <= ((Globals.candleSettings[0].factor * num39) / num33)) {
                goto Label_0592;
            }
            if (Globals.candleSettings[3].avgPeriod != 0.0) {
                num32 = BodyDojiPeriodTotal / ((double)Globals.candleSettings[3].avgPeriod);
            }
            else {
                double num31;
                if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                    num31 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num30;
                    if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                        num30 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num27;
                        if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                            double num28;
                            double num29;
                            if (inClose[i] >= inOpen[i]) {
                                num29 = inClose[i];
                            }
                            else {
                                num29 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num28 = inOpen[i];
                            }
                            else {
                                num28 = inClose[i];
                            }
                            num27 = (inHigh[i] - num29) + (num28 - inLow[i]);
                        }
                        else {
                            num27 = 0.0;
                        }
                        num30 = num27;
                    }
                    num31 = num30;
                }
                num32 = num31;
            }
            if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                num26 = 2.0;
            }
            else {
                num26 = 1.0;
            }
            if (Math.Abs((double)(inClose[i] - inOpen[i])) > ((Globals.candleSettings[3].factor * num32) / num26)) {
                goto Label_0592;
            }
            if (inClose[i - 1] >= inOpen[i - 1]) {
                double num24;
                double num25;
                if (inOpen[i] < inClose[i]) {
                    num25 = inOpen[i];
                }
                else {
                    num25 = inClose[i];
                }
                if (inOpen[i - 1] > inClose[i - 1]) {
                    num24 = inOpen[i - 1];
                }
                else {
                    num24 = inClose[i - 1];
                }
                if (num25 > num24) {
                    goto Label_056D;
                }
            }
            if (((inClose[i - 1] < inOpen[i - 1]) ? -1 : 1) != -1) {
                goto Label_0592;
            }
            if (inOpen[i] > inClose[i]) {
                num23 = inOpen[i];
            }
            else {
                num23 = inClose[i];
            }
            if (inOpen[i - 1] < inClose[i - 1]) {
                num22 = inOpen[i - 1];
            }
            else {
                num22 = inClose[i - 1];
            }
            if (num23 >= num22) {
                goto Label_0592;
            }
            Label_056D:
            if (inClose[i - 1] >= inOpen[i - 1]) {
                num21 = 1;
            }
            else {
                num21 = -1;
            }
            outInteger[outIdx] = -num21 * 100;
            outIdx++;
            goto Label_059B;
            Label_0592:
            outInteger[outIdx] = 0;
            outIdx++;
            Label_059B:
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num20 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
            }
            else {
                double num19;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num19 = inHigh[i - 1] - inLow[i - 1];
                }
                else {
                    double num16;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num17;
                        double num18;
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num18 = inClose[i - 1];
                        }
                        else {
                            num18 = inOpen[i - 1];
                        }
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num17 = inOpen[i - 1];
                        }
                        else {
                            num17 = inClose[i - 1];
                        }
                        num16 = (inHigh[i - 1] - num18) + (num17 - inLow[i - 1]);
                    }
                    else {
                        num16 = 0.0;
                    }
                    num19 = num16;
                }
                num20 = num19;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num15 = Math.Abs((double)(inClose[BodyLongTrailingIdx] - inOpen[BodyLongTrailingIdx]));
            }
            else {
                double num14;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num14 = inHigh[BodyLongTrailingIdx] - inLow[BodyLongTrailingIdx];
                }
                else {
                    double num11;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num12;
                        double num13;
                        if (inClose[BodyLongTrailingIdx] >= inOpen[BodyLongTrailingIdx]) {
                            num13 = inClose[BodyLongTrailingIdx];
                        }
                        else {
                            num13 = inOpen[BodyLongTrailingIdx];
                        }
                        if (inClose[BodyLongTrailingIdx] >= inOpen[BodyLongTrailingIdx]) {
                            num12 = inOpen[BodyLongTrailingIdx];
                        }
                        else {
                            num12 = inClose[BodyLongTrailingIdx];
                        }
                        num11 = (inHigh[BodyLongTrailingIdx] - num13) + (num12 - inLow[BodyLongTrailingIdx]);
                    }
                    else {
                        num11 = 0.0;
                    }
                    num14 = num11;
                }
                num15 = num14;
            }
            BodyLongPeriodTotal += num20 - num15;
            if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num9;
                if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i] - inLow[i];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i] >= inOpen[i]) {
                            num8 = inClose[i];
                        }
                        else {
                            num8 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num7 = inOpen[i];
                        }
                        else {
                            num7 = inClose[i];
                        }
                        num6 = (inHigh[i] - num8) + (num7 - inLow[i]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[BodyDojiTrailingIdx] - inOpen[BodyDojiTrailingIdx]));
            }
            else {
                double num4;
                if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                    num4 = inHigh[BodyDojiTrailingIdx] - inLow[BodyDojiTrailingIdx];
                }
                else {
                    double num;
                    if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[BodyDojiTrailingIdx] >= inOpen[BodyDojiTrailingIdx]) {
                            num3 = inClose[BodyDojiTrailingIdx];
                        }
                        else {
                            num3 = inOpen[BodyDojiTrailingIdx];
                        }
                        if (inClose[BodyDojiTrailingIdx] >= inOpen[BodyDojiTrailingIdx]) {
                            num2 = inOpen[BodyDojiTrailingIdx];
                        }
                        else {
                            num2 = inClose[BodyDojiTrailingIdx];
                        }
                        num = (inHigh[BodyDojiTrailingIdx] - num3) + (num2 - inLow[BodyDojiTrailingIdx]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            BodyDojiPeriodTotal += num10 - num5;
            i++;
            BodyLongTrailingIdx++;
            BodyDojiTrailingIdx++;
            if (i <= endIdx) {
                goto Label_0232;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlDragonflyDoji(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            double num15;
            double num20;
            double num37;
            double num43;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlDragonflyDojiLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double BodyDojiPeriodTotal = 0.0;
            int BodyDojiTrailingIdx = startIdx - Globals.candleSettings[3].avgPeriod;
            double ShadowVeryShortPeriodTotal = 0.0;
            int ShadowVeryShortTrailingIdx = startIdx - Globals.candleSettings[7].avgPeriod;
            int i = BodyDojiTrailingIdx;
            while (true) {
                double num53;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                    num53 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num52;
                    if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                        num52 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num49;
                        if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                            double num50;
                            double num51;
                            if (inClose[i] >= inOpen[i]) {
                                num51 = inClose[i];
                            }
                            else {
                                num51 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num50 = inOpen[i];
                            }
                            else {
                                num50 = inClose[i];
                            }
                            num49 = (inHigh[i] - num51) + (num50 - inLow[i]);
                        }
                        else {
                            num49 = 0.0;
                        }
                        num52 = num49;
                    }
                    num53 = num52;
                }
                BodyDojiPeriodTotal += num53;
                i++;
            }
            i = ShadowVeryShortTrailingIdx;
            while (true) {
                double num48;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num48 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num47;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num47 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num44;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num45;
                            double num46;
                            if (inClose[i] >= inOpen[i]) {
                                num46 = inClose[i];
                            }
                            else {
                                num46 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num45 = inOpen[i];
                            }
                            else {
                                num45 = inClose[i];
                            }
                            num44 = (inHigh[i] - num46) + (num45 - inLow[i]);
                        }
                        else {
                            num44 = 0.0;
                        }
                        num47 = num44;
                    }
                    num48 = num47;
                }
                ShadowVeryShortPeriodTotal += num48;
                i++;
            }
            int outIdx = 0;
            Label_022E:
            if (Globals.candleSettings[3].avgPeriod != 0.0) {
                num43 = BodyDojiPeriodTotal / ((double)Globals.candleSettings[3].avgPeriod);
            }
            else {
                double num42;
                if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                    num42 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num41;
                    if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                        num41 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num38;
                        if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                            double num39;
                            double num40;
                            if (inClose[i] >= inOpen[i]) {
                                num40 = inClose[i];
                            }
                            else {
                                num40 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num39 = inOpen[i];
                            }
                            else {
                                num39 = inClose[i];
                            }
                            num38 = (inHigh[i] - num40) + (num39 - inLow[i]);
                        }
                        else {
                            num38 = 0.0;
                        }
                        num41 = num38;
                    }
                    num42 = num41;
                }
                num43 = num42;
            }
            if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                num37 = 2.0;
            }
            else {
                num37 = 1.0;
            }
            if (Math.Abs((double)(inClose[i] - inOpen[i])) <= ((Globals.candleSettings[3].factor * num43) / num37)) {
                double num29;
                double num35;
                double num36;
                if (inClose[i] >= inOpen[i]) {
                    num36 = inClose[i];
                }
                else {
                    num36 = inOpen[i];
                }
                if (Globals.candleSettings[7].avgPeriod != 0.0) {
                    num35 = ShadowVeryShortPeriodTotal / ((double)Globals.candleSettings[7].avgPeriod);
                }
                else {
                    double num34;
                    if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                        num34 = Math.Abs((double)(inClose[i] - inOpen[i]));
                    }
                    else {
                        double num33;
                        if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                            num33 = inHigh[i] - inLow[i];
                        }
                        else {
                            double num30;
                            if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                double num31;
                                double num32;
                                if (inClose[i] >= inOpen[i]) {
                                    num32 = inClose[i];
                                }
                                else {
                                    num32 = inOpen[i];
                                }
                                if (inClose[i] >= inOpen[i]) {
                                    num31 = inOpen[i];
                                }
                                else {
                                    num31 = inClose[i];
                                }
                                num30 = (inHigh[i] - num32) + (num31 - inLow[i]);
                            }
                            else {
                                num30 = 0.0;
                            }
                            num33 = num30;
                        }
                        num34 = num33;
                    }
                    num35 = num34;
                }
                if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                    num29 = 2.0;
                }
                else {
                    num29 = 1.0;
                }
                if ((inHigh[i] - num36) < ((Globals.candleSettings[7].factor * num35) / num29)) {
                    double num21;
                    double num27;
                    double num28;
                    if (inClose[i] >= inOpen[i]) {
                        num28 = inOpen[i];
                    }
                    else {
                        num28 = inClose[i];
                    }
                    if (Globals.candleSettings[7].avgPeriod != 0.0) {
                        num27 = ShadowVeryShortPeriodTotal / ((double)Globals.candleSettings[7].avgPeriod);
                    }
                    else {
                        double num26;
                        if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                            num26 = Math.Abs((double)(inClose[i] - inOpen[i]));
                        }
                        else {
                            double num25;
                            if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                                num25 = inHigh[i] - inLow[i];
                            }
                            else {
                                double num22;
                                if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                    double num23;
                                    double num24;
                                    if (inClose[i] >= inOpen[i]) {
                                        num24 = inClose[i];
                                    }
                                    else {
                                        num24 = inOpen[i];
                                    }
                                    if (inClose[i] >= inOpen[i]) {
                                        num23 = inOpen[i];
                                    }
                                    else {
                                        num23 = inClose[i];
                                    }
                                    num22 = (inHigh[i] - num24) + (num23 - inLow[i]);
                                }
                                else {
                                    num22 = 0.0;
                                }
                                num25 = num22;
                            }
                            num26 = num25;
                        }
                        num27 = num26;
                    }
                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                        num21 = 2.0;
                    }
                    else {
                        num21 = 1.0;
                    }
                    if ((num28 - inLow[i]) > ((Globals.candleSettings[7].factor * num27) / num21)) {
                        outInteger[outIdx] = 100;
                        outIdx++;
                        goto Label_0619;
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_0619:
            if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                num20 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num19;
                if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                    num19 = inHigh[i] - inLow[i];
                }
                else {
                    double num16;
                    if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                        double num17;
                        double num18;
                        if (inClose[i] >= inOpen[i]) {
                            num18 = inClose[i];
                        }
                        else {
                            num18 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num17 = inOpen[i];
                        }
                        else {
                            num17 = inClose[i];
                        }
                        num16 = (inHigh[i] - num18) + (num17 - inLow[i]);
                    }
                    else {
                        num16 = 0.0;
                    }
                    num19 = num16;
                }
                num20 = num19;
            }
            if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                num15 = Math.Abs((double)(inClose[BodyDojiTrailingIdx] - inOpen[BodyDojiTrailingIdx]));
            }
            else {
                double num14;
                if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                    num14 = inHigh[BodyDojiTrailingIdx] - inLow[BodyDojiTrailingIdx];
                }
                else {
                    double num11;
                    if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                        double num12;
                        double num13;
                        if (inClose[BodyDojiTrailingIdx] >= inOpen[BodyDojiTrailingIdx]) {
                            num13 = inClose[BodyDojiTrailingIdx];
                        }
                        else {
                            num13 = inOpen[BodyDojiTrailingIdx];
                        }
                        if (inClose[BodyDojiTrailingIdx] >= inOpen[BodyDojiTrailingIdx]) {
                            num12 = inOpen[BodyDojiTrailingIdx];
                        }
                        else {
                            num12 = inClose[BodyDojiTrailingIdx];
                        }
                        num11 = (inHigh[BodyDojiTrailingIdx] - num13) + (num12 - inLow[BodyDojiTrailingIdx]);
                    }
                    else {
                        num11 = 0.0;
                    }
                    num14 = num11;
                }
                num15 = num14;
            }
            BodyDojiPeriodTotal += num20 - num15;
            if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num9;
                if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i] - inLow[i];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i] >= inOpen[i]) {
                            num8 = inClose[i];
                        }
                        else {
                            num8 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num7 = inOpen[i];
                        }
                        else {
                            num7 = inClose[i];
                        }
                        num6 = (inHigh[i] - num8) + (num7 - inLow[i]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[ShadowVeryShortTrailingIdx] - inOpen[ShadowVeryShortTrailingIdx]));
            }
            else {
                double num4;
                if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                    num4 = inHigh[ShadowVeryShortTrailingIdx] - inLow[ShadowVeryShortTrailingIdx];
                }
                else {
                    double num;
                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[ShadowVeryShortTrailingIdx] >= inOpen[ShadowVeryShortTrailingIdx]) {
                            num3 = inClose[ShadowVeryShortTrailingIdx];
                        }
                        else {
                            num3 = inOpen[ShadowVeryShortTrailingIdx];
                        }
                        if (inClose[ShadowVeryShortTrailingIdx] >= inOpen[ShadowVeryShortTrailingIdx]) {
                            num2 = inOpen[ShadowVeryShortTrailingIdx];
                        }
                        else {
                            num2 = inClose[ShadowVeryShortTrailingIdx];
                        }
                        num = (inHigh[ShadowVeryShortTrailingIdx] - num3) + (num2 - inLow[ShadowVeryShortTrailingIdx]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            ShadowVeryShortPeriodTotal += num10 - num5;
            i++;
            BodyDojiTrailingIdx++;
            ShadowVeryShortTrailingIdx++;
            if (i <= endIdx) {
                goto Label_022E;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlEngulfing(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlEngulfingLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            int i = startIdx;
            int outIdx = 0;
            do {
                if ((((inClose[i] >= inOpen[i]) && (((inClose[i - 1] < inOpen[i - 1]) ? -1 : 1) == -1)) && ((inClose[i] > inOpen[i - 1]) && (inOpen[i] < inClose[i - 1]))) || (((((inClose[i] < inOpen[i]) ? -1 : 1) == -1) && (inClose[i - 1] >= inOpen[i - 1])) && ((inOpen[i] > inClose[i - 1]) && (inClose[i] < inOpen[i - 1])))) {
                    int num;
                    if (inClose[i] >= inOpen[i]) {
                        num = 1;
                    }
                    else {
                        num = -1;
                    }
                    outInteger[outIdx] = num * 100;
                    outIdx++;
                }
                else {
                    outInteger[outIdx] = 0;
                    outIdx++;
                }
                i++;
            }
            while (i <= endIdx);
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlEveningDojiStar(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,double optInPenetration,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            double num15;
            double num20;
            double num25;
            double num30;
            double num47;
            double num53;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (optInPenetration == -4E+37) {
                optInPenetration = 0.3;
            }
            else if ((optInPenetration < 0.0) || (optInPenetration > 3E+37)) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlEveningDojiStarLookback(optInPenetration);
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double BodyLongPeriodTotal = 0.0;
            double BodyDojiPeriodTotal = 0.0;
            double BodyShortPeriodTotal = 0.0;
            int BodyLongTrailingIdx = (startIdx - 2) - Globals.candleSettings[0].avgPeriod;
            int BodyDojiTrailingIdx = (startIdx - 1) - Globals.candleSettings[3].avgPeriod;
            int BodyShortTrailingIdx = startIdx - Globals.candleSettings[2].avgPeriod;
            int i = BodyLongTrailingIdx;
            while (true) {
                double num68;
                if (i >= (startIdx - 2)) {
                    break;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num68 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num67;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num67 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num64;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num65;
                            double num66;
                            if (inClose[i] >= inOpen[i]) {
                                num66 = inClose[i];
                            }
                            else {
                                num66 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num65 = inOpen[i];
                            }
                            else {
                                num65 = inClose[i];
                            }
                            num64 = (inHigh[i] - num66) + (num65 - inLow[i]);
                        }
                        else {
                            num64 = 0.0;
                        }
                        num67 = num64;
                    }
                    num68 = num67;
                }
                BodyLongPeriodTotal += num68;
                i++;
            }
            i = BodyDojiTrailingIdx;
            while (true) {
                double num63;
                if (i >= (startIdx - 1)) {
                    break;
                }
                if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                    num63 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num62;
                    if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                        num62 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num59;
                        if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                            double num60;
                            double num61;
                            if (inClose[i] >= inOpen[i]) {
                                num61 = inClose[i];
                            }
                            else {
                                num61 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num60 = inOpen[i];
                            }
                            else {
                                num60 = inClose[i];
                            }
                            num59 = (inHigh[i] - num61) + (num60 - inLow[i]);
                        }
                        else {
                            num59 = 0.0;
                        }
                        num62 = num59;
                    }
                    num63 = num62;
                }
                BodyDojiPeriodTotal += num63;
                i++;
            }
            i = BodyShortTrailingIdx;
            while (true) {
                double num58;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                    num58 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num57;
                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                        num57 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num54;
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            double num55;
                            double num56;
                            if (inClose[i] >= inOpen[i]) {
                                num56 = inClose[i];
                            }
                            else {
                                num56 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num55 = inOpen[i];
                            }
                            else {
                                num55 = inClose[i];
                            }
                            num54 = (inHigh[i] - num56) + (num55 - inLow[i]);
                        }
                        else {
                            num54 = 0.0;
                        }
                        num57 = num54;
                    }
                    num58 = num57;
                }
                BodyShortPeriodTotal += num58;
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            Label_035B:
            if (Globals.candleSettings[0].avgPeriod != 0.0) {
                num53 = BodyLongPeriodTotal / ((double)Globals.candleSettings[0].avgPeriod);
            }
            else {
                double num52;
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num52 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                }
                else {
                    double num51;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num51 = inHigh[i - 2] - inLow[i - 2];
                    }
                    else {
                        double num48;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num49;
                            double num50;
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num50 = inClose[i - 2];
                            }
                            else {
                                num50 = inOpen[i - 2];
                            }
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num49 = inOpen[i - 2];
                            }
                            else {
                                num49 = inClose[i - 2];
                            }
                            num48 = (inHigh[i - 2] - num50) + (num49 - inLow[i - 2]);
                        }
                        else {
                            num48 = 0.0;
                        }
                        num51 = num48;
                    }
                    num52 = num51;
                }
                num53 = num52;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                num47 = 2.0;
            }
            else {
                num47 = 1.0;
            }
            if ((Math.Abs((double)(inClose[i - 2] - inOpen[i - 2])) > ((Globals.candleSettings[0].factor * num53) / num47)) && (inClose[i - 2] >= inOpen[i - 2])) {
                double num40;
                double num46;
                if (Globals.candleSettings[3].avgPeriod != 0.0) {
                    num46 = BodyDojiPeriodTotal / ((double)Globals.candleSettings[3].avgPeriod);
                }
                else {
                    double num45;
                    if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                        num45 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                    }
                    else {
                        double num44;
                        if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                            num44 = inHigh[i - 1] - inLow[i - 1];
                        }
                        else {
                            double num41;
                            if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                                double num42;
                                double num43;
                                if (inClose[i - 1] >= inOpen[i - 1]) {
                                    num43 = inClose[i - 1];
                                }
                                else {
                                    num43 = inOpen[i - 1];
                                }
                                if (inClose[i - 1] >= inOpen[i - 1]) {
                                    num42 = inOpen[i - 1];
                                }
                                else {
                                    num42 = inClose[i - 1];
                                }
                                num41 = (inHigh[i - 1] - num43) + (num42 - inLow[i - 1]);
                            }
                            else {
                                num41 = 0.0;
                            }
                            num44 = num41;
                        }
                        num45 = num44;
                    }
                    num46 = num45;
                }
                if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                    num40 = 2.0;
                }
                else {
                    num40 = 1.0;
                }
                if (Math.Abs((double)(inClose[i - 1] - inOpen[i - 1])) <= ((Globals.candleSettings[3].factor * num46) / num40)) {
                    double num38;
                    double num39;
                    if (inOpen[i - 1] < inClose[i - 1]) {
                        num39 = inOpen[i - 1];
                    }
                    else {
                        num39 = inClose[i - 1];
                    }
                    if (inOpen[i - 2] > inClose[i - 2]) {
                        num38 = inOpen[i - 2];
                    }
                    else {
                        num38 = inClose[i - 2];
                    }
                    if (num39 > num38) {
                        double num31;
                        double num37;
                        if (Globals.candleSettings[2].avgPeriod != 0.0) {
                            num37 = BodyShortPeriodTotal / ((double)Globals.candleSettings[2].avgPeriod);
                        }
                        else {
                            double num36;
                            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                                num36 = Math.Abs((double)(inClose[i] - inOpen[i]));
                            }
                            else {
                                double num35;
                                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                                    num35 = inHigh[i] - inLow[i];
                                }
                                else {
                                    double num32;
                                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                                        double num33;
                                        double num34;
                                        if (inClose[i] >= inOpen[i]) {
                                            num34 = inClose[i];
                                        }
                                        else {
                                            num34 = inOpen[i];
                                        }
                                        if (inClose[i] >= inOpen[i]) {
                                            num33 = inOpen[i];
                                        }
                                        else {
                                            num33 = inClose[i];
                                        }
                                        num32 = (inHigh[i] - num34) + (num33 - inLow[i]);
                                    }
                                    else {
                                        num32 = 0.0;
                                    }
                                    num35 = num32;
                                }
                                num36 = num35;
                            }
                            num37 = num36;
                        }
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            num31 = 2.0;
                        }
                        else {
                            num31 = 1.0;
                        }
                        if (((Math.Abs((double)(inClose[i] - inOpen[i])) > ((Globals.candleSettings[2].factor * num37) / num31)) && (((inClose[i] < inOpen[i]) ? -1 : 1) == -1)) && (inClose[i] < (inClose[i - 2] - (Math.Abs((double)(inClose[i - 2] - inOpen[i - 2])) * optInPenetration)))) {
                            outInteger[outIdx] = -100;
                            outIdx++;
                            goto Label_0800;
                        }
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_0800:
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num30 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
            }
            else {
                double num29;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num29 = inHigh[i - 2] - inLow[i - 2];
                }
                else {
                    double num26;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num27;
                        double num28;
                        if (inClose[i - 2] >= inOpen[i - 2]) {
                            num28 = inClose[i - 2];
                        }
                        else {
                            num28 = inOpen[i - 2];
                        }
                        if (inClose[i - 2] >= inOpen[i - 2]) {
                            num27 = inOpen[i - 2];
                        }
                        else {
                            num27 = inClose[i - 2];
                        }
                        num26 = (inHigh[i - 2] - num28) + (num27 - inLow[i - 2]);
                    }
                    else {
                        num26 = 0.0;
                    }
                    num29 = num26;
                }
                num30 = num29;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num25 = Math.Abs((double)(inClose[BodyLongTrailingIdx] - inOpen[BodyLongTrailingIdx]));
            }
            else {
                double num24;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num24 = inHigh[BodyLongTrailingIdx] - inLow[BodyLongTrailingIdx];
                }
                else {
                    double num21;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num22;
                        double num23;
                        if (inClose[BodyLongTrailingIdx] >= inOpen[BodyLongTrailingIdx]) {
                            num23 = inClose[BodyLongTrailingIdx];
                        }
                        else {
                            num23 = inOpen[BodyLongTrailingIdx];
                        }
                        if (inClose[BodyLongTrailingIdx] >= inOpen[BodyLongTrailingIdx]) {
                            num22 = inOpen[BodyLongTrailingIdx];
                        }
                        else {
                            num22 = inClose[BodyLongTrailingIdx];
                        }
                        num21 = (inHigh[BodyLongTrailingIdx] - num23) + (num22 - inLow[BodyLongTrailingIdx]);
                    }
                    else {
                        num21 = 0.0;
                    }
                    num24 = num21;
                }
                num25 = num24;
            }
            BodyLongPeriodTotal += num30 - num25;
            if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                num20 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
            }
            else {
                double num19;
                if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                    num19 = inHigh[i - 1] - inLow[i - 1];
                }
                else {
                    double num16;
                    if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                        double num17;
                        double num18;
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num18 = inClose[i - 1];
                        }
                        else {
                            num18 = inOpen[i - 1];
                        }
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num17 = inOpen[i - 1];
                        }
                        else {
                            num17 = inClose[i - 1];
                        }
                        num16 = (inHigh[i - 1] - num18) + (num17 - inLow[i - 1]);
                    }
                    else {
                        num16 = 0.0;
                    }
                    num19 = num16;
                }
                num20 = num19;
            }
            if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                num15 = Math.Abs((double)(inClose[BodyDojiTrailingIdx] - inOpen[BodyDojiTrailingIdx]));
            }
            else {
                double num14;
                if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                    num14 = inHigh[BodyDojiTrailingIdx] - inLow[BodyDojiTrailingIdx];
                }
                else {
                    double num11;
                    if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                        double num12;
                        double num13;
                        if (inClose[BodyDojiTrailingIdx] >= inOpen[BodyDojiTrailingIdx]) {
                            num13 = inClose[BodyDojiTrailingIdx];
                        }
                        else {
                            num13 = inOpen[BodyDojiTrailingIdx];
                        }
                        if (inClose[BodyDojiTrailingIdx] >= inOpen[BodyDojiTrailingIdx]) {
                            num12 = inOpen[BodyDojiTrailingIdx];
                        }
                        else {
                            num12 = inClose[BodyDojiTrailingIdx];
                        }
                        num11 = (inHigh[BodyDojiTrailingIdx] - num13) + (num12 - inLow[BodyDojiTrailingIdx]);
                    }
                    else {
                        num11 = 0.0;
                    }
                    num14 = num11;
                }
                num15 = num14;
            }
            BodyDojiPeriodTotal += num20 - num15;
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num9;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i] - inLow[i];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i] >= inOpen[i]) {
                            num8 = inClose[i];
                        }
                        else {
                            num8 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num7 = inOpen[i];
                        }
                        else {
                            num7 = inClose[i];
                        }
                        num6 = (inHigh[i] - num8) + (num7 - inLow[i]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[BodyShortTrailingIdx] - inOpen[BodyShortTrailingIdx]));
            }
            else {
                double num4;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num4 = inHigh[BodyShortTrailingIdx] - inLow[BodyShortTrailingIdx];
                }
                else {
                    double num;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[BodyShortTrailingIdx] >= inOpen[BodyShortTrailingIdx]) {
                            num3 = inClose[BodyShortTrailingIdx];
                        }
                        else {
                            num3 = inOpen[BodyShortTrailingIdx];
                        }
                        if (inClose[BodyShortTrailingIdx] >= inOpen[BodyShortTrailingIdx]) {
                            num2 = inOpen[BodyShortTrailingIdx];
                        }
                        else {
                            num2 = inClose[BodyShortTrailingIdx];
                        }
                        num = (inHigh[BodyShortTrailingIdx] - num3) + (num2 - inLow[BodyShortTrailingIdx]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            BodyShortPeriodTotal += num10 - num5;
            i++;
            BodyLongTrailingIdx++;
            BodyDojiTrailingIdx++;
            BodyShortTrailingIdx++;
            if (i <= endIdx) {
                goto Label_035B;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlEveningStar(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,double optInPenetration,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            double num15;
            double num20;
            double num25;
            double num30;
            double num47;
            double num53;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (optInPenetration == -4E+37) {
                optInPenetration = 0.3;
            }
            else if ((optInPenetration < 0.0) || (optInPenetration > 3E+37)) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlEveningStarLookback(optInPenetration);
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double BodyLongPeriodTotal = 0.0;
            double BodyShortPeriodTotal = 0.0;
            double BodyShortPeriodTotal2 = 0.0;
            int BodyLongTrailingIdx = (startIdx - 2) - Globals.candleSettings[0].avgPeriod;
            int BodyShortTrailingIdx = (startIdx - 1) - Globals.candleSettings[2].avgPeriod;
            int i = BodyLongTrailingIdx;
            while (true) {
                double num68;
                if (i >= (startIdx - 2)) {
                    break;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num68 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num67;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num67 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num64;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num65;
                            double num66;
                            if (inClose[i] >= inOpen[i]) {
                                num66 = inClose[i];
                            }
                            else {
                                num66 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num65 = inOpen[i];
                            }
                            else {
                                num65 = inClose[i];
                            }
                            num64 = (inHigh[i] - num66) + (num65 - inLow[i]);
                        }
                        else {
                            num64 = 0.0;
                        }
                        num67 = num64;
                    }
                    num68 = num67;
                }
                BodyLongPeriodTotal += num68;
                i++;
            }
            i = BodyShortTrailingIdx;
            while (true) {
                double num58;
                double num63;
                if (i >= (startIdx - 1)) {
                    break;
                }
                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                    num63 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num62;
                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                        num62 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num59;
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            double num60;
                            double num61;
                            if (inClose[i] >= inOpen[i]) {
                                num61 = inClose[i];
                            }
                            else {
                                num61 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num60 = inOpen[i];
                            }
                            else {
                                num60 = inClose[i];
                            }
                            num59 = (inHigh[i] - num61) + (num60 - inLow[i]);
                        }
                        else {
                            num59 = 0.0;
                        }
                        num62 = num59;
                    }
                    num63 = num62;
                }
                BodyShortPeriodTotal += num63;
                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                    num58 = Math.Abs((double)(inClose[i + 1] - inOpen[i + 1]));
                }
                else {
                    double num57;
                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                        num57 = inHigh[i + 1] - inLow[i + 1];
                    }
                    else {
                        double num54;
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            double num55;
                            double num56;
                            if (inClose[i + 1] >= inOpen[i + 1]) {
                                num56 = inClose[i + 1];
                            }
                            else {
                                num56 = inOpen[i + 1];
                            }
                            if (inClose[i + 1] >= inOpen[i + 1]) {
                                num55 = inOpen[i + 1];
                            }
                            else {
                                num55 = inClose[i + 1];
                            }
                            num54 = (inHigh[i + 1] - num56) + (num55 - inLow[i + 1]);
                        }
                        else {
                            num54 = 0.0;
                        }
                        num57 = num54;
                    }
                    num58 = num57;
                }
                BodyShortPeriodTotal2 += num58;
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            Label_0353:
            if (Globals.candleSettings[0].avgPeriod != 0.0) {
                num53 = BodyLongPeriodTotal / ((double)Globals.candleSettings[0].avgPeriod);
            }
            else {
                double num52;
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num52 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                }
                else {
                    double num51;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num51 = inHigh[i - 2] - inLow[i - 2];
                    }
                    else {
                        double num48;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num49;
                            double num50;
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num50 = inClose[i - 2];
                            }
                            else {
                                num50 = inOpen[i - 2];
                            }
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num49 = inOpen[i - 2];
                            }
                            else {
                                num49 = inClose[i - 2];
                            }
                            num48 = (inHigh[i - 2] - num50) + (num49 - inLow[i - 2]);
                        }
                        else {
                            num48 = 0.0;
                        }
                        num51 = num48;
                    }
                    num52 = num51;
                }
                num53 = num52;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                num47 = 2.0;
            }
            else {
                num47 = 1.0;
            }
            if ((Math.Abs((double)(inClose[i - 2] - inOpen[i - 2])) > ((Globals.candleSettings[0].factor * num53) / num47)) && (inClose[i - 2] >= inOpen[i - 2])) {
                double num40;
                double num46;
                if (Globals.candleSettings[2].avgPeriod != 0.0) {
                    num46 = BodyShortPeriodTotal / ((double)Globals.candleSettings[2].avgPeriod);
                }
                else {
                    double num45;
                    if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                        num45 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                    }
                    else {
                        double num44;
                        if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                            num44 = inHigh[i - 1] - inLow[i - 1];
                        }
                        else {
                            double num41;
                            if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                                double num42;
                                double num43;
                                if (inClose[i - 1] >= inOpen[i - 1]) {
                                    num43 = inClose[i - 1];
                                }
                                else {
                                    num43 = inOpen[i - 1];
                                }
                                if (inClose[i - 1] >= inOpen[i - 1]) {
                                    num42 = inOpen[i - 1];
                                }
                                else {
                                    num42 = inClose[i - 1];
                                }
                                num41 = (inHigh[i - 1] - num43) + (num42 - inLow[i - 1]);
                            }
                            else {
                                num41 = 0.0;
                            }
                            num44 = num41;
                        }
                        num45 = num44;
                    }
                    num46 = num45;
                }
                if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                    num40 = 2.0;
                }
                else {
                    num40 = 1.0;
                }
                if (Math.Abs((double)(inClose[i - 1] - inOpen[i - 1])) <= ((Globals.candleSettings[2].factor * num46) / num40)) {
                    double num38;
                    double num39;
                    if (inOpen[i - 1] < inClose[i - 1]) {
                        num39 = inOpen[i - 1];
                    }
                    else {
                        num39 = inClose[i - 1];
                    }
                    if (inOpen[i - 2] > inClose[i - 2]) {
                        num38 = inOpen[i - 2];
                    }
                    else {
                        num38 = inClose[i - 2];
                    }
                    if (num39 > num38) {
                        double num31;
                        double num37;
                        if (Globals.candleSettings[2].avgPeriod != 0.0) {
                            num37 = BodyShortPeriodTotal2 / ((double)Globals.candleSettings[2].avgPeriod);
                        }
                        else {
                            double num36;
                            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                                num36 = Math.Abs((double)(inClose[i] - inOpen[i]));
                            }
                            else {
                                double num35;
                                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                                    num35 = inHigh[i] - inLow[i];
                                }
                                else {
                                    double num32;
                                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                                        double num33;
                                        double num34;
                                        if (inClose[i] >= inOpen[i]) {
                                            num34 = inClose[i];
                                        }
                                        else {
                                            num34 = inOpen[i];
                                        }
                                        if (inClose[i] >= inOpen[i]) {
                                            num33 = inOpen[i];
                                        }
                                        else {
                                            num33 = inClose[i];
                                        }
                                        num32 = (inHigh[i] - num34) + (num33 - inLow[i]);
                                    }
                                    else {
                                        num32 = 0.0;
                                    }
                                    num35 = num32;
                                }
                                num36 = num35;
                            }
                            num37 = num36;
                        }
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            num31 = 2.0;
                        }
                        else {
                            num31 = 1.0;
                        }
                        if (((Math.Abs((double)(inClose[i] - inOpen[i])) > ((Globals.candleSettings[2].factor * num37) / num31)) && (((inClose[i] < inOpen[i]) ? -1 : 1) == -1)) && (inClose[i] < (inClose[i - 2] - (Math.Abs((double)(inClose[i - 2] - inOpen[i - 2])) * optInPenetration)))) {
                            outInteger[outIdx] = -100;
                            outIdx++;
                            goto Label_07F2;
                        }
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_07F2:
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num30 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
            }
            else {
                double num29;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num29 = inHigh[i - 2] - inLow[i - 2];
                }
                else {
                    double num26;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num27;
                        double num28;
                        if (inClose[i - 2] >= inOpen[i - 2]) {
                            num28 = inClose[i - 2];
                        }
                        else {
                            num28 = inOpen[i - 2];
                        }
                        if (inClose[i - 2] >= inOpen[i - 2]) {
                            num27 = inOpen[i - 2];
                        }
                        else {
                            num27 = inClose[i - 2];
                        }
                        num26 = (inHigh[i - 2] - num28) + (num27 - inLow[i - 2]);
                    }
                    else {
                        num26 = 0.0;
                    }
                    num29 = num26;
                }
                num30 = num29;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num25 = Math.Abs((double)(inClose[BodyLongTrailingIdx] - inOpen[BodyLongTrailingIdx]));
            }
            else {
                double num24;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num24 = inHigh[BodyLongTrailingIdx] - inLow[BodyLongTrailingIdx];
                }
                else {
                    double num21;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num22;
                        double num23;
                        if (inClose[BodyLongTrailingIdx] >= inOpen[BodyLongTrailingIdx]) {
                            num23 = inClose[BodyLongTrailingIdx];
                        }
                        else {
                            num23 = inOpen[BodyLongTrailingIdx];
                        }
                        if (inClose[BodyLongTrailingIdx] >= inOpen[BodyLongTrailingIdx]) {
                            num22 = inOpen[BodyLongTrailingIdx];
                        }
                        else {
                            num22 = inClose[BodyLongTrailingIdx];
                        }
                        num21 = (inHigh[BodyLongTrailingIdx] - num23) + (num22 - inLow[BodyLongTrailingIdx]);
                    }
                    else {
                        num21 = 0.0;
                    }
                    num24 = num21;
                }
                num25 = num24;
            }
            BodyLongPeriodTotal += num30 - num25;
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num20 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
            }
            else {
                double num19;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num19 = inHigh[i - 1] - inLow[i - 1];
                }
                else {
                    double num16;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num17;
                        double num18;
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num18 = inClose[i - 1];
                        }
                        else {
                            num18 = inOpen[i - 1];
                        }
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num17 = inOpen[i - 1];
                        }
                        else {
                            num17 = inClose[i - 1];
                        }
                        num16 = (inHigh[i - 1] - num18) + (num17 - inLow[i - 1]);
                    }
                    else {
                        num16 = 0.0;
                    }
                    num19 = num16;
                }
                num20 = num19;
            }
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num15 = Math.Abs((double)(inClose[BodyShortTrailingIdx] - inOpen[BodyShortTrailingIdx]));
            }
            else {
                double num14;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num14 = inHigh[BodyShortTrailingIdx] - inLow[BodyShortTrailingIdx];
                }
                else {
                    double num11;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num12;
                        double num13;
                        if (inClose[BodyShortTrailingIdx] >= inOpen[BodyShortTrailingIdx]) {
                            num13 = inClose[BodyShortTrailingIdx];
                        }
                        else {
                            num13 = inOpen[BodyShortTrailingIdx];
                        }
                        if (inClose[BodyShortTrailingIdx] >= inOpen[BodyShortTrailingIdx]) {
                            num12 = inOpen[BodyShortTrailingIdx];
                        }
                        else {
                            num12 = inClose[BodyShortTrailingIdx];
                        }
                        num11 = (inHigh[BodyShortTrailingIdx] - num13) + (num12 - inLow[BodyShortTrailingIdx]);
                    }
                    else {
                        num11 = 0.0;
                    }
                    num14 = num11;
                }
                num15 = num14;
            }
            BodyShortPeriodTotal += num20 - num15;
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num9;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i] - inLow[i];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i] >= inOpen[i]) {
                            num8 = inClose[i];
                        }
                        else {
                            num8 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num7 = inOpen[i];
                        }
                        else {
                            num7 = inClose[i];
                        }
                        num6 = (inHigh[i] - num8) + (num7 - inLow[i]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[BodyShortTrailingIdx + 1] - inOpen[BodyShortTrailingIdx + 1]));
            }
            else {
                double num4;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num4 = inHigh[BodyShortTrailingIdx + 1] - inLow[BodyShortTrailingIdx + 1];
                }
                else {
                    double num;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[BodyShortTrailingIdx + 1] >= inOpen[BodyShortTrailingIdx + 1]) {
                            num3 = inClose[BodyShortTrailingIdx + 1];
                        }
                        else {
                            num3 = inOpen[BodyShortTrailingIdx + 1];
                        }
                        if (inClose[BodyShortTrailingIdx + 1] >= inOpen[BodyShortTrailingIdx + 1]) {
                            num2 = inOpen[BodyShortTrailingIdx + 1];
                        }
                        else {
                            num2 = inClose[BodyShortTrailingIdx + 1];
                        }
                        num = (inHigh[BodyShortTrailingIdx + 1] - num3) + (num2 - inLow[BodyShortTrailingIdx + 1]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            BodyShortPeriodTotal2 += num10 - num5;
            i++;
            BodyLongTrailingIdx++;
            BodyShortTrailingIdx++;
            if (i <= endIdx) {
                goto Label_0353;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlGapSideSideWhite(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            double num15;
            double num20;
            double num52;
            double num53;
            double num54;
            double num55;
            double num58;
            double num59;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlGapSideSideWhiteLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double NearPeriodTotal = 0.0;
            double EqualPeriodTotal = 0.0;
            int NearTrailingIdx = startIdx - Globals.candleSettings[8].avgPeriod;
            int EqualTrailingIdx = startIdx - Globals.candleSettings[10].avgPeriod;
            int i = NearTrailingIdx;
            while (true) {
                double num69;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                    num69 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num68;
                    if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                        num68 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num65;
                        if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                            double num66;
                            double num67;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num67 = inClose[i - 1];
                            }
                            else {
                                num67 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num66 = inOpen[i - 1];
                            }
                            else {
                                num66 = inClose[i - 1];
                            }
                            num65 = (inHigh[i - 1] - num67) + (num66 - inLow[i - 1]);
                        }
                        else {
                            num65 = 0.0;
                        }
                        num68 = num65;
                    }
                    num69 = num68;
                }
                NearPeriodTotal += num69;
                i++;
            }
            i = EqualTrailingIdx;
            while (true) {
                double num64;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                    num64 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num63;
                    if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                        num63 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num60;
                        if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                            double num61;
                            double num62;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num62 = inClose[i - 1];
                            }
                            else {
                                num62 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num61 = inOpen[i - 1];
                            }
                            else {
                                num61 = inClose[i - 1];
                            }
                            num60 = (inHigh[i - 1] - num62) + (num61 - inLow[i - 1]);
                        }
                        else {
                            num60 = 0.0;
                        }
                        num63 = num60;
                    }
                    num64 = num63;
                }
                EqualPeriodTotal += num64;
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            Label_0272:
            if (inOpen[i - 1] < inClose[i - 1]) {
                num59 = inOpen[i - 1];
            }
            else {
                num59 = inClose[i - 1];
            }
            if (inOpen[i - 2] > inClose[i - 2]) {
                num58 = inOpen[i - 2];
            }
            else {
                num58 = inClose[i - 2];
            }
            if (num59 > num58) {
                double num56;
                double num57;
                if (inOpen[i] < inClose[i]) {
                    num57 = inOpen[i];
                }
                else {
                    num57 = inClose[i];
                }
                if (inOpen[i - 2] > inClose[i - 2]) {
                    num56 = inOpen[i - 2];
                }
                else {
                    num56 = inClose[i - 2];
                }
                if (num57 > num56) {
                    goto Label_0373;
                }
            }
            if (inOpen[i - 1] > inClose[i - 1]) {
                num55 = inOpen[i - 1];
            }
            else {
                num55 = inClose[i - 1];
            }
            if (inOpen[i - 2] < inClose[i - 2]) {
                num54 = inOpen[i - 2];
            }
            else {
                num54 = inClose[i - 2];
            }
            if (num55 >= num54) {
                goto Label_0990;
            }
            if (inOpen[i] > inClose[i]) {
                num53 = inOpen[i];
            }
            else {
                num53 = inClose[i];
            }
            if (inOpen[i - 2] < inClose[i - 2]) {
                num52 = inOpen[i - 2];
            }
            else {
                num52 = inClose[i - 2];
            }
            if (num53 >= num52) {
                goto Label_0990;
            }
            Label_0373:
            if ((inClose[i - 1] >= inOpen[i - 1]) && (inClose[i] >= inOpen[i])) {
                double num45;
                double num51;
                if (Globals.candleSettings[8].avgPeriod != 0.0) {
                    num51 = NearPeriodTotal / ((double)Globals.candleSettings[8].avgPeriod);
                }
                else {
                    double num50;
                    if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                        num50 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                    }
                    else {
                        double num49;
                        if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                            num49 = inHigh[i - 1] - inLow[i - 1];
                        }
                        else {
                            double num46;
                            if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                                double num47;
                                double num48;
                                if (inClose[i - 1] >= inOpen[i - 1]) {
                                    num48 = inClose[i - 1];
                                }
                                else {
                                    num48 = inOpen[i - 1];
                                }
                                if (inClose[i - 1] >= inOpen[i - 1]) {
                                    num47 = inOpen[i - 1];
                                }
                                else {
                                    num47 = inClose[i - 1];
                                }
                                num46 = (inHigh[i - 1] - num48) + (num47 - inLow[i - 1]);
                            }
                            else {
                                num46 = 0.0;
                            }
                            num49 = num46;
                        }
                        num50 = num49;
                    }
                    num51 = num50;
                }
                if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                    num45 = 2.0;
                }
                else {
                    num45 = 1.0;
                }
                if (Math.Abs((double)(inClose[i] - inOpen[i])) >= (Math.Abs((double)(inClose[i - 1] - inOpen[i - 1])) - ((Globals.candleSettings[8].factor * num51) / num45))) {
                    double num38;
                    double num44;
                    if (Globals.candleSettings[8].avgPeriod != 0.0) {
                        num44 = NearPeriodTotal / ((double)Globals.candleSettings[8].avgPeriod);
                    }
                    else {
                        double num43;
                        if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                            num43 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                        }
                        else {
                            double num42;
                            if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                                num42 = inHigh[i - 1] - inLow[i - 1];
                            }
                            else {
                                double num39;
                                if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                                    double num40;
                                    double num41;
                                    if (inClose[i - 1] >= inOpen[i - 1]) {
                                        num41 = inClose[i - 1];
                                    }
                                    else {
                                        num41 = inOpen[i - 1];
                                    }
                                    if (inClose[i - 1] >= inOpen[i - 1]) {
                                        num40 = inOpen[i - 1];
                                    }
                                    else {
                                        num40 = inClose[i - 1];
                                    }
                                    num39 = (inHigh[i - 1] - num41) + (num40 - inLow[i - 1]);
                                }
                                else {
                                    num39 = 0.0;
                                }
                                num42 = num39;
                            }
                            num43 = num42;
                        }
                        num44 = num43;
                    }
                    if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                        num38 = 2.0;
                    }
                    else {
                        num38 = 1.0;
                    }
                    if (Math.Abs((double)(inClose[i] - inOpen[i])) <= (Math.Abs((double)(inClose[i - 1] - inOpen[i - 1])) + ((Globals.candleSettings[8].factor * num44) / num38))) {
                        double num31;
                        double num37;
                        if (Globals.candleSettings[10].avgPeriod != 0.0) {
                            num37 = EqualPeriodTotal / ((double)Globals.candleSettings[10].avgPeriod);
                        }
                        else {
                            double num36;
                            if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                                num36 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                            }
                            else {
                                double num35;
                                if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                                    num35 = inHigh[i - 1] - inLow[i - 1];
                                }
                                else {
                                    double num32;
                                    if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                                        double num33;
                                        double num34;
                                        if (inClose[i - 1] >= inOpen[i - 1]) {
                                            num34 = inClose[i - 1];
                                        }
                                        else {
                                            num34 = inOpen[i - 1];
                                        }
                                        if (inClose[i - 1] >= inOpen[i - 1]) {
                                            num33 = inOpen[i - 1];
                                        }
                                        else {
                                            num33 = inClose[i - 1];
                                        }
                                        num32 = (inHigh[i - 1] - num34) + (num33 - inLow[i - 1]);
                                    }
                                    else {
                                        num32 = 0.0;
                                    }
                                    num35 = num32;
                                }
                                num36 = num35;
                            }
                            num37 = num36;
                        }
                        if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                            num31 = 2.0;
                        }
                        else {
                            num31 = 1.0;
                        }
                        if (inOpen[i] >= (inOpen[i - 1] - ((Globals.candleSettings[10].factor * num37) / num31))) {
                            double num24;
                            double num30;
                            if (Globals.candleSettings[10].avgPeriod != 0.0) {
                                num30 = EqualPeriodTotal / ((double)Globals.candleSettings[10].avgPeriod);
                            }
                            else {
                                double num29;
                                if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                                    num29 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                                }
                                else {
                                    double num28;
                                    if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                                        num28 = inHigh[i - 1] - inLow[i - 1];
                                    }
                                    else {
                                        double num25;
                                        if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                                            double num26;
                                            double num27;
                                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                                num27 = inClose[i - 1];
                                            }
                                            else {
                                                num27 = inOpen[i - 1];
                                            }
                                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                                num26 = inOpen[i - 1];
                                            }
                                            else {
                                                num26 = inClose[i - 1];
                                            }
                                            num25 = (inHigh[i - 1] - num27) + (num26 - inLow[i - 1]);
                                        }
                                        else {
                                            num25 = 0.0;
                                        }
                                        num28 = num25;
                                    }
                                    num29 = num28;
                                }
                                num30 = num29;
                            }
                            if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                                num24 = 2.0;
                            }
                            else {
                                num24 = 1.0;
                            }
                            if (inOpen[i] <= (inOpen[i - 1] + ((Globals.candleSettings[10].factor * num30) / num24))) {
                                int num21;
                                double num22;
                                double num23;
                                if (inOpen[i - 1] < inClose[i - 1]) {
                                    num23 = inOpen[i - 1];
                                }
                                else {
                                    num23 = inClose[i - 1];
                                }
                                if (inOpen[i - 2] > inClose[i - 2]) {
                                    num22 = inOpen[i - 2];
                                }
                                else {
                                    num22 = inClose[i - 2];
                                }
                                if (num23 > num22) {
                                    num21 = 100;
                                }
                                else {
                                    num21 = -100;
                                }
                                outInteger[outIdx] = num21;
                                outIdx++;
                                goto Label_0999;
                            }
                        }
                    }
                }
            }
            Label_0990:
            outInteger[outIdx] = 0;
            outIdx++;
            Label_0999:
            if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                num20 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
            }
            else {
                double num19;
                if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                    num19 = inHigh[i - 1] - inLow[i - 1];
                }
                else {
                    double num16;
                    if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                        double num17;
                        double num18;
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num18 = inClose[i - 1];
                        }
                        else {
                            num18 = inOpen[i - 1];
                        }
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num17 = inOpen[i - 1];
                        }
                        else {
                            num17 = inClose[i - 1];
                        }
                        num16 = (inHigh[i - 1] - num18) + (num17 - inLow[i - 1]);
                    }
                    else {
                        num16 = 0.0;
                    }
                    num19 = num16;
                }
                num20 = num19;
            }
            if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                num15 = Math.Abs((double)(inClose[NearTrailingIdx - 1] - inOpen[NearTrailingIdx - 1]));
            }
            else {
                double num14;
                if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                    num14 = inHigh[NearTrailingIdx - 1] - inLow[NearTrailingIdx - 1];
                }
                else {
                    double num11;
                    if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                        double num12;
                        double num13;
                        if (inClose[NearTrailingIdx - 1] >= inOpen[NearTrailingIdx - 1]) {
                            num13 = inClose[NearTrailingIdx - 1];
                        }
                        else {
                            num13 = inOpen[NearTrailingIdx - 1];
                        }
                        if (inClose[NearTrailingIdx - 1] >= inOpen[NearTrailingIdx - 1]) {
                            num12 = inOpen[NearTrailingIdx - 1];
                        }
                        else {
                            num12 = inClose[NearTrailingIdx - 1];
                        }
                        num11 = (inHigh[NearTrailingIdx - 1] - num13) + (num12 - inLow[NearTrailingIdx - 1]);
                    }
                    else {
                        num11 = 0.0;
                    }
                    num14 = num11;
                }
                num15 = num14;
            }
            NearPeriodTotal += num20 - num15;
            if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
            }
            else {
                double num9;
                if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i - 1] - inLow[i - 1];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num8 = inClose[i - 1];
                        }
                        else {
                            num8 = inOpen[i - 1];
                        }
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num7 = inOpen[i - 1];
                        }
                        else {
                            num7 = inClose[i - 1];
                        }
                        num6 = (inHigh[i - 1] - num8) + (num7 - inLow[i - 1]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[EqualTrailingIdx - 1] - inOpen[EqualTrailingIdx - 1]));
            }
            else {
                double num4;
                if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                    num4 = inHigh[EqualTrailingIdx - 1] - inLow[EqualTrailingIdx - 1];
                }
                else {
                    double num;
                    if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[EqualTrailingIdx - 1] >= inOpen[EqualTrailingIdx - 1]) {
                            num3 = inClose[EqualTrailingIdx - 1];
                        }
                        else {
                            num3 = inOpen[EqualTrailingIdx - 1];
                        }
                        if (inClose[EqualTrailingIdx - 1] >= inOpen[EqualTrailingIdx - 1]) {
                            num2 = inOpen[EqualTrailingIdx - 1];
                        }
                        else {
                            num2 = inClose[EqualTrailingIdx - 1];
                        }
                        num = (inHigh[EqualTrailingIdx - 1] - num3) + (num2 - inLow[EqualTrailingIdx - 1]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            EqualPeriodTotal += num10 - num5;
            i++;
            NearTrailingIdx++;
            EqualTrailingIdx++;
            if (i <= endIdx) {
                goto Label_0272;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlGravestoneDoji(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            double num15;
            double num20;
            double num37;
            double num43;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlGravestoneDojiLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double BodyDojiPeriodTotal = 0.0;
            int BodyDojiTrailingIdx = startIdx - Globals.candleSettings[3].avgPeriod;
            double ShadowVeryShortPeriodTotal = 0.0;
            int ShadowVeryShortTrailingIdx = startIdx - Globals.candleSettings[7].avgPeriod;
            int i = BodyDojiTrailingIdx;
            while (true) {
                double num53;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                    num53 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num52;
                    if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                        num52 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num49;
                        if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                            double num50;
                            double num51;
                            if (inClose[i] >= inOpen[i]) {
                                num51 = inClose[i];
                            }
                            else {
                                num51 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num50 = inOpen[i];
                            }
                            else {
                                num50 = inClose[i];
                            }
                            num49 = (inHigh[i] - num51) + (num50 - inLow[i]);
                        }
                        else {
                            num49 = 0.0;
                        }
                        num52 = num49;
                    }
                    num53 = num52;
                }
                BodyDojiPeriodTotal += num53;
                i++;
            }
            i = ShadowVeryShortTrailingIdx;
            while (true) {
                double num48;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num48 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num47;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num47 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num44;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num45;
                            double num46;
                            if (inClose[i] >= inOpen[i]) {
                                num46 = inClose[i];
                            }
                            else {
                                num46 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num45 = inOpen[i];
                            }
                            else {
                                num45 = inClose[i];
                            }
                            num44 = (inHigh[i] - num46) + (num45 - inLow[i]);
                        }
                        else {
                            num44 = 0.0;
                        }
                        num47 = num44;
                    }
                    num48 = num47;
                }
                ShadowVeryShortPeriodTotal += num48;
                i++;
            }
            int outIdx = 0;
            Label_022E:
            if (Globals.candleSettings[3].avgPeriod != 0.0) {
                num43 = BodyDojiPeriodTotal / ((double)Globals.candleSettings[3].avgPeriod);
            }
            else {
                double num42;
                if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                    num42 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num41;
                    if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                        num41 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num38;
                        if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                            double num39;
                            double num40;
                            if (inClose[i] >= inOpen[i]) {
                                num40 = inClose[i];
                            }
                            else {
                                num40 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num39 = inOpen[i];
                            }
                            else {
                                num39 = inClose[i];
                            }
                            num38 = (inHigh[i] - num40) + (num39 - inLow[i]);
                        }
                        else {
                            num38 = 0.0;
                        }
                        num41 = num38;
                    }
                    num42 = num41;
                }
                num43 = num42;
            }
            if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                num37 = 2.0;
            }
            else {
                num37 = 1.0;
            }
            if (Math.Abs((double)(inClose[i] - inOpen[i])) <= ((Globals.candleSettings[3].factor * num43) / num37)) {
                double num29;
                double num35;
                double num36;
                if (inClose[i] >= inOpen[i]) {
                    num36 = inOpen[i];
                }
                else {
                    num36 = inClose[i];
                }
                if (Globals.candleSettings[7].avgPeriod != 0.0) {
                    num35 = ShadowVeryShortPeriodTotal / ((double)Globals.candleSettings[7].avgPeriod);
                }
                else {
                    double num34;
                    if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                        num34 = Math.Abs((double)(inClose[i] - inOpen[i]));
                    }
                    else {
                        double num33;
                        if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                            num33 = inHigh[i] - inLow[i];
                        }
                        else {
                            double num30;
                            if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                double num31;
                                double num32;
                                if (inClose[i] >= inOpen[i]) {
                                    num32 = inClose[i];
                                }
                                else {
                                    num32 = inOpen[i];
                                }
                                if (inClose[i] >= inOpen[i]) {
                                    num31 = inOpen[i];
                                }
                                else {
                                    num31 = inClose[i];
                                }
                                num30 = (inHigh[i] - num32) + (num31 - inLow[i]);
                            }
                            else {
                                num30 = 0.0;
                            }
                            num33 = num30;
                        }
                        num34 = num33;
                    }
                    num35 = num34;
                }
                if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                    num29 = 2.0;
                }
                else {
                    num29 = 1.0;
                }
                if ((num36 - inLow[i]) < ((Globals.candleSettings[7].factor * num35) / num29)) {
                    double num21;
                    double num27;
                    double num28;
                    if (inClose[i] >= inOpen[i]) {
                        num28 = inClose[i];
                    }
                    else {
                        num28 = inOpen[i];
                    }
                    if (Globals.candleSettings[7].avgPeriod != 0.0) {
                        num27 = ShadowVeryShortPeriodTotal / ((double)Globals.candleSettings[7].avgPeriod);
                    }
                    else {
                        double num26;
                        if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                            num26 = Math.Abs((double)(inClose[i] - inOpen[i]));
                        }
                        else {
                            double num25;
                            if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                                num25 = inHigh[i] - inLow[i];
                            }
                            else {
                                double num22;
                                if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                    double num23;
                                    double num24;
                                    if (inClose[i] >= inOpen[i]) {
                                        num24 = inClose[i];
                                    }
                                    else {
                                        num24 = inOpen[i];
                                    }
                                    if (inClose[i] >= inOpen[i]) {
                                        num23 = inOpen[i];
                                    }
                                    else {
                                        num23 = inClose[i];
                                    }
                                    num22 = (inHigh[i] - num24) + (num23 - inLow[i]);
                                }
                                else {
                                    num22 = 0.0;
                                }
                                num25 = num22;
                            }
                            num26 = num25;
                        }
                        num27 = num26;
                    }
                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                        num21 = 2.0;
                    }
                    else {
                        num21 = 1.0;
                    }
                    if ((inHigh[i] - num28) > ((Globals.candleSettings[7].factor * num27) / num21)) {
                        outInteger[outIdx] = 100;
                        outIdx++;
                        goto Label_0619;
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_0619:
            if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                num20 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num19;
                if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                    num19 = inHigh[i] - inLow[i];
                }
                else {
                    double num16;
                    if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                        double num17;
                        double num18;
                        if (inClose[i] >= inOpen[i]) {
                            num18 = inClose[i];
                        }
                        else {
                            num18 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num17 = inOpen[i];
                        }
                        else {
                            num17 = inClose[i];
                        }
                        num16 = (inHigh[i] - num18) + (num17 - inLow[i]);
                    }
                    else {
                        num16 = 0.0;
                    }
                    num19 = num16;
                }
                num20 = num19;
            }
            if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                num15 = Math.Abs((double)(inClose[BodyDojiTrailingIdx] - inOpen[BodyDojiTrailingIdx]));
            }
            else {
                double num14;
                if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                    num14 = inHigh[BodyDojiTrailingIdx] - inLow[BodyDojiTrailingIdx];
                }
                else {
                    double num11;
                    if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                        double num12;
                        double num13;
                        if (inClose[BodyDojiTrailingIdx] >= inOpen[BodyDojiTrailingIdx]) {
                            num13 = inClose[BodyDojiTrailingIdx];
                        }
                        else {
                            num13 = inOpen[BodyDojiTrailingIdx];
                        }
                        if (inClose[BodyDojiTrailingIdx] >= inOpen[BodyDojiTrailingIdx]) {
                            num12 = inOpen[BodyDojiTrailingIdx];
                        }
                        else {
                            num12 = inClose[BodyDojiTrailingIdx];
                        }
                        num11 = (inHigh[BodyDojiTrailingIdx] - num13) + (num12 - inLow[BodyDojiTrailingIdx]);
                    }
                    else {
                        num11 = 0.0;
                    }
                    num14 = num11;
                }
                num15 = num14;
            }
            BodyDojiPeriodTotal += num20 - num15;
            if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num9;
                if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i] - inLow[i];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i] >= inOpen[i]) {
                            num8 = inClose[i];
                        }
                        else {
                            num8 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num7 = inOpen[i];
                        }
                        else {
                            num7 = inClose[i];
                        }
                        num6 = (inHigh[i] - num8) + (num7 - inLow[i]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[ShadowVeryShortTrailingIdx] - inOpen[ShadowVeryShortTrailingIdx]));
            }
            else {
                double num4;
                if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                    num4 = inHigh[ShadowVeryShortTrailingIdx] - inLow[ShadowVeryShortTrailingIdx];
                }
                else {
                    double num;
                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[ShadowVeryShortTrailingIdx] >= inOpen[ShadowVeryShortTrailingIdx]) {
                            num3 = inClose[ShadowVeryShortTrailingIdx];
                        }
                        else {
                            num3 = inOpen[ShadowVeryShortTrailingIdx];
                        }
                        if (inClose[ShadowVeryShortTrailingIdx] >= inOpen[ShadowVeryShortTrailingIdx]) {
                            num2 = inOpen[ShadowVeryShortTrailingIdx];
                        }
                        else {
                            num2 = inClose[ShadowVeryShortTrailingIdx];
                        }
                        num = (inHigh[ShadowVeryShortTrailingIdx] - num3) + (num2 - inLow[ShadowVeryShortTrailingIdx]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            ShadowVeryShortPeriodTotal += num10 - num5;
            i++;
            BodyDojiTrailingIdx++;
            ShadowVeryShortTrailingIdx++;
            if (i <= endIdx) {
                goto Label_022E;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlHammer(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            double num15;
            double num20;
            double num25;
            double num30;
            double num35;
            double num40;
            double num65;
            double num71;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlHammerLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double BodyPeriodTotal = 0.0;
            int BodyTrailingIdx = startIdx - Globals.candleSettings[2].avgPeriod;
            double ShadowLongPeriodTotal = 0.0;
            int ShadowLongTrailingIdx = startIdx - Globals.candleSettings[4].avgPeriod;
            double ShadowVeryShortPeriodTotal = 0.0;
            int ShadowVeryShortTrailingIdx = startIdx - Globals.candleSettings[7].avgPeriod;
            double NearPeriodTotal = 0.0;
            int NearTrailingIdx = (startIdx - 1) - Globals.candleSettings[8].avgPeriod;
            int i = BodyTrailingIdx;
            while (true) {
                double num91;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                    num91 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num90;
                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                        num90 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num87;
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            double num88;
                            double num89;
                            if (inClose[i] >= inOpen[i]) {
                                num89 = inClose[i];
                            }
                            else {
                                num89 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num88 = inOpen[i];
                            }
                            else {
                                num88 = inClose[i];
                            }
                            num87 = (inHigh[i] - num89) + (num88 - inLow[i]);
                        }
                        else {
                            num87 = 0.0;
                        }
                        num90 = num87;
                    }
                    num91 = num90;
                }
                BodyPeriodTotal += num91;
                i++;
            }
            i = ShadowLongTrailingIdx;
            while (true) {
                double num86;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[4].rangeType == RangeType.RealBody) {
                    num86 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num85;
                    if (Globals.candleSettings[4].rangeType == RangeType.HighLow) {
                        num85 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num82;
                        if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                            double num83;
                            double num84;
                            if (inClose[i] >= inOpen[i]) {
                                num84 = inClose[i];
                            }
                            else {
                                num84 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num83 = inOpen[i];
                            }
                            else {
                                num83 = inClose[i];
                            }
                            num82 = (inHigh[i] - num84) + (num83 - inLow[i]);
                        }
                        else {
                            num82 = 0.0;
                        }
                        num85 = num82;
                    }
                    num86 = num85;
                }
                ShadowLongPeriodTotal += num86;
                i++;
            }
            i = ShadowVeryShortTrailingIdx;
            while (true) {
                double num81;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num81 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num80;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num80 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num77;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num78;
                            double num79;
                            if (inClose[i] >= inOpen[i]) {
                                num79 = inClose[i];
                            }
                            else {
                                num79 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num78 = inOpen[i];
                            }
                            else {
                                num78 = inClose[i];
                            }
                            num77 = (inHigh[i] - num79) + (num78 - inLow[i]);
                        }
                        else {
                            num77 = 0.0;
                        }
                        num80 = num77;
                    }
                    num81 = num80;
                }
                ShadowVeryShortPeriodTotal += num81;
                i++;
            }
            i = NearTrailingIdx;
            while (true) {
                double num76;
                if (i >= (startIdx - 1)) {
                    break;
                }
                if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                    num76 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num75;
                    if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                        num75 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num72;
                        if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                            double num73;
                            double num74;
                            if (inClose[i] >= inOpen[i]) {
                                num74 = inClose[i];
                            }
                            else {
                                num74 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num73 = inOpen[i];
                            }
                            else {
                                num73 = inClose[i];
                            }
                            num72 = (inHigh[i] - num74) + (num73 - inLow[i]);
                        }
                        else {
                            num72 = 0.0;
                        }
                        num75 = num72;
                    }
                    num76 = num75;
                }
                NearPeriodTotal += num76;
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            Label_03FF:
            if (Globals.candleSettings[2].avgPeriod != 0.0) {
                num71 = BodyPeriodTotal / ((double)Globals.candleSettings[2].avgPeriod);
            }
            else {
                double num70;
                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                    num70 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num69;
                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                        num69 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num66;
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            double num67;
                            double num68;
                            if (inClose[i] >= inOpen[i]) {
                                num68 = inClose[i];
                            }
                            else {
                                num68 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num67 = inOpen[i];
                            }
                            else {
                                num67 = inClose[i];
                            }
                            num66 = (inHigh[i] - num68) + (num67 - inLow[i]);
                        }
                        else {
                            num66 = 0.0;
                        }
                        num69 = num66;
                    }
                    num70 = num69;
                }
                num71 = num70;
            }
            if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                num65 = 2.0;
            }
            else {
                num65 = 1.0;
            }
            if (Math.Abs((double)(inClose[i] - inOpen[i])) < ((Globals.candleSettings[2].factor * num71) / num65)) {
                double num57;
                double num63;
                double num64;
                if (inClose[i] >= inOpen[i]) {
                    num64 = inOpen[i];
                }
                else {
                    num64 = inClose[i];
                }
                if (Globals.candleSettings[4].avgPeriod != 0.0) {
                    num63 = ShadowLongPeriodTotal / ((double)Globals.candleSettings[4].avgPeriod);
                }
                else {
                    double num62;
                    if (Globals.candleSettings[4].rangeType == RangeType.RealBody) {
                        num62 = Math.Abs((double)(inClose[i] - inOpen[i]));
                    }
                    else {
                        double num61;
                        if (Globals.candleSettings[4].rangeType == RangeType.HighLow) {
                            num61 = inHigh[i] - inLow[i];
                        }
                        else {
                            double num58;
                            if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                                double num59;
                                double num60;
                                if (inClose[i] >= inOpen[i]) {
                                    num60 = inClose[i];
                                }
                                else {
                                    num60 = inOpen[i];
                                }
                                if (inClose[i] >= inOpen[i]) {
                                    num59 = inOpen[i];
                                }
                                else {
                                    num59 = inClose[i];
                                }
                                num58 = (inHigh[i] - num60) + (num59 - inLow[i]);
                            }
                            else {
                                num58 = 0.0;
                            }
                            num61 = num58;
                        }
                        num62 = num61;
                    }
                    num63 = num62;
                }
                if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                    num57 = 2.0;
                }
                else {
                    num57 = 1.0;
                }
                if ((num64 - inLow[i]) > ((Globals.candleSettings[4].factor * num63) / num57)) {
                    double num49;
                    double num55;
                    double num56;
                    if (inClose[i] >= inOpen[i]) {
                        num56 = inClose[i];
                    }
                    else {
                        num56 = inOpen[i];
                    }
                    if (Globals.candleSettings[7].avgPeriod != 0.0) {
                        num55 = ShadowVeryShortPeriodTotal / ((double)Globals.candleSettings[7].avgPeriod);
                    }
                    else {
                        double num54;
                        if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                            num54 = Math.Abs((double)(inClose[i] - inOpen[i]));
                        }
                        else {
                            double num53;
                            if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                                num53 = inHigh[i] - inLow[i];
                            }
                            else {
                                double num50;
                                if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                    double num51;
                                    double num52;
                                    if (inClose[i] >= inOpen[i]) {
                                        num52 = inClose[i];
                                    }
                                    else {
                                        num52 = inOpen[i];
                                    }
                                    if (inClose[i] >= inOpen[i]) {
                                        num51 = inOpen[i];
                                    }
                                    else {
                                        num51 = inClose[i];
                                    }
                                    num50 = (inHigh[i] - num52) + (num51 - inLow[i]);
                                }
                                else {
                                    num50 = 0.0;
                                }
                                num53 = num50;
                            }
                            num54 = num53;
                        }
                        num55 = num54;
                    }
                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                        num49 = 2.0;
                    }
                    else {
                        num49 = 1.0;
                    }
                    if ((inHigh[i] - num56) < ((Globals.candleSettings[7].factor * num55) / num49)) {
                        double num41;
                        double num47;
                        double num48;
                        if (inClose[i] < inOpen[i]) {
                            num48 = inClose[i];
                        }
                        else {
                            num48 = inOpen[i];
                        }
                        if (Globals.candleSettings[8].avgPeriod != 0.0) {
                            num47 = NearPeriodTotal / ((double)Globals.candleSettings[8].avgPeriod);
                        }
                        else {
                            double num46;
                            if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                                num46 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                            }
                            else {
                                double num45;
                                if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                                    num45 = inHigh[i - 1] - inLow[i - 1];
                                }
                                else {
                                    double num42;
                                    if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                                        double num43;
                                        double num44;
                                        if (inClose[i - 1] >= inOpen[i - 1]) {
                                            num44 = inClose[i - 1];
                                        }
                                        else {
                                            num44 = inOpen[i - 1];
                                        }
                                        if (inClose[i - 1] >= inOpen[i - 1]) {
                                            num43 = inOpen[i - 1];
                                        }
                                        else {
                                            num43 = inClose[i - 1];
                                        }
                                        num42 = (inHigh[i - 1] - num44) + (num43 - inLow[i - 1]);
                                    }
                                    else {
                                        num42 = 0.0;
                                    }
                                    num45 = num42;
                                }
                                num46 = num45;
                            }
                            num47 = num46;
                        }
                        if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                            num41 = 2.0;
                        }
                        else {
                            num41 = 1.0;
                        }
                        if (num48 <= (inLow[i - 1] + ((Globals.candleSettings[8].factor * num47) / num41))) {
                            outInteger[outIdx] = 100;
                            outIdx++;
                            goto Label_095F;
                        }
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_095F:
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num40 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num39;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num39 = inHigh[i] - inLow[i];
                }
                else {
                    double num36;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num37;
                        double num38;
                        if (inClose[i] >= inOpen[i]) {
                            num38 = inClose[i];
                        }
                        else {
                            num38 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num37 = inOpen[i];
                        }
                        else {
                            num37 = inClose[i];
                        }
                        num36 = (inHigh[i] - num38) + (num37 - inLow[i]);
                    }
                    else {
                        num36 = 0.0;
                    }
                    num39 = num36;
                }
                num40 = num39;
            }
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num35 = Math.Abs((double)(inClose[BodyTrailingIdx] - inOpen[BodyTrailingIdx]));
            }
            else {
                double num34;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num34 = inHigh[BodyTrailingIdx] - inLow[BodyTrailingIdx];
                }
                else {
                    double num31;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num32;
                        double num33;
                        if (inClose[BodyTrailingIdx] >= inOpen[BodyTrailingIdx]) {
                            num33 = inClose[BodyTrailingIdx];
                        }
                        else {
                            num33 = inOpen[BodyTrailingIdx];
                        }
                        if (inClose[BodyTrailingIdx] >= inOpen[BodyTrailingIdx]) {
                            num32 = inOpen[BodyTrailingIdx];
                        }
                        else {
                            num32 = inClose[BodyTrailingIdx];
                        }
                        num31 = (inHigh[BodyTrailingIdx] - num33) + (num32 - inLow[BodyTrailingIdx]);
                    }
                    else {
                        num31 = 0.0;
                    }
                    num34 = num31;
                }
                num35 = num34;
            }
            BodyPeriodTotal += num40 - num35;
            if (Globals.candleSettings[4].rangeType == RangeType.RealBody) {
                num30 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num29;
                if (Globals.candleSettings[4].rangeType == RangeType.HighLow) {
                    num29 = inHigh[i] - inLow[i];
                }
                else {
                    double num26;
                    if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                        double num27;
                        double num28;
                        if (inClose[i] >= inOpen[i]) {
                            num28 = inClose[i];
                        }
                        else {
                            num28 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num27 = inOpen[i];
                        }
                        else {
                            num27 = inClose[i];
                        }
                        num26 = (inHigh[i] - num28) + (num27 - inLow[i]);
                    }
                    else {
                        num26 = 0.0;
                    }
                    num29 = num26;
                }
                num30 = num29;
            }
            if (Globals.candleSettings[4].rangeType == RangeType.RealBody) {
                num25 = Math.Abs((double)(inClose[ShadowLongTrailingIdx] - inOpen[ShadowLongTrailingIdx]));
            }
            else {
                double num24;
                if (Globals.candleSettings[4].rangeType == RangeType.HighLow) {
                    num24 = inHigh[ShadowLongTrailingIdx] - inLow[ShadowLongTrailingIdx];
                }
                else {
                    double num21;
                    if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                        double num22;
                        double num23;
                        if (inClose[ShadowLongTrailingIdx] >= inOpen[ShadowLongTrailingIdx]) {
                            num23 = inClose[ShadowLongTrailingIdx];
                        }
                        else {
                            num23 = inOpen[ShadowLongTrailingIdx];
                        }
                        if (inClose[ShadowLongTrailingIdx] >= inOpen[ShadowLongTrailingIdx]) {
                            num22 = inOpen[ShadowLongTrailingIdx];
                        }
                        else {
                            num22 = inClose[ShadowLongTrailingIdx];
                        }
                        num21 = (inHigh[ShadowLongTrailingIdx] - num23) + (num22 - inLow[ShadowLongTrailingIdx]);
                    }
                    else {
                        num21 = 0.0;
                    }
                    num24 = num21;
                }
                num25 = num24;
            }
            ShadowLongPeriodTotal += num30 - num25;
            if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                num20 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num19;
                if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                    num19 = inHigh[i] - inLow[i];
                }
                else {
                    double num16;
                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                        double num17;
                        double num18;
                        if (inClose[i] >= inOpen[i]) {
                            num18 = inClose[i];
                        }
                        else {
                            num18 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num17 = inOpen[i];
                        }
                        else {
                            num17 = inClose[i];
                        }
                        num16 = (inHigh[i] - num18) + (num17 - inLow[i]);
                    }
                    else {
                        num16 = 0.0;
                    }
                    num19 = num16;
                }
                num20 = num19;
            }
            if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                num15 = Math.Abs((double)(inClose[ShadowVeryShortTrailingIdx] - inOpen[ShadowVeryShortTrailingIdx]));
            }
            else {
                double num14;
                if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                    num14 = inHigh[ShadowVeryShortTrailingIdx] - inLow[ShadowVeryShortTrailingIdx];
                }
                else {
                    double num11;
                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                        double num12;
                        double num13;
                        if (inClose[ShadowVeryShortTrailingIdx] >= inOpen[ShadowVeryShortTrailingIdx]) {
                            num13 = inClose[ShadowVeryShortTrailingIdx];
                        }
                        else {
                            num13 = inOpen[ShadowVeryShortTrailingIdx];
                        }
                        if (inClose[ShadowVeryShortTrailingIdx] >= inOpen[ShadowVeryShortTrailingIdx]) {
                            num12 = inOpen[ShadowVeryShortTrailingIdx];
                        }
                        else {
                            num12 = inClose[ShadowVeryShortTrailingIdx];
                        }
                        num11 = (inHigh[ShadowVeryShortTrailingIdx] - num13) + (num12 - inLow[ShadowVeryShortTrailingIdx]);
                    }
                    else {
                        num11 = 0.0;
                    }
                    num14 = num11;
                }
                num15 = num14;
            }
            ShadowVeryShortPeriodTotal += num20 - num15;
            if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
            }
            else {
                double num9;
                if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i - 1] - inLow[i - 1];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num8 = inClose[i - 1];
                        }
                        else {
                            num8 = inOpen[i - 1];
                        }
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num7 = inOpen[i - 1];
                        }
                        else {
                            num7 = inClose[i - 1];
                        }
                        num6 = (inHigh[i - 1] - num8) + (num7 - inLow[i - 1]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[NearTrailingIdx] - inOpen[NearTrailingIdx]));
            }
            else {
                double num4;
                if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                    num4 = inHigh[NearTrailingIdx] - inLow[NearTrailingIdx];
                }
                else {
                    double num;
                    if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[NearTrailingIdx] >= inOpen[NearTrailingIdx]) {
                            num3 = inClose[NearTrailingIdx];
                        }
                        else {
                            num3 = inOpen[NearTrailingIdx];
                        }
                        if (inClose[NearTrailingIdx] >= inOpen[NearTrailingIdx]) {
                            num2 = inOpen[NearTrailingIdx];
                        }
                        else {
                            num2 = inClose[NearTrailingIdx];
                        }
                        num = (inHigh[NearTrailingIdx] - num3) + (num2 - inLow[NearTrailingIdx]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            NearPeriodTotal += num10 - num5;
            i++;
            BodyTrailingIdx++;
            ShadowLongTrailingIdx++;
            ShadowVeryShortTrailingIdx++;
            NearTrailingIdx++;
            if (i <= endIdx) {
                goto Label_03FF;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlHangingMan(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            double num15;
            double num20;
            double num25;
            double num30;
            double num35;
            double num40;
            double num65;
            double num71;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlHangingManLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double BodyPeriodTotal = 0.0;
            int BodyTrailingIdx = startIdx - Globals.candleSettings[2].avgPeriod;
            double ShadowLongPeriodTotal = 0.0;
            int ShadowLongTrailingIdx = startIdx - Globals.candleSettings[4].avgPeriod;
            double ShadowVeryShortPeriodTotal = 0.0;
            int ShadowVeryShortTrailingIdx = startIdx - Globals.candleSettings[7].avgPeriod;
            double NearPeriodTotal = 0.0;
            int NearTrailingIdx = (startIdx - 1) - Globals.candleSettings[8].avgPeriod;
            int i = BodyTrailingIdx;
            while (true) {
                double num91;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                    num91 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num90;
                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                        num90 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num87;
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            double num88;
                            double num89;
                            if (inClose[i] >= inOpen[i]) {
                                num89 = inClose[i];
                            }
                            else {
                                num89 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num88 = inOpen[i];
                            }
                            else {
                                num88 = inClose[i];
                            }
                            num87 = (inHigh[i] - num89) + (num88 - inLow[i]);
                        }
                        else {
                            num87 = 0.0;
                        }
                        num90 = num87;
                    }
                    num91 = num90;
                }
                BodyPeriodTotal += num91;
                i++;
            }
            i = ShadowLongTrailingIdx;
            while (true) {
                double num86;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[4].rangeType == RangeType.RealBody) {
                    num86 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num85;
                    if (Globals.candleSettings[4].rangeType == RangeType.HighLow) {
                        num85 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num82;
                        if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                            double num83;
                            double num84;
                            if (inClose[i] >= inOpen[i]) {
                                num84 = inClose[i];
                            }
                            else {
                                num84 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num83 = inOpen[i];
                            }
                            else {
                                num83 = inClose[i];
                            }
                            num82 = (inHigh[i] - num84) + (num83 - inLow[i]);
                        }
                        else {
                            num82 = 0.0;
                        }
                        num85 = num82;
                    }
                    num86 = num85;
                }
                ShadowLongPeriodTotal += num86;
                i++;
            }
            i = ShadowVeryShortTrailingIdx;
            while (true) {
                double num81;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num81 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num80;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num80 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num77;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num78;
                            double num79;
                            if (inClose[i] >= inOpen[i]) {
                                num79 = inClose[i];
                            }
                            else {
                                num79 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num78 = inOpen[i];
                            }
                            else {
                                num78 = inClose[i];
                            }
                            num77 = (inHigh[i] - num79) + (num78 - inLow[i]);
                        }
                        else {
                            num77 = 0.0;
                        }
                        num80 = num77;
                    }
                    num81 = num80;
                }
                ShadowVeryShortPeriodTotal += num81;
                i++;
            }
            i = NearTrailingIdx;
            while (true) {
                double num76;
                if (i >= (startIdx - 1)) {
                    break;
                }
                if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                    num76 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num75;
                    if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                        num75 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num72;
                        if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                            double num73;
                            double num74;
                            if (inClose[i] >= inOpen[i]) {
                                num74 = inClose[i];
                            }
                            else {
                                num74 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num73 = inOpen[i];
                            }
                            else {
                                num73 = inClose[i];
                            }
                            num72 = (inHigh[i] - num74) + (num73 - inLow[i]);
                        }
                        else {
                            num72 = 0.0;
                        }
                        num75 = num72;
                    }
                    num76 = num75;
                }
                NearPeriodTotal += num76;
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            Label_03FF:
            if (Globals.candleSettings[2].avgPeriod != 0.0) {
                num71 = BodyPeriodTotal / ((double)Globals.candleSettings[2].avgPeriod);
            }
            else {
                double num70;
                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                    num70 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num69;
                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                        num69 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num66;
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            double num67;
                            double num68;
                            if (inClose[i] >= inOpen[i]) {
                                num68 = inClose[i];
                            }
                            else {
                                num68 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num67 = inOpen[i];
                            }
                            else {
                                num67 = inClose[i];
                            }
                            num66 = (inHigh[i] - num68) + (num67 - inLow[i]);
                        }
                        else {
                            num66 = 0.0;
                        }
                        num69 = num66;
                    }
                    num70 = num69;
                }
                num71 = num70;
            }
            if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                num65 = 2.0;
            }
            else {
                num65 = 1.0;
            }
            if (Math.Abs((double)(inClose[i] - inOpen[i])) < ((Globals.candleSettings[2].factor * num71) / num65)) {
                double num57;
                double num63;
                double num64;
                if (inClose[i] >= inOpen[i]) {
                    num64 = inOpen[i];
                }
                else {
                    num64 = inClose[i];
                }
                if (Globals.candleSettings[4].avgPeriod != 0.0) {
                    num63 = ShadowLongPeriodTotal / ((double)Globals.candleSettings[4].avgPeriod);
                }
                else {
                    double num62;
                    if (Globals.candleSettings[4].rangeType == RangeType.RealBody) {
                        num62 = Math.Abs((double)(inClose[i] - inOpen[i]));
                    }
                    else {
                        double num61;
                        if (Globals.candleSettings[4].rangeType == RangeType.HighLow) {
                            num61 = inHigh[i] - inLow[i];
                        }
                        else {
                            double num58;
                            if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                                double num59;
                                double num60;
                                if (inClose[i] >= inOpen[i]) {
                                    num60 = inClose[i];
                                }
                                else {
                                    num60 = inOpen[i];
                                }
                                if (inClose[i] >= inOpen[i]) {
                                    num59 = inOpen[i];
                                }
                                else {
                                    num59 = inClose[i];
                                }
                                num58 = (inHigh[i] - num60) + (num59 - inLow[i]);
                            }
                            else {
                                num58 = 0.0;
                            }
                            num61 = num58;
                        }
                        num62 = num61;
                    }
                    num63 = num62;
                }
                if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                    num57 = 2.0;
                }
                else {
                    num57 = 1.0;
                }
                if ((num64 - inLow[i]) > ((Globals.candleSettings[4].factor * num63) / num57)) {
                    double num49;
                    double num55;
                    double num56;
                    if (inClose[i] >= inOpen[i]) {
                        num56 = inClose[i];
                    }
                    else {
                        num56 = inOpen[i];
                    }
                    if (Globals.candleSettings[7].avgPeriod != 0.0) {
                        num55 = ShadowVeryShortPeriodTotal / ((double)Globals.candleSettings[7].avgPeriod);
                    }
                    else {
                        double num54;
                        if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                            num54 = Math.Abs((double)(inClose[i] - inOpen[i]));
                        }
                        else {
                            double num53;
                            if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                                num53 = inHigh[i] - inLow[i];
                            }
                            else {
                                double num50;
                                if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                    double num51;
                                    double num52;
                                    if (inClose[i] >= inOpen[i]) {
                                        num52 = inClose[i];
                                    }
                                    else {
                                        num52 = inOpen[i];
                                    }
                                    if (inClose[i] >= inOpen[i]) {
                                        num51 = inOpen[i];
                                    }
                                    else {
                                        num51 = inClose[i];
                                    }
                                    num50 = (inHigh[i] - num52) + (num51 - inLow[i]);
                                }
                                else {
                                    num50 = 0.0;
                                }
                                num53 = num50;
                            }
                            num54 = num53;
                        }
                        num55 = num54;
                    }
                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                        num49 = 2.0;
                    }
                    else {
                        num49 = 1.0;
                    }
                    if ((inHigh[i] - num56) < ((Globals.candleSettings[7].factor * num55) / num49)) {
                        double num41;
                        double num47;
                        double num48;
                        if (inClose[i] < inOpen[i]) {
                            num48 = inClose[i];
                        }
                        else {
                            num48 = inOpen[i];
                        }
                        if (Globals.candleSettings[8].avgPeriod != 0.0) {
                            num47 = NearPeriodTotal / ((double)Globals.candleSettings[8].avgPeriod);
                        }
                        else {
                            double num46;
                            if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                                num46 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                            }
                            else {
                                double num45;
                                if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                                    num45 = inHigh[i - 1] - inLow[i - 1];
                                }
                                else {
                                    double num42;
                                    if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                                        double num43;
                                        double num44;
                                        if (inClose[i - 1] >= inOpen[i - 1]) {
                                            num44 = inClose[i - 1];
                                        }
                                        else {
                                            num44 = inOpen[i - 1];
                                        }
                                        if (inClose[i - 1] >= inOpen[i - 1]) {
                                            num43 = inOpen[i - 1];
                                        }
                                        else {
                                            num43 = inClose[i - 1];
                                        }
                                        num42 = (inHigh[i - 1] - num44) + (num43 - inLow[i - 1]);
                                    }
                                    else {
                                        num42 = 0.0;
                                    }
                                    num45 = num42;
                                }
                                num46 = num45;
                            }
                            num47 = num46;
                        }
                        if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                            num41 = 2.0;
                        }
                        else {
                            num41 = 1.0;
                        }
                        if (num48 >= (inHigh[i - 1] - ((Globals.candleSettings[8].factor * num47) / num41))) {
                            outInteger[outIdx] = -100;
                            outIdx++;
                            goto Label_095E;
                        }
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_095E:
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num40 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num39;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num39 = inHigh[i] - inLow[i];
                }
                else {
                    double num36;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num37;
                        double num38;
                        if (inClose[i] >= inOpen[i]) {
                            num38 = inClose[i];
                        }
                        else {
                            num38 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num37 = inOpen[i];
                        }
                        else {
                            num37 = inClose[i];
                        }
                        num36 = (inHigh[i] - num38) + (num37 - inLow[i]);
                    }
                    else {
                        num36 = 0.0;
                    }
                    num39 = num36;
                }
                num40 = num39;
            }
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num35 = Math.Abs((double)(inClose[BodyTrailingIdx] - inOpen[BodyTrailingIdx]));
            }
            else {
                double num34;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num34 = inHigh[BodyTrailingIdx] - inLow[BodyTrailingIdx];
                }
                else {
                    double num31;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num32;
                        double num33;
                        if (inClose[BodyTrailingIdx] >= inOpen[BodyTrailingIdx]) {
                            num33 = inClose[BodyTrailingIdx];
                        }
                        else {
                            num33 = inOpen[BodyTrailingIdx];
                        }
                        if (inClose[BodyTrailingIdx] >= inOpen[BodyTrailingIdx]) {
                            num32 = inOpen[BodyTrailingIdx];
                        }
                        else {
                            num32 = inClose[BodyTrailingIdx];
                        }
                        num31 = (inHigh[BodyTrailingIdx] - num33) + (num32 - inLow[BodyTrailingIdx]);
                    }
                    else {
                        num31 = 0.0;
                    }
                    num34 = num31;
                }
                num35 = num34;
            }
            BodyPeriodTotal += num40 - num35;
            if (Globals.candleSettings[4].rangeType == RangeType.RealBody) {
                num30 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num29;
                if (Globals.candleSettings[4].rangeType == RangeType.HighLow) {
                    num29 = inHigh[i] - inLow[i];
                }
                else {
                    double num26;
                    if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                        double num27;
                        double num28;
                        if (inClose[i] >= inOpen[i]) {
                            num28 = inClose[i];
                        }
                        else {
                            num28 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num27 = inOpen[i];
                        }
                        else {
                            num27 = inClose[i];
                        }
                        num26 = (inHigh[i] - num28) + (num27 - inLow[i]);
                    }
                    else {
                        num26 = 0.0;
                    }
                    num29 = num26;
                }
                num30 = num29;
            }
            if (Globals.candleSettings[4].rangeType == RangeType.RealBody) {
                num25 = Math.Abs((double)(inClose[ShadowLongTrailingIdx] - inOpen[ShadowLongTrailingIdx]));
            }
            else {
                double num24;
                if (Globals.candleSettings[4].rangeType == RangeType.HighLow) {
                    num24 = inHigh[ShadowLongTrailingIdx] - inLow[ShadowLongTrailingIdx];
                }
                else {
                    double num21;
                    if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                        double num22;
                        double num23;
                        if (inClose[ShadowLongTrailingIdx] >= inOpen[ShadowLongTrailingIdx]) {
                            num23 = inClose[ShadowLongTrailingIdx];
                        }
                        else {
                            num23 = inOpen[ShadowLongTrailingIdx];
                        }
                        if (inClose[ShadowLongTrailingIdx] >= inOpen[ShadowLongTrailingIdx]) {
                            num22 = inOpen[ShadowLongTrailingIdx];
                        }
                        else {
                            num22 = inClose[ShadowLongTrailingIdx];
                        }
                        num21 = (inHigh[ShadowLongTrailingIdx] - num23) + (num22 - inLow[ShadowLongTrailingIdx]);
                    }
                    else {
                        num21 = 0.0;
                    }
                    num24 = num21;
                }
                num25 = num24;
            }
            ShadowLongPeriodTotal += num30 - num25;
            if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                num20 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num19;
                if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                    num19 = inHigh[i] - inLow[i];
                }
                else {
                    double num16;
                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                        double num17;
                        double num18;
                        if (inClose[i] >= inOpen[i]) {
                            num18 = inClose[i];
                        }
                        else {
                            num18 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num17 = inOpen[i];
                        }
                        else {
                            num17 = inClose[i];
                        }
                        num16 = (inHigh[i] - num18) + (num17 - inLow[i]);
                    }
                    else {
                        num16 = 0.0;
                    }
                    num19 = num16;
                }
                num20 = num19;
            }
            if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                num15 = Math.Abs((double)(inClose[ShadowVeryShortTrailingIdx] - inOpen[ShadowVeryShortTrailingIdx]));
            }
            else {
                double num14;
                if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                    num14 = inHigh[ShadowVeryShortTrailingIdx] - inLow[ShadowVeryShortTrailingIdx];
                }
                else {
                    double num11;
                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                        double num12;
                        double num13;
                        if (inClose[ShadowVeryShortTrailingIdx] >= inOpen[ShadowVeryShortTrailingIdx]) {
                            num13 = inClose[ShadowVeryShortTrailingIdx];
                        }
                        else {
                            num13 = inOpen[ShadowVeryShortTrailingIdx];
                        }
                        if (inClose[ShadowVeryShortTrailingIdx] >= inOpen[ShadowVeryShortTrailingIdx]) {
                            num12 = inOpen[ShadowVeryShortTrailingIdx];
                        }
                        else {
                            num12 = inClose[ShadowVeryShortTrailingIdx];
                        }
                        num11 = (inHigh[ShadowVeryShortTrailingIdx] - num13) + (num12 - inLow[ShadowVeryShortTrailingIdx]);
                    }
                    else {
                        num11 = 0.0;
                    }
                    num14 = num11;
                }
                num15 = num14;
            }
            ShadowVeryShortPeriodTotal += num20 - num15;
            if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
            }
            else {
                double num9;
                if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i - 1] - inLow[i - 1];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num8 = inClose[i - 1];
                        }
                        else {
                            num8 = inOpen[i - 1];
                        }
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num7 = inOpen[i - 1];
                        }
                        else {
                            num7 = inClose[i - 1];
                        }
                        num6 = (inHigh[i - 1] - num8) + (num7 - inLow[i - 1]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[NearTrailingIdx] - inOpen[NearTrailingIdx]));
            }
            else {
                double num4;
                if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                    num4 = inHigh[NearTrailingIdx] - inLow[NearTrailingIdx];
                }
                else {
                    double num;
                    if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[NearTrailingIdx] >= inOpen[NearTrailingIdx]) {
                            num3 = inClose[NearTrailingIdx];
                        }
                        else {
                            num3 = inOpen[NearTrailingIdx];
                        }
                        if (inClose[NearTrailingIdx] >= inOpen[NearTrailingIdx]) {
                            num2 = inOpen[NearTrailingIdx];
                        }
                        else {
                            num2 = inClose[NearTrailingIdx];
                        }
                        num = (inHigh[NearTrailingIdx] - num3) + (num2 - inLow[NearTrailingIdx]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            NearPeriodTotal += num10 - num5;
            i++;
            BodyTrailingIdx++;
            ShadowLongTrailingIdx++;
            ShadowVeryShortTrailingIdx++;
            NearTrailingIdx++;
            if (i <= endIdx) {
                goto Label_03FF;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlHarami(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            double num15;
            double num20;
            double num33;
            double num39;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlHaramiLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double BodyLongPeriodTotal = 0.0;
            double BodyShortPeriodTotal = 0.0;
            int BodyLongTrailingIdx = (startIdx - 1) - Globals.candleSettings[0].avgPeriod;
            int BodyShortTrailingIdx = startIdx - Globals.candleSettings[2].avgPeriod;
            int i = BodyLongTrailingIdx;
            while (true) {
                double num49;
                if (i >= (startIdx - 1)) {
                    break;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num49 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num48;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num48 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num45;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num46;
                            double num47;
                            if (inClose[i] >= inOpen[i]) {
                                num47 = inClose[i];
                            }
                            else {
                                num47 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num46 = inOpen[i];
                            }
                            else {
                                num46 = inClose[i];
                            }
                            num45 = (inHigh[i] - num47) + (num46 - inLow[i]);
                        }
                        else {
                            num45 = 0.0;
                        }
                        num48 = num45;
                    }
                    num49 = num48;
                }
                BodyLongPeriodTotal += num49;
                i++;
            }
            i = BodyShortTrailingIdx;
            while (true) {
                double num44;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                    num44 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num43;
                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                        num43 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num40;
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            double num41;
                            double num42;
                            if (inClose[i] >= inOpen[i]) {
                                num42 = inClose[i];
                            }
                            else {
                                num42 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num41 = inOpen[i];
                            }
                            else {
                                num41 = inClose[i];
                            }
                            num40 = (inHigh[i] - num42) + (num41 - inLow[i]);
                        }
                        else {
                            num40 = 0.0;
                        }
                        num43 = num40;
                    }
                    num44 = num43;
                }
                BodyShortPeriodTotal += num44;
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            Label_0234:
            if (Globals.candleSettings[0].avgPeriod != 0.0) {
                num39 = BodyLongPeriodTotal / ((double)Globals.candleSettings[0].avgPeriod);
            }
            else {
                double num38;
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num38 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num37;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num37 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num34;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num35;
                            double num36;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num36 = inClose[i - 1];
                            }
                            else {
                                num36 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num35 = inOpen[i - 1];
                            }
                            else {
                                num35 = inClose[i - 1];
                            }
                            num34 = (inHigh[i - 1] - num36) + (num35 - inLow[i - 1]);
                        }
                        else {
                            num34 = 0.0;
                        }
                        num37 = num34;
                    }
                    num38 = num37;
                }
                num39 = num38;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                num33 = 2.0;
            }
            else {
                num33 = 1.0;
            }
            if (Math.Abs((double)(inClose[i - 1] - inOpen[i - 1])) > ((Globals.candleSettings[0].factor * num39) / num33)) {
                double num26;
                double num32;
                if (Globals.candleSettings[2].avgPeriod != 0.0) {
                    num32 = BodyShortPeriodTotal / ((double)Globals.candleSettings[2].avgPeriod);
                }
                else {
                    double num31;
                    if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                        num31 = Math.Abs((double)(inClose[i] - inOpen[i]));
                    }
                    else {
                        double num30;
                        if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                            num30 = inHigh[i] - inLow[i];
                        }
                        else {
                            double num27;
                            if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                                double num28;
                                double num29;
                                if (inClose[i] >= inOpen[i]) {
                                    num29 = inClose[i];
                                }
                                else {
                                    num29 = inOpen[i];
                                }
                                if (inClose[i] >= inOpen[i]) {
                                    num28 = inOpen[i];
                                }
                                else {
                                    num28 = inClose[i];
                                }
                                num27 = (inHigh[i] - num29) + (num28 - inLow[i]);
                            }
                            else {
                                num27 = 0.0;
                            }
                            num30 = num27;
                        }
                        num31 = num30;
                    }
                    num32 = num31;
                }
                if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                    num26 = 2.0;
                }
                else {
                    num26 = 1.0;
                }
                if (Math.Abs((double)(inClose[i] - inOpen[i])) <= ((Globals.candleSettings[2].factor * num32) / num26)) {
                    double num24;
                    double num25;
                    if (inClose[i] > inOpen[i]) {
                        num25 = inClose[i];
                    }
                    else {
                        num25 = inOpen[i];
                    }
                    if (inClose[i - 1] > inOpen[i - 1]) {
                        num24 = inClose[i - 1];
                    }
                    else {
                        num24 = inOpen[i - 1];
                    }
                    if (num25 < num24) {
                        double num22;
                        double num23;
                        if (inClose[i] < inOpen[i]) {
                            num23 = inClose[i];
                        }
                        else {
                            num23 = inOpen[i];
                        }
                        if (inClose[i - 1] < inOpen[i - 1]) {
                            num22 = inClose[i - 1];
                        }
                        else {
                            num22 = inOpen[i - 1];
                        }
                        if (num23 > num22) {
                            int num21;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num21 = 1;
                            }
                            else {
                                num21 = -1;
                            }
                            outInteger[outIdx] = -num21 * 100;
                            outIdx++;
                            goto Label_0575;
                        }
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_0575:
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num20 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
            }
            else {
                double num19;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num19 = inHigh[i - 1] - inLow[i - 1];
                }
                else {
                    double num16;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num17;
                        double num18;
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num18 = inClose[i - 1];
                        }
                        else {
                            num18 = inOpen[i - 1];
                        }
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num17 = inOpen[i - 1];
                        }
                        else {
                            num17 = inClose[i - 1];
                        }
                        num16 = (inHigh[i - 1] - num18) + (num17 - inLow[i - 1]);
                    }
                    else {
                        num16 = 0.0;
                    }
                    num19 = num16;
                }
                num20 = num19;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num15 = Math.Abs((double)(inClose[BodyLongTrailingIdx] - inOpen[BodyLongTrailingIdx]));
            }
            else {
                double num14;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num14 = inHigh[BodyLongTrailingIdx] - inLow[BodyLongTrailingIdx];
                }
                else {
                    double num11;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num12;
                        double num13;
                        if (inClose[BodyLongTrailingIdx] >= inOpen[BodyLongTrailingIdx]) {
                            num13 = inClose[BodyLongTrailingIdx];
                        }
                        else {
                            num13 = inOpen[BodyLongTrailingIdx];
                        }
                        if (inClose[BodyLongTrailingIdx] >= inOpen[BodyLongTrailingIdx]) {
                            num12 = inOpen[BodyLongTrailingIdx];
                        }
                        else {
                            num12 = inClose[BodyLongTrailingIdx];
                        }
                        num11 = (inHigh[BodyLongTrailingIdx] - num13) + (num12 - inLow[BodyLongTrailingIdx]);
                    }
                    else {
                        num11 = 0.0;
                    }
                    num14 = num11;
                }
                num15 = num14;
            }
            BodyLongPeriodTotal += num20 - num15;
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num9;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i] - inLow[i];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i] >= inOpen[i]) {
                            num8 = inClose[i];
                        }
                        else {
                            num8 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num7 = inOpen[i];
                        }
                        else {
                            num7 = inClose[i];
                        }
                        num6 = (inHigh[i] - num8) + (num7 - inLow[i]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[BodyShortTrailingIdx] - inOpen[BodyShortTrailingIdx]));
            }
            else {
                double num4;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num4 = inHigh[BodyShortTrailingIdx] - inLow[BodyShortTrailingIdx];
                }
                else {
                    double num;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[BodyShortTrailingIdx] >= inOpen[BodyShortTrailingIdx]) {
                            num3 = inClose[BodyShortTrailingIdx];
                        }
                        else {
                            num3 = inOpen[BodyShortTrailingIdx];
                        }
                        if (inClose[BodyShortTrailingIdx] >= inOpen[BodyShortTrailingIdx]) {
                            num2 = inOpen[BodyShortTrailingIdx];
                        }
                        else {
                            num2 = inClose[BodyShortTrailingIdx];
                        }
                        num = (inHigh[BodyShortTrailingIdx] - num3) + (num2 - inLow[BodyShortTrailingIdx]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            BodyShortPeriodTotal += num10 - num5;
            i++;
            BodyLongTrailingIdx++;
            BodyShortTrailingIdx++;
            if (i <= endIdx) {
                goto Label_0234;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlHaramiCross(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            double num15;
            double num20;
            double num33;
            double num39;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlHaramiCrossLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double BodyLongPeriodTotal = 0.0;
            double BodyDojiPeriodTotal = 0.0;
            int BodyLongTrailingIdx = (startIdx - 1) - Globals.candleSettings[0].avgPeriod;
            int BodyDojiTrailingIdx = startIdx - Globals.candleSettings[3].avgPeriod;
            int i = BodyLongTrailingIdx;
            while (true) {
                double num49;
                if (i >= (startIdx - 1)) {
                    break;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num49 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num48;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num48 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num45;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num46;
                            double num47;
                            if (inClose[i] >= inOpen[i]) {
                                num47 = inClose[i];
                            }
                            else {
                                num47 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num46 = inOpen[i];
                            }
                            else {
                                num46 = inClose[i];
                            }
                            num45 = (inHigh[i] - num47) + (num46 - inLow[i]);
                        }
                        else {
                            num45 = 0.0;
                        }
                        num48 = num45;
                    }
                    num49 = num48;
                }
                BodyLongPeriodTotal += num49;
                i++;
            }
            i = BodyDojiTrailingIdx;
            while (true) {
                double num44;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                    num44 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num43;
                    if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                        num43 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num40;
                        if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                            double num41;
                            double num42;
                            if (inClose[i] >= inOpen[i]) {
                                num42 = inClose[i];
                            }
                            else {
                                num42 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num41 = inOpen[i];
                            }
                            else {
                                num41 = inClose[i];
                            }
                            num40 = (inHigh[i] - num42) + (num41 - inLow[i]);
                        }
                        else {
                            num40 = 0.0;
                        }
                        num43 = num40;
                    }
                    num44 = num43;
                }
                BodyDojiPeriodTotal += num44;
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            Label_0234:
            if (Globals.candleSettings[0].avgPeriod != 0.0) {
                num39 = BodyLongPeriodTotal / ((double)Globals.candleSettings[0].avgPeriod);
            }
            else {
                double num38;
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num38 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num37;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num37 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num34;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num35;
                            double num36;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num36 = inClose[i - 1];
                            }
                            else {
                                num36 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num35 = inOpen[i - 1];
                            }
                            else {
                                num35 = inClose[i - 1];
                            }
                            num34 = (inHigh[i - 1] - num36) + (num35 - inLow[i - 1]);
                        }
                        else {
                            num34 = 0.0;
                        }
                        num37 = num34;
                    }
                    num38 = num37;
                }
                num39 = num38;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                num33 = 2.0;
            }
            else {
                num33 = 1.0;
            }
            if (Math.Abs((double)(inClose[i - 1] - inOpen[i - 1])) > ((Globals.candleSettings[0].factor * num39) / num33)) {
                double num26;
                double num32;
                if (Globals.candleSettings[3].avgPeriod != 0.0) {
                    num32 = BodyDojiPeriodTotal / ((double)Globals.candleSettings[3].avgPeriod);
                }
                else {
                    double num31;
                    if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                        num31 = Math.Abs((double)(inClose[i] - inOpen[i]));
                    }
                    else {
                        double num30;
                        if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                            num30 = inHigh[i] - inLow[i];
                        }
                        else {
                            double num27;
                            if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                                double num28;
                                double num29;
                                if (inClose[i] >= inOpen[i]) {
                                    num29 = inClose[i];
                                }
                                else {
                                    num29 = inOpen[i];
                                }
                                if (inClose[i] >= inOpen[i]) {
                                    num28 = inOpen[i];
                                }
                                else {
                                    num28 = inClose[i];
                                }
                                num27 = (inHigh[i] - num29) + (num28 - inLow[i]);
                            }
                            else {
                                num27 = 0.0;
                            }
                            num30 = num27;
                        }
                        num31 = num30;
                    }
                    num32 = num31;
                }
                if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                    num26 = 2.0;
                }
                else {
                    num26 = 1.0;
                }
                if (Math.Abs((double)(inClose[i] - inOpen[i])) <= ((Globals.candleSettings[3].factor * num32) / num26)) {
                    double num24;
                    double num25;
                    if (inClose[i] > inOpen[i]) {
                        num25 = inClose[i];
                    }
                    else {
                        num25 = inOpen[i];
                    }
                    if (inClose[i - 1] > inOpen[i - 1]) {
                        num24 = inClose[i - 1];
                    }
                    else {
                        num24 = inOpen[i - 1];
                    }
                    if (num25 < num24) {
                        double num22;
                        double num23;
                        if (inClose[i] < inOpen[i]) {
                            num23 = inClose[i];
                        }
                        else {
                            num23 = inOpen[i];
                        }
                        if (inClose[i - 1] < inOpen[i - 1]) {
                            num22 = inClose[i - 1];
                        }
                        else {
                            num22 = inOpen[i - 1];
                        }
                        if (num23 > num22) {
                            int num21;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num21 = 1;
                            }
                            else {
                                num21 = -1;
                            }
                            outInteger[outIdx] = -num21 * 100;
                            outIdx++;
                            goto Label_0575;
                        }
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_0575:
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num20 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
            }
            else {
                double num19;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num19 = inHigh[i - 1] - inLow[i - 1];
                }
                else {
                    double num16;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num17;
                        double num18;
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num18 = inClose[i - 1];
                        }
                        else {
                            num18 = inOpen[i - 1];
                        }
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num17 = inOpen[i - 1];
                        }
                        else {
                            num17 = inClose[i - 1];
                        }
                        num16 = (inHigh[i - 1] - num18) + (num17 - inLow[i - 1]);
                    }
                    else {
                        num16 = 0.0;
                    }
                    num19 = num16;
                }
                num20 = num19;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num15 = Math.Abs((double)(inClose[BodyLongTrailingIdx] - inOpen[BodyLongTrailingIdx]));
            }
            else {
                double num14;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num14 = inHigh[BodyLongTrailingIdx] - inLow[BodyLongTrailingIdx];
                }
                else {
                    double num11;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num12;
                        double num13;
                        if (inClose[BodyLongTrailingIdx] >= inOpen[BodyLongTrailingIdx]) {
                            num13 = inClose[BodyLongTrailingIdx];
                        }
                        else {
                            num13 = inOpen[BodyLongTrailingIdx];
                        }
                        if (inClose[BodyLongTrailingIdx] >= inOpen[BodyLongTrailingIdx]) {
                            num12 = inOpen[BodyLongTrailingIdx];
                        }
                        else {
                            num12 = inClose[BodyLongTrailingIdx];
                        }
                        num11 = (inHigh[BodyLongTrailingIdx] - num13) + (num12 - inLow[BodyLongTrailingIdx]);
                    }
                    else {
                        num11 = 0.0;
                    }
                    num14 = num11;
                }
                num15 = num14;
            }
            BodyLongPeriodTotal += num20 - num15;
            if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num9;
                if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i] - inLow[i];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i] >= inOpen[i]) {
                            num8 = inClose[i];
                        }
                        else {
                            num8 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num7 = inOpen[i];
                        }
                        else {
                            num7 = inClose[i];
                        }
                        num6 = (inHigh[i] - num8) + (num7 - inLow[i]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[BodyDojiTrailingIdx] - inOpen[BodyDojiTrailingIdx]));
            }
            else {
                double num4;
                if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                    num4 = inHigh[BodyDojiTrailingIdx] - inLow[BodyDojiTrailingIdx];
                }
                else {
                    double num;
                    if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[BodyDojiTrailingIdx] >= inOpen[BodyDojiTrailingIdx]) {
                            num3 = inClose[BodyDojiTrailingIdx];
                        }
                        else {
                            num3 = inOpen[BodyDojiTrailingIdx];
                        }
                        if (inClose[BodyDojiTrailingIdx] >= inOpen[BodyDojiTrailingIdx]) {
                            num2 = inOpen[BodyDojiTrailingIdx];
                        }
                        else {
                            num2 = inClose[BodyDojiTrailingIdx];
                        }
                        num = (inHigh[BodyDojiTrailingIdx] - num3) + (num2 - inLow[BodyDojiTrailingIdx]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            BodyDojiPeriodTotal += num10 - num5;
            i++;
            BodyLongTrailingIdx++;
            BodyDojiTrailingIdx++;
            if (i <= endIdx) {
                goto Label_0234;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlHignWave(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            double num15;
            double num20;
            double num38;
            double num44;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlHignWaveLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double BodyPeriodTotal = 0.0;
            int BodyTrailingIdx = startIdx - Globals.candleSettings[2].avgPeriod;
            double ShadowPeriodTotal = 0.0;
            int ShadowTrailingIdx = startIdx - Globals.candleSettings[5].avgPeriod;
            int i = BodyTrailingIdx;
            while (true) {
                double num54;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                    num54 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num53;
                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                        num53 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num50;
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            double num51;
                            double num52;
                            if (inClose[i] >= inOpen[i]) {
                                num52 = inClose[i];
                            }
                            else {
                                num52 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num51 = inOpen[i];
                            }
                            else {
                                num51 = inClose[i];
                            }
                            num50 = (inHigh[i] - num52) + (num51 - inLow[i]);
                        }
                        else {
                            num50 = 0.0;
                        }
                        num53 = num50;
                    }
                    num54 = num53;
                }
                BodyPeriodTotal += num54;
                i++;
            }
            i = ShadowTrailingIdx;
            while (true) {
                double num49;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[5].rangeType == RangeType.RealBody) {
                    num49 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num48;
                    if (Globals.candleSettings[5].rangeType == RangeType.HighLow) {
                        num48 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num45;
                        if (Globals.candleSettings[5].rangeType == RangeType.Shadows) {
                            double num46;
                            double num47;
                            if (inClose[i] >= inOpen[i]) {
                                num47 = inClose[i];
                            }
                            else {
                                num47 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num46 = inOpen[i];
                            }
                            else {
                                num46 = inClose[i];
                            }
                            num45 = (inHigh[i] - num47) + (num46 - inLow[i]);
                        }
                        else {
                            num45 = 0.0;
                        }
                        num48 = num45;
                    }
                    num49 = num48;
                }
                ShadowPeriodTotal += num49;
                i++;
            }
            int outIdx = 0;
            Label_022E:
            if (Globals.candleSettings[2].avgPeriod != 0.0) {
                num44 = BodyPeriodTotal / ((double)Globals.candleSettings[2].avgPeriod);
            }
            else {
                double num43;
                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                    num43 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num42;
                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                        num42 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num39;
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            double num40;
                            double num41;
                            if (inClose[i] >= inOpen[i]) {
                                num41 = inClose[i];
                            }
                            else {
                                num41 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num40 = inOpen[i];
                            }
                            else {
                                num40 = inClose[i];
                            }
                            num39 = (inHigh[i] - num41) + (num40 - inLow[i]);
                        }
                        else {
                            num39 = 0.0;
                        }
                        num42 = num39;
                    }
                    num43 = num42;
                }
                num44 = num43;
            }
            if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                num38 = 2.0;
            }
            else {
                num38 = 1.0;
            }
            if (Math.Abs((double)(inClose[i] - inOpen[i])) < ((Globals.candleSettings[2].factor * num44) / num38)) {
                double num30;
                double num36;
                double num37;
                if (inClose[i] >= inOpen[i]) {
                    num37 = inClose[i];
                }
                else {
                    num37 = inOpen[i];
                }
                if (Globals.candleSettings[5].avgPeriod != 0.0) {
                    num36 = ShadowPeriodTotal / ((double)Globals.candleSettings[5].avgPeriod);
                }
                else {
                    double num35;
                    if (Globals.candleSettings[5].rangeType == RangeType.RealBody) {
                        num35 = Math.Abs((double)(inClose[i] - inOpen[i]));
                    }
                    else {
                        double num34;
                        if (Globals.candleSettings[5].rangeType == RangeType.HighLow) {
                            num34 = inHigh[i] - inLow[i];
                        }
                        else {
                            double num31;
                            if (Globals.candleSettings[5].rangeType == RangeType.Shadows) {
                                double num32;
                                double num33;
                                if (inClose[i] >= inOpen[i]) {
                                    num33 = inClose[i];
                                }
                                else {
                                    num33 = inOpen[i];
                                }
                                if (inClose[i] >= inOpen[i]) {
                                    num32 = inOpen[i];
                                }
                                else {
                                    num32 = inClose[i];
                                }
                                num31 = (inHigh[i] - num33) + (num32 - inLow[i]);
                            }
                            else {
                                num31 = 0.0;
                            }
                            num34 = num31;
                        }
                        num35 = num34;
                    }
                    num36 = num35;
                }
                if (Globals.candleSettings[5].rangeType == RangeType.Shadows) {
                    num30 = 2.0;
                }
                else {
                    num30 = 1.0;
                }
                if ((inHigh[i] - num37) > ((Globals.candleSettings[5].factor * num36) / num30)) {
                    double num22;
                    double num28;
                    double num29;
                    if (inClose[i] >= inOpen[i]) {
                        num29 = inOpen[i];
                    }
                    else {
                        num29 = inClose[i];
                    }
                    if (Globals.candleSettings[5].avgPeriod != 0.0) {
                        num28 = ShadowPeriodTotal / ((double)Globals.candleSettings[5].avgPeriod);
                    }
                    else {
                        double num27;
                        if (Globals.candleSettings[5].rangeType == RangeType.RealBody) {
                            num27 = Math.Abs((double)(inClose[i] - inOpen[i]));
                        }
                        else {
                            double num26;
                            if (Globals.candleSettings[5].rangeType == RangeType.HighLow) {
                                num26 = inHigh[i] - inLow[i];
                            }
                            else {
                                double num23;
                                if (Globals.candleSettings[5].rangeType == RangeType.Shadows) {
                                    double num24;
                                    double num25;
                                    if (inClose[i] >= inOpen[i]) {
                                        num25 = inClose[i];
                                    }
                                    else {
                                        num25 = inOpen[i];
                                    }
                                    if (inClose[i] >= inOpen[i]) {
                                        num24 = inOpen[i];
                                    }
                                    else {
                                        num24 = inClose[i];
                                    }
                                    num23 = (inHigh[i] - num25) + (num24 - inLow[i]);
                                }
                                else {
                                    num23 = 0.0;
                                }
                                num26 = num23;
                            }
                            num27 = num26;
                        }
                        num28 = num27;
                    }
                    if (Globals.candleSettings[5].rangeType == RangeType.Shadows) {
                        num22 = 2.0;
                    }
                    else {
                        num22 = 1.0;
                    }
                    if ((num29 - inLow[i]) > ((Globals.candleSettings[5].factor * num28) / num22)) {
                        int num21;
                        if (inClose[i] >= inOpen[i]) {
                            num21 = 1;
                        }
                        else {
                            num21 = -1;
                        }
                        outInteger[outIdx] = num21 * 100;
                        outIdx++;
                        goto Label_062D;
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_062D:
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num20 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num19;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num19 = inHigh[i] - inLow[i];
                }
                else {
                    double num16;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num17;
                        double num18;
                        if (inClose[i] >= inOpen[i]) {
                            num18 = inClose[i];
                        }
                        else {
                            num18 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num17 = inOpen[i];
                        }
                        else {
                            num17 = inClose[i];
                        }
                        num16 = (inHigh[i] - num18) + (num17 - inLow[i]);
                    }
                    else {
                        num16 = 0.0;
                    }
                    num19 = num16;
                }
                num20 = num19;
            }
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num15 = Math.Abs((double)(inClose[BodyTrailingIdx] - inOpen[BodyTrailingIdx]));
            }
            else {
                double num14;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num14 = inHigh[BodyTrailingIdx] - inLow[BodyTrailingIdx];
                }
                else {
                    double num11;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num12;
                        double num13;
                        if (inClose[BodyTrailingIdx] >= inOpen[BodyTrailingIdx]) {
                            num13 = inClose[BodyTrailingIdx];
                        }
                        else {
                            num13 = inOpen[BodyTrailingIdx];
                        }
                        if (inClose[BodyTrailingIdx] >= inOpen[BodyTrailingIdx]) {
                            num12 = inOpen[BodyTrailingIdx];
                        }
                        else {
                            num12 = inClose[BodyTrailingIdx];
                        }
                        num11 = (inHigh[BodyTrailingIdx] - num13) + (num12 - inLow[BodyTrailingIdx]);
                    }
                    else {
                        num11 = 0.0;
                    }
                    num14 = num11;
                }
                num15 = num14;
            }
            BodyPeriodTotal += num20 - num15;
            if (Globals.candleSettings[5].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num9;
                if (Globals.candleSettings[5].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i] - inLow[i];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[5].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i] >= inOpen[i]) {
                            num8 = inClose[i];
                        }
                        else {
                            num8 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num7 = inOpen[i];
                        }
                        else {
                            num7 = inClose[i];
                        }
                        num6 = (inHigh[i] - num8) + (num7 - inLow[i]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[5].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[ShadowTrailingIdx] - inOpen[ShadowTrailingIdx]));
            }
            else {
                double num4;
                if (Globals.candleSettings[5].rangeType == RangeType.HighLow) {
                    num4 = inHigh[ShadowTrailingIdx] - inLow[ShadowTrailingIdx];
                }
                else {
                    double num;
                    if (Globals.candleSettings[5].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[ShadowTrailingIdx] >= inOpen[ShadowTrailingIdx]) {
                            num3 = inClose[ShadowTrailingIdx];
                        }
                        else {
                            num3 = inOpen[ShadowTrailingIdx];
                        }
                        if (inClose[ShadowTrailingIdx] >= inOpen[ShadowTrailingIdx]) {
                            num2 = inOpen[ShadowTrailingIdx];
                        }
                        else {
                            num2 = inClose[ShadowTrailingIdx];
                        }
                        num = (inHigh[ShadowTrailingIdx] - num3) + (num2 - inLow[ShadowTrailingIdx]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            ShadowPeriodTotal += num10 - num5;
            i++;
            BodyTrailingIdx++;
            ShadowTrailingIdx++;
            if (i <= endIdx) {
                goto Label_022E;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlHikkake(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlHikkakeLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            int patternIdx = 0;
            int patternResult = 0;
            int i = startIdx - 3;
            while (true) {
                if (i >= startIdx) {
                    break;
                }
                if (((inHigh[i - 1] < inHigh[i - 2]) && (inLow[i - 1] > inLow[i - 2])) && (((inHigh[i] < inHigh[i - 1]) && (inLow[i] < inLow[i - 1])) || ((inHigh[i] > inHigh[i - 1]) && (inLow[i] > inLow[i - 1])))) {
                    patternResult = ((inHigh[i] >= inHigh[i - 1]) ? -1 : 1) * 100;
                    patternIdx = i;
                }
                else if ((i <= (patternIdx + 3)) && (((patternResult > 0) && (inClose[i] > inHigh[patternIdx - 1])) || ((patternResult < 0) && (inClose[i] < inLow[patternIdx - 1])))) {
                    patternIdx = 0;
                }
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            do {
                if (((inHigh[i - 1] < inHigh[i - 2]) && (inLow[i - 1] > inLow[i - 2])) && (((inHigh[i] < inHigh[i - 1]) && (inLow[i] < inLow[i - 1])) || ((inHigh[i] > inHigh[i - 1]) && (inLow[i] > inLow[i - 1])))) {
                    patternResult = ((inHigh[i] >= inHigh[i - 1]) ? -1 : 1) * 100;
                    patternIdx = i;
                    outInteger[outIdx] = patternResult;
                    outIdx++;
                }
                else if ((i <= (patternIdx + 3)) && (((patternResult > 0) && (inClose[i] > inHigh[patternIdx - 1])) || ((patternResult < 0) && (inClose[i] < inLow[patternIdx - 1])))) {
                    int num;
                    if (patternResult > 0) {
                        num = 1;
                    }
                    else {
                        num = -1;
                    }
                    outInteger[outIdx] = patternResult + (num * 100);
                    outIdx++;
                    patternIdx = 0;
                }
                else {
                    outInteger[outIdx] = 0;
                    outIdx++;
                }
                i++;
            }
            while (i <= endIdx);
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlHikkakeMod(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            int outIdx;
            double num5;
            double num10;
            double num12;
            double num18;
            double num30;
            double num35;
            double num36;
            double num42;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlHikkakeModLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double NearPeriodTotal = 0.0;
            int NearTrailingIdx = (startIdx - 3) - Globals.candleSettings[8].avgPeriod;
            int i = NearTrailingIdx;
            while (true) {
                double num54;
                if (i >= (startIdx - 3)) {
                    break;
                }
                if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                    num54 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                }
                else {
                    double num53;
                    if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                        num53 = inHigh[i - 2] - inLow[i - 2];
                    }
                    else {
                        double num50;
                        if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                            double num51;
                            double num52;
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num52 = inClose[i - 2];
                            }
                            else {
                                num52 = inOpen[i - 2];
                            }
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num51 = inOpen[i - 2];
                            }
                            else {
                                num51 = inClose[i - 2];
                            }
                            num50 = (inHigh[i - 2] - num52) + (num51 - inLow[i - 2]);
                        }
                        else {
                            num50 = 0.0;
                        }
                        num53 = num50;
                    }
                    num54 = num53;
                }
                NearPeriodTotal += num54;
                i++;
            }
            int patternIdx = 0;
            int patternResult = 0;
            i = startIdx - 3;
            Label_0174:
            if (i >= startIdx) {
                i = startIdx;
                outIdx = 0;
                goto Label_069A;
            }
            if (((inHigh[i - 2] >= inHigh[i - 3]) || (inLow[i - 2] <= inLow[i - 3])) || ((inHigh[i - 1] >= inHigh[i - 2]) || (inLow[i - 1] <= inLow[i - 2]))) {
                goto Label_04C0;
            }
            if ((inHigh[i] < inHigh[i - 1]) && (inLow[i] < inLow[i - 1])) {
                double num43;
                double num49;
                if (Globals.candleSettings[8].avgPeriod != 0.0) {
                    num49 = NearPeriodTotal / ((double)Globals.candleSettings[8].avgPeriod);
                }
                else {
                    double num48;
                    if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                        num48 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                    }
                    else {
                        double num47;
                        if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                            num47 = inHigh[i - 2] - inLow[i - 2];
                        }
                        else {
                            double num44;
                            if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                                double num45;
                                double num46;
                                if (inClose[i - 2] >= inOpen[i - 2]) {
                                    num46 = inClose[i - 2];
                                }
                                else {
                                    num46 = inOpen[i - 2];
                                }
                                if (inClose[i - 2] >= inOpen[i - 2]) {
                                    num45 = inOpen[i - 2];
                                }
                                else {
                                    num45 = inClose[i - 2];
                                }
                                num44 = (inHigh[i - 2] - num46) + (num45 - inLow[i - 2]);
                            }
                            else {
                                num44 = 0.0;
                            }
                            num47 = num44;
                        }
                        num48 = num47;
                    }
                    num49 = num48;
                }
                if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                    num43 = 2.0;
                }
                else {
                    num43 = 1.0;
                }
                if (inClose[i - 2] <= (inLow[i - 2] + ((Globals.candleSettings[8].factor * num49) / num43))) {
                    goto Label_04A9;
                }
            }
            if ((inHigh[i] <= inHigh[i - 1]) || (inLow[i] <= inLow[i - 1])) {
                goto Label_04C0;
            }
            if (Globals.candleSettings[8].avgPeriod != 0.0) {
                num42 = NearPeriodTotal / ((double)Globals.candleSettings[8].avgPeriod);
            }
            else {
                double num41;
                if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                    num41 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                }
                else {
                    double num40;
                    if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                        num40 = inHigh[i - 2] - inLow[i - 2];
                    }
                    else {
                        double num37;
                        if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                            double num38;
                            double num39;
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num39 = inClose[i - 2];
                            }
                            else {
                                num39 = inOpen[i - 2];
                            }
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num38 = inOpen[i - 2];
                            }
                            else {
                                num38 = inClose[i - 2];
                            }
                            num37 = (inHigh[i - 2] - num39) + (num38 - inLow[i - 2]);
                        }
                        else {
                            num37 = 0.0;
                        }
                        num40 = num37;
                    }
                    num41 = num40;
                }
                num42 = num41;
            }
            if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                num36 = 2.0;
            }
            else {
                num36 = 1.0;
            }
            if (inClose[i - 2] < (inHigh[i - 2] - ((Globals.candleSettings[8].factor * num42) / num36))) {
                goto Label_04C0;
            }
            Label_04A9:
            patternResult = ((inHigh[i] >= inHigh[i - 1]) ? -1 : 1) * 100;
            patternIdx = i;
            goto Label_04E9;
            Label_04C0:
            if ((i <= (patternIdx + 3)) && (((patternResult > 0) && (inClose[i] > inHigh[patternIdx - 1])) || ((patternResult < 0) && (inClose[i] < inLow[patternIdx - 1])))) {
                patternIdx = 0;
            }
            Label_04E9:
            if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                num35 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
            }
            else {
                double num34;
                if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                    num34 = inHigh[i - 2] - inLow[i - 2];
                }
                else {
                    double num31;
                    if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                        double num32;
                        double num33;
                        if (inClose[i - 2] >= inOpen[i - 2]) {
                            num33 = inClose[i - 2];
                        }
                        else {
                            num33 = inOpen[i - 2];
                        }
                        if (inClose[i - 2] >= inOpen[i - 2]) {
                            num32 = inOpen[i - 2];
                        }
                        else {
                            num32 = inClose[i - 2];
                        }
                        num31 = (inHigh[i - 2] - num33) + (num32 - inLow[i - 2]);
                    }
                    else {
                        num31 = 0.0;
                    }
                    num34 = num31;
                }
                num35 = num34;
            }
            if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                num30 = Math.Abs((double)(inClose[NearTrailingIdx - 2] - inOpen[NearTrailingIdx - 2]));
            }
            else {
                double num29;
                if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                    num29 = inHigh[NearTrailingIdx - 2] - inLow[NearTrailingIdx - 2];
                }
                else {
                    double num26;
                    if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                        double num27;
                        double num28;
                        if (inClose[NearTrailingIdx - 2] >= inOpen[NearTrailingIdx - 2]) {
                            num28 = inClose[NearTrailingIdx - 2];
                        }
                        else {
                            num28 = inOpen[NearTrailingIdx - 2];
                        }
                        if (inClose[NearTrailingIdx - 2] >= inOpen[NearTrailingIdx - 2]) {
                            num27 = inOpen[NearTrailingIdx - 2];
                        }
                        else {
                            num27 = inClose[NearTrailingIdx - 2];
                        }
                        num26 = (inHigh[NearTrailingIdx - 2] - num28) + (num27 - inLow[NearTrailingIdx - 2]);
                    }
                    else {
                        num26 = 0.0;
                    }
                    num29 = num26;
                }
                num30 = num29;
            }
            NearPeriodTotal += num35 - num30;
            NearTrailingIdx++;
            i++;
            goto Label_0174;
            Label_069A:
            if (((inHigh[i - 2] >= inHigh[i - 3]) || (inLow[i - 2] <= inLow[i - 3])) || ((inHigh[i - 1] >= inHigh[i - 2]) || (inLow[i - 1] <= inLow[i - 2]))) {
                goto Label_09E9;
            }
            if ((inHigh[i] < inHigh[i - 1]) && (inLow[i] < inLow[i - 1])) {
                double num19;
                double num25;
                if (Globals.candleSettings[8].avgPeriod != 0.0) {
                    num25 = NearPeriodTotal / ((double)Globals.candleSettings[8].avgPeriod);
                }
                else {
                    double num24;
                    if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                        num24 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                    }
                    else {
                        double num23;
                        if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                            num23 = inHigh[i - 2] - inLow[i - 2];
                        }
                        else {
                            double num20;
                            if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                                double num21;
                                double num22;
                                if (inClose[i - 2] >= inOpen[i - 2]) {
                                    num22 = inClose[i - 2];
                                }
                                else {
                                    num22 = inOpen[i - 2];
                                }
                                if (inClose[i - 2] >= inOpen[i - 2]) {
                                    num21 = inOpen[i - 2];
                                }
                                else {
                                    num21 = inClose[i - 2];
                                }
                                num20 = (inHigh[i - 2] - num22) + (num21 - inLow[i - 2]);
                            }
                            else {
                                num20 = 0.0;
                            }
                            num23 = num20;
                        }
                        num24 = num23;
                    }
                    num25 = num24;
                }
                if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                    num19 = 2.0;
                }
                else {
                    num19 = 1.0;
                }
                if (inClose[i - 2] <= (inLow[i - 2] + ((Globals.candleSettings[8].factor * num25) / num19))) {
                    goto Label_09C8;
                }
            }
            if ((inHigh[i] <= inHigh[i - 1]) || (inLow[i] <= inLow[i - 1])) {
                goto Label_09E9;
            }
            if (Globals.candleSettings[8].avgPeriod != 0.0) {
                num18 = NearPeriodTotal / ((double)Globals.candleSettings[8].avgPeriod);
            }
            else {
                double num17;
                if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                    num17 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                }
                else {
                    double num16;
                    if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                        num16 = inHigh[i - 2] - inLow[i - 2];
                    }
                    else {
                        double num13;
                        if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                            double num14;
                            double num15;
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num15 = inClose[i - 2];
                            }
                            else {
                                num15 = inOpen[i - 2];
                            }
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num14 = inOpen[i - 2];
                            }
                            else {
                                num14 = inClose[i - 2];
                            }
                            num13 = (inHigh[i - 2] - num15) + (num14 - inLow[i - 2]);
                        }
                        else {
                            num13 = 0.0;
                        }
                        num16 = num13;
                    }
                    num17 = num16;
                }
                num18 = num17;
            }
            if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                num12 = 2.0;
            }
            else {
                num12 = 1.0;
            }
            if (inClose[i - 2] < (inHigh[i - 2] - ((Globals.candleSettings[8].factor * num18) / num12))) {
                goto Label_09E9;
            }
            Label_09C8:
            patternResult = ((inHigh[i] >= inHigh[i - 1]) ? -1 : 1) * 100;
            patternIdx = i;
            outInteger[outIdx] = patternResult;
            outIdx++;
            goto Label_0A3A;
            Label_09E9:
            if ((i <= (patternIdx + 3)) && (((patternResult > 0) && (inClose[i] > inHigh[patternIdx - 1])) || ((patternResult < 0) && (inClose[i] < inLow[patternIdx - 1])))) {
                int num11;
                if (patternResult > 0) {
                    num11 = 1;
                }
                else {
                    num11 = -1;
                }
                outInteger[outIdx] = patternResult + (num11 * 100);
                outIdx++;
                patternIdx = 0;
            }
            else {
                outInteger[outIdx] = 0;
                outIdx++;
            }
            Label_0A3A:
            if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
            }
            else {
                double num9;
                if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i - 2] - inLow[i - 2];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i - 2] >= inOpen[i - 2]) {
                            num8 = inClose[i - 2];
                        }
                        else {
                            num8 = inOpen[i - 2];
                        }
                        if (inClose[i - 2] >= inOpen[i - 2]) {
                            num7 = inOpen[i - 2];
                        }
                        else {
                            num7 = inClose[i - 2];
                        }
                        num6 = (inHigh[i - 2] - num8) + (num7 - inLow[i - 2]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[NearTrailingIdx - 2] - inOpen[NearTrailingIdx - 2]));
            }
            else {
                double num4;
                if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                    num4 = inHigh[NearTrailingIdx - 2] - inLow[NearTrailingIdx - 2];
                }
                else {
                    double num;
                    if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[NearTrailingIdx - 2] >= inOpen[NearTrailingIdx - 2]) {
                            num3 = inClose[NearTrailingIdx - 2];
                        }
                        else {
                            num3 = inOpen[NearTrailingIdx - 2];
                        }
                        if (inClose[NearTrailingIdx - 2] >= inOpen[NearTrailingIdx - 2]) {
                            num2 = inOpen[NearTrailingIdx - 2];
                        }
                        else {
                            num2 = inClose[NearTrailingIdx - 2];
                        }
                        num = (inHigh[NearTrailingIdx - 2] - num3) + (num2 - inLow[NearTrailingIdx - 2]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            NearPeriodTotal += num10 - num5;
            NearTrailingIdx++;
            i++;
            if (i <= endIdx) {
                goto Label_069A;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlHomingPigeon(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            double num15;
            double num20;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlHomingPigeonLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double BodyLongPeriodTotal = 0.0;
            double BodyShortPeriodTotal = 0.0;
            int BodyLongTrailingIdx = startIdx - Globals.candleSettings[0].avgPeriod;
            int BodyShortTrailingIdx = startIdx - Globals.candleSettings[2].avgPeriod;
            int i = BodyLongTrailingIdx;
            while (true) {
                double num44;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num44 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num43;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num43 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num40;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num41;
                            double num42;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num42 = inClose[i - 1];
                            }
                            else {
                                num42 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num41 = inOpen[i - 1];
                            }
                            else {
                                num41 = inClose[i - 1];
                            }
                            num40 = (inHigh[i - 1] - num42) + (num41 - inLow[i - 1]);
                        }
                        else {
                            num40 = 0.0;
                        }
                        num43 = num40;
                    }
                    num44 = num43;
                }
                BodyLongPeriodTotal += num44;
                i++;
            }
            i = BodyShortTrailingIdx;
            while (true) {
                double num39;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                    num39 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num38;
                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                        num38 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num35;
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            double num36;
                            double num37;
                            if (inClose[i] >= inOpen[i]) {
                                num37 = inClose[i];
                            }
                            else {
                                num37 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num36 = inOpen[i];
                            }
                            else {
                                num36 = inClose[i];
                            }
                            num35 = (inHigh[i] - num37) + (num36 - inLow[i]);
                        }
                        else {
                            num35 = 0.0;
                        }
                        num38 = num35;
                    }
                    num39 = num38;
                }
                BodyShortPeriodTotal += num39;
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            Label_024F:
            if ((((inClose[i - 1] < inOpen[i - 1]) ? -1 : 1) == -1) && (((inClose[i] < inOpen[i]) ? -1 : 1) == -1)) {
                double num28;
                double num34;
                if (Globals.candleSettings[0].avgPeriod != 0.0) {
                    num34 = BodyLongPeriodTotal / ((double)Globals.candleSettings[0].avgPeriod);
                }
                else {
                    double num33;
                    if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                        num33 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                    }
                    else {
                        double num32;
                        if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                            num32 = inHigh[i - 1] - inLow[i - 1];
                        }
                        else {
                            double num29;
                            if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                                double num30;
                                double num31;
                                if (inClose[i - 1] >= inOpen[i - 1]) {
                                    num31 = inClose[i - 1];
                                }
                                else {
                                    num31 = inOpen[i - 1];
                                }
                                if (inClose[i - 1] >= inOpen[i - 1]) {
                                    num30 = inOpen[i - 1];
                                }
                                else {
                                    num30 = inClose[i - 1];
                                }
                                num29 = (inHigh[i - 1] - num31) + (num30 - inLow[i - 1]);
                            }
                            else {
                                num29 = 0.0;
                            }
                            num32 = num29;
                        }
                        num33 = num32;
                    }
                    num34 = num33;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                    num28 = 2.0;
                }
                else {
                    num28 = 1.0;
                }
                if (Math.Abs((double)(inClose[i - 1] - inOpen[i - 1])) > ((Globals.candleSettings[0].factor * num34) / num28)) {
                    double num21;
                    double num27;
                    if (Globals.candleSettings[2].avgPeriod != 0.0) {
                        num27 = BodyShortPeriodTotal / ((double)Globals.candleSettings[2].avgPeriod);
                    }
                    else {
                        double num26;
                        if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                            num26 = Math.Abs((double)(inClose[i] - inOpen[i]));
                        }
                        else {
                            double num25;
                            if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                                num25 = inHigh[i] - inLow[i];
                            }
                            else {
                                double num22;
                                if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                                    double num23;
                                    double num24;
                                    if (inClose[i] >= inOpen[i]) {
                                        num24 = inClose[i];
                                    }
                                    else {
                                        num24 = inOpen[i];
                                    }
                                    if (inClose[i] >= inOpen[i]) {
                                        num23 = inOpen[i];
                                    }
                                    else {
                                        num23 = inClose[i];
                                    }
                                    num22 = (inHigh[i] - num24) + (num23 - inLow[i]);
                                }
                                else {
                                    num22 = 0.0;
                                }
                                num25 = num22;
                            }
                            num26 = num25;
                        }
                        num27 = num26;
                    }
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        num21 = 2.0;
                    }
                    else {
                        num21 = 1.0;
                    }
                    if (((Math.Abs((double)(inClose[i] - inOpen[i])) <= ((Globals.candleSettings[2].factor * num27) / num21)) && (inOpen[i] < inOpen[i - 1])) && (inClose[i] > inClose[i - 1])) {
                        outInteger[outIdx] = 100;
                        outIdx++;
                        goto Label_0540;
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_0540:
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num20 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
            }
            else {
                double num19;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num19 = inHigh[i - 1] - inLow[i - 1];
                }
                else {
                    double num16;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num17;
                        double num18;
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num18 = inClose[i - 1];
                        }
                        else {
                            num18 = inOpen[i - 1];
                        }
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num17 = inOpen[i - 1];
                        }
                        else {
                            num17 = inClose[i - 1];
                        }
                        num16 = (inHigh[i - 1] - num18) + (num17 - inLow[i - 1]);
                    }
                    else {
                        num16 = 0.0;
                    }
                    num19 = num16;
                }
                num20 = num19;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num15 = Math.Abs((double)(inClose[BodyLongTrailingIdx - 1] - inOpen[BodyLongTrailingIdx - 1]));
            }
            else {
                double num14;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num14 = inHigh[BodyLongTrailingIdx - 1] - inLow[BodyLongTrailingIdx - 1];
                }
                else {
                    double num11;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num12;
                        double num13;
                        if (inClose[BodyLongTrailingIdx - 1] >= inOpen[BodyLongTrailingIdx - 1]) {
                            num13 = inClose[BodyLongTrailingIdx - 1];
                        }
                        else {
                            num13 = inOpen[BodyLongTrailingIdx - 1];
                        }
                        if (inClose[BodyLongTrailingIdx - 1] >= inOpen[BodyLongTrailingIdx - 1]) {
                            num12 = inOpen[BodyLongTrailingIdx - 1];
                        }
                        else {
                            num12 = inClose[BodyLongTrailingIdx - 1];
                        }
                        num11 = (inHigh[BodyLongTrailingIdx - 1] - num13) + (num12 - inLow[BodyLongTrailingIdx - 1]);
                    }
                    else {
                        num11 = 0.0;
                    }
                    num14 = num11;
                }
                num15 = num14;
            }
            BodyLongPeriodTotal += num20 - num15;
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num9;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i] - inLow[i];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i] >= inOpen[i]) {
                            num8 = inClose[i];
                        }
                        else {
                            num8 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num7 = inOpen[i];
                        }
                        else {
                            num7 = inClose[i];
                        }
                        num6 = (inHigh[i] - num8) + (num7 - inLow[i]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[BodyShortTrailingIdx] - inOpen[BodyShortTrailingIdx]));
            }
            else {
                double num4;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num4 = inHigh[BodyShortTrailingIdx] - inLow[BodyShortTrailingIdx];
                }
                else {
                    double num;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[BodyShortTrailingIdx] >= inOpen[BodyShortTrailingIdx]) {
                            num3 = inClose[BodyShortTrailingIdx];
                        }
                        else {
                            num3 = inOpen[BodyShortTrailingIdx];
                        }
                        if (inClose[BodyShortTrailingIdx] >= inOpen[BodyShortTrailingIdx]) {
                            num2 = inOpen[BodyShortTrailingIdx];
                        }
                        else {
                            num2 = inClose[BodyShortTrailingIdx];
                        }
                        num = (inHigh[BodyShortTrailingIdx] - num3) + (num2 - inLow[BodyShortTrailingIdx]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            BodyShortPeriodTotal += num10 - num5;
            i++;
            BodyLongTrailingIdx++;
            BodyShortTrailingIdx++;
            if (i <= endIdx) {
                goto Label_024F;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlIdentical3Crows(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            int totIdx;
            double[] ShadowVeryShortPeriodTotal = new double[3];
            double[] EqualPeriodTotal = new double[3];
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlIdentical3CrowsLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            ShadowVeryShortPeriodTotal[2] = 0.0;
            ShadowVeryShortPeriodTotal[1] = 0.0;
            ShadowVeryShortPeriodTotal[0] = 0.0;
            int ShadowVeryShortTrailingIdx = startIdx - Globals.candleSettings[7].avgPeriod;
            EqualPeriodTotal[2] = 0.0;
            EqualPeriodTotal[1] = 0.0;
            EqualPeriodTotal[0] = 0.0;
            int EqualTrailingIdx = startIdx - Globals.candleSettings[10].avgPeriod;
            int i = ShadowVeryShortTrailingIdx;
            while (true) {
                double num87;
                double num92;
                double num97;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num97 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                }
                else {
                    double num96;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num96 = inHigh[i - 2] - inLow[i - 2];
                    }
                    else {
                        double num93;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num94;
                            double num95;
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num95 = inClose[i - 2];
                            }
                            else {
                                num95 = inOpen[i - 2];
                            }
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num94 = inOpen[i - 2];
                            }
                            else {
                                num94 = inClose[i - 2];
                            }
                            num93 = (inHigh[i - 2] - num95) + (num94 - inLow[i - 2]);
                        }
                        else {
                            num93 = 0.0;
                        }
                        num96 = num93;
                    }
                    num97 = num96;
                }
                ShadowVeryShortPeriodTotal[2] += num97;
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num92 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num91;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num91 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num88;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num89;
                            double num90;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num90 = inClose[i - 1];
                            }
                            else {
                                num90 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num89 = inOpen[i - 1];
                            }
                            else {
                                num89 = inClose[i - 1];
                            }
                            num88 = (inHigh[i - 1] - num90) + (num89 - inLow[i - 1]);
                        }
                        else {
                            num88 = 0.0;
                        }
                        num91 = num88;
                    }
                    num92 = num91;
                }
                ShadowVeryShortPeriodTotal[1] += num92;
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num87 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num86;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num86 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num83;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num84;
                            double num85;
                            if (inClose[i] >= inOpen[i]) {
                                num85 = inClose[i];
                            }
                            else {
                                num85 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num84 = inOpen[i];
                            }
                            else {
                                num84 = inClose[i];
                            }
                            num83 = (inHigh[i] - num85) + (num84 - inLow[i]);
                        }
                        else {
                            num83 = 0.0;
                        }
                        num86 = num83;
                    }
                    num87 = num86;
                }
                ShadowVeryShortPeriodTotal[0] += num87;
                i++;
            }
            i = EqualTrailingIdx;
            while (true) {
                double num77;
                double num82;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                    num82 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                }
                else {
                    double num81;
                    if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                        num81 = inHigh[i - 2] - inLow[i - 2];
                    }
                    else {
                        double num78;
                        if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                            double num79;
                            double num80;
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num80 = inClose[i - 2];
                            }
                            else {
                                num80 = inOpen[i - 2];
                            }
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num79 = inOpen[i - 2];
                            }
                            else {
                                num79 = inClose[i - 2];
                            }
                            num78 = (inHigh[i - 2] - num80) + (num79 - inLow[i - 2]);
                        }
                        else {
                            num78 = 0.0;
                        }
                        num81 = num78;
                    }
                    num82 = num81;
                }
                EqualPeriodTotal[2] += num82;
                if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                    num77 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num76;
                    if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                        num76 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num73;
                        if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                            double num74;
                            double num75;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num75 = inClose[i - 1];
                            }
                            else {
                                num75 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num74 = inOpen[i - 1];
                            }
                            else {
                                num74 = inClose[i - 1];
                            }
                            num73 = (inHigh[i - 1] - num75) + (num74 - inLow[i - 1]);
                        }
                        else {
                            num73 = 0.0;
                        }
                        num76 = num73;
                    }
                    num77 = num76;
                }
                EqualPeriodTotal[1] += num77;
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            Label_0529:
            if (((inClose[i - 2] < inOpen[i - 2]) ? -1 : 1) == -1) {
                double num65;
                double num71;
                double num72;
                if (inClose[i - 2] >= inOpen[i - 2]) {
                    num72 = inOpen[i - 2];
                }
                else {
                    num72 = inClose[i - 2];
                }
                if (Globals.candleSettings[7].avgPeriod != 0.0) {
                    num71 = ShadowVeryShortPeriodTotal[2] / ((double)Globals.candleSettings[7].avgPeriod);
                }
                else {
                    double num70;
                    if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                        num70 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                    }
                    else {
                        double num69;
                        if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                            num69 = inHigh[i - 2] - inLow[i - 2];
                        }
                        else {
                            double num66;
                            if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                double num67;
                                double num68;
                                if (inClose[i - 2] >= inOpen[i - 2]) {
                                    num68 = inClose[i - 2];
                                }
                                else {
                                    num68 = inOpen[i - 2];
                                }
                                if (inClose[i - 2] >= inOpen[i - 2]) {
                                    num67 = inOpen[i - 2];
                                }
                                else {
                                    num67 = inClose[i - 2];
                                }
                                num66 = (inHigh[i - 2] - num68) + (num67 - inLow[i - 2]);
                            }
                            else {
                                num66 = 0.0;
                            }
                            num69 = num66;
                        }
                        num70 = num69;
                    }
                    num71 = num70;
                }
                if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                    num65 = 2.0;
                }
                else {
                    num65 = 1.0;
                }
                if (((num72 - inLow[i - 2]) < ((Globals.candleSettings[7].factor * num71) / num65)) && (((inClose[i - 1] < inOpen[i - 1]) ? -1 : 1) == -1)) {
                    double num57;
                    double num63;
                    double num64;
                    if (inClose[i - 1] >= inOpen[i - 1]) {
                        num64 = inOpen[i - 1];
                    }
                    else {
                        num64 = inClose[i - 1];
                    }
                    if (Globals.candleSettings[7].avgPeriod != 0.0) {
                        num63 = ShadowVeryShortPeriodTotal[1] / ((double)Globals.candleSettings[7].avgPeriod);
                    }
                    else {
                        double num62;
                        if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                            num62 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                        }
                        else {
                            double num61;
                            if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                                num61 = inHigh[i - 1] - inLow[i - 1];
                            }
                            else {
                                double num58;
                                if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                    double num59;
                                    double num60;
                                    if (inClose[i - 1] >= inOpen[i - 1]) {
                                        num60 = inClose[i - 1];
                                    }
                                    else {
                                        num60 = inOpen[i - 1];
                                    }
                                    if (inClose[i - 1] >= inOpen[i - 1]) {
                                        num59 = inOpen[i - 1];
                                    }
                                    else {
                                        num59 = inClose[i - 1];
                                    }
                                    num58 = (inHigh[i - 1] - num60) + (num59 - inLow[i - 1]);
                                }
                                else {
                                    num58 = 0.0;
                                }
                                num61 = num58;
                            }
                            num62 = num61;
                        }
                        num63 = num62;
                    }
                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                        num57 = 2.0;
                    }
                    else {
                        num57 = 1.0;
                    }
                    if (((num64 - inLow[i - 1]) < ((Globals.candleSettings[7].factor * num63) / num57)) && (((inClose[i] < inOpen[i]) ? -1 : 1) == -1)) {
                        double num49;
                        double num55;
                        double num56;
                        if (inClose[i] >= inOpen[i]) {
                            num56 = inOpen[i];
                        }
                        else {
                            num56 = inClose[i];
                        }
                        if (Globals.candleSettings[7].avgPeriod != 0.0) {
                            num55 = ShadowVeryShortPeriodTotal[0] / ((double)Globals.candleSettings[7].avgPeriod);
                        }
                        else {
                            double num54;
                            if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                                num54 = Math.Abs((double)(inClose[i] - inOpen[i]));
                            }
                            else {
                                double num53;
                                if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                                    num53 = inHigh[i] - inLow[i];
                                }
                                else {
                                    double num50;
                                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                        double num51;
                                        double num52;
                                        if (inClose[i] >= inOpen[i]) {
                                            num52 = inClose[i];
                                        }
                                        else {
                                            num52 = inOpen[i];
                                        }
                                        if (inClose[i] >= inOpen[i]) {
                                            num51 = inOpen[i];
                                        }
                                        else {
                                            num51 = inClose[i];
                                        }
                                        num50 = (inHigh[i] - num52) + (num51 - inLow[i]);
                                    }
                                    else {
                                        num50 = 0.0;
                                    }
                                    num53 = num50;
                                }
                                num54 = num53;
                            }
                            num55 = num54;
                        }
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            num49 = 2.0;
                        }
                        else {
                            num49 = 1.0;
                        }
                        if ((((num56 - inLow[i]) < ((Globals.candleSettings[7].factor * num55) / num49)) && (inClose[i - 2] > inClose[i - 1])) && (inClose[i - 1] > inClose[i])) {
                            double num42;
                            double num48;
                            if (Globals.candleSettings[10].avgPeriod != 0.0) {
                                num48 = EqualPeriodTotal[2] / ((double)Globals.candleSettings[10].avgPeriod);
                            }
                            else {
                                double num47;
                                if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                                    num47 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                                }
                                else {
                                    double num46;
                                    if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                                        num46 = inHigh[i - 2] - inLow[i - 2];
                                    }
                                    else {
                                        double num43;
                                        if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                                            double num44;
                                            double num45;
                                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                                num45 = inClose[i - 2];
                                            }
                                            else {
                                                num45 = inOpen[i - 2];
                                            }
                                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                                num44 = inOpen[i - 2];
                                            }
                                            else {
                                                num44 = inClose[i - 2];
                                            }
                                            num43 = (inHigh[i - 2] - num45) + (num44 - inLow[i - 2]);
                                        }
                                        else {
                                            num43 = 0.0;
                                        }
                                        num46 = num43;
                                    }
                                    num47 = num46;
                                }
                                num48 = num47;
                            }
                            if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                                num42 = 2.0;
                            }
                            else {
                                num42 = 1.0;
                            }
                            if (inOpen[i - 1] <= (inClose[i - 2] + ((Globals.candleSettings[10].factor * num48) / num42))) {
                                double num35;
                                double num41;
                                if (Globals.candleSettings[10].avgPeriod != 0.0) {
                                    num41 = EqualPeriodTotal[2] / ((double)Globals.candleSettings[10].avgPeriod);
                                }
                                else {
                                    double num40;
                                    if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                                        num40 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                                    }
                                    else {
                                        double num39;
                                        if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                                            num39 = inHigh[i - 2] - inLow[i - 2];
                                        }
                                        else {
                                            double num36;
                                            if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                                                double num37;
                                                double num38;
                                                if (inClose[i - 2] >= inOpen[i - 2]) {
                                                    num38 = inClose[i - 2];
                                                }
                                                else {
                                                    num38 = inOpen[i - 2];
                                                }
                                                if (inClose[i - 2] >= inOpen[i - 2]) {
                                                    num37 = inOpen[i - 2];
                                                }
                                                else {
                                                    num37 = inClose[i - 2];
                                                }
                                                num36 = (inHigh[i - 2] - num38) + (num37 - inLow[i - 2]);
                                            }
                                            else {
                                                num36 = 0.0;
                                            }
                                            num39 = num36;
                                        }
                                        num40 = num39;
                                    }
                                    num41 = num40;
                                }
                                if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                                    num35 = 2.0;
                                }
                                else {
                                    num35 = 1.0;
                                }
                                if (inOpen[i - 1] >= (inClose[i - 2] - ((Globals.candleSettings[10].factor * num41) / num35))) {
                                    double num28;
                                    double num34;
                                    if (Globals.candleSettings[10].avgPeriod != 0.0) {
                                        num34 = EqualPeriodTotal[1] / ((double)Globals.candleSettings[10].avgPeriod);
                                    }
                                    else {
                                        double num33;
                                        if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                                            num33 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                                        }
                                        else {
                                            double num32;
                                            if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                                                num32 = inHigh[i - 1] - inLow[i - 1];
                                            }
                                            else {
                                                double num29;
                                                if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                                                    double num30;
                                                    double num31;
                                                    if (inClose[i - 1] >= inOpen[i - 1]) {
                                                        num31 = inClose[i - 1];
                                                    }
                                                    else {
                                                        num31 = inOpen[i - 1];
                                                    }
                                                    if (inClose[i - 1] >= inOpen[i - 1]) {
                                                        num30 = inOpen[i - 1];
                                                    }
                                                    else {
                                                        num30 = inClose[i - 1];
                                                    }
                                                    num29 = (inHigh[i - 1] - num31) + (num30 - inLow[i - 1]);
                                                }
                                                else {
                                                    num29 = 0.0;
                                                }
                                                num32 = num29;
                                            }
                                            num33 = num32;
                                        }
                                        num34 = num33;
                                    }
                                    if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                                        num28 = 2.0;
                                    }
                                    else {
                                        num28 = 1.0;
                                    }
                                    if (inOpen[i] <= (inClose[i - 1] + ((Globals.candleSettings[10].factor * num34) / num28))) {
                                        double num21;
                                        double num27;
                                        if (Globals.candleSettings[10].avgPeriod != 0.0) {
                                            num27 = EqualPeriodTotal[1] / ((double)Globals.candleSettings[10].avgPeriod);
                                        }
                                        else {
                                            double num26;
                                            if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                                                num26 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                                            }
                                            else {
                                                double num25;
                                                if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                                                    num25 = inHigh[i - 1] - inLow[i - 1];
                                                }
                                                else {
                                                    double num22;
                                                    if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                                                        double num23;
                                                        double num24;
                                                        if (inClose[i - 1] >= inOpen[i - 1]) {
                                                            num24 = inClose[i - 1];
                                                        }
                                                        else {
                                                            num24 = inOpen[i - 1];
                                                        }
                                                        if (inClose[i - 1] >= inOpen[i - 1]) {
                                                            num23 = inOpen[i - 1];
                                                        }
                                                        else {
                                                            num23 = inClose[i - 1];
                                                        }
                                                        num22 = (inHigh[i - 1] - num24) + (num23 - inLow[i - 1]);
                                                    }
                                                    else {
                                                        num22 = 0.0;
                                                    }
                                                    num25 = num22;
                                                }
                                                num26 = num25;
                                            }
                                            num27 = num26;
                                        }
                                        if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                                            num21 = 2.0;
                                        }
                                        else {
                                            num21 = 1.0;
                                        }
                                        if (inOpen[i] >= (inClose[i - 1] - ((Globals.candleSettings[10].factor * num27) / num21))) {
                                            outInteger[outIdx] = -100;
                                            outIdx++;
                                            goto Label_0F74;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_0F74:
            totIdx = 2;
            while (totIdx >= 0) {
                double num15;
                double num20;
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num20 = Math.Abs((double)(inClose[i - totIdx] - inOpen[i - totIdx]));
                }
                else {
                    double num19;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num19 = inHigh[i - totIdx] - inLow[i - totIdx];
                    }
                    else {
                        double num16;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num17;
                            double num18;
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num18 = inClose[i - totIdx];
                            }
                            else {
                                num18 = inOpen[i - totIdx];
                            }
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num17 = inOpen[i - totIdx];
                            }
                            else {
                                num17 = inClose[i - totIdx];
                            }
                            num16 = (inHigh[i - totIdx] - num18) + (num17 - inLow[i - totIdx]);
                        }
                        else {
                            num16 = 0.0;
                        }
                        num19 = num16;
                    }
                    num20 = num19;
                }
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num15 = Math.Abs((double)(inClose[ShadowVeryShortTrailingIdx - totIdx] - inOpen[ShadowVeryShortTrailingIdx - totIdx]));
                }
                else {
                    double num14;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num14 = inHigh[ShadowVeryShortTrailingIdx - totIdx] - inLow[ShadowVeryShortTrailingIdx - totIdx];
                    }
                    else {
                        double num11;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num12;
                            double num13;
                            if (inClose[ShadowVeryShortTrailingIdx - totIdx] >= inOpen[ShadowVeryShortTrailingIdx - totIdx]) {
                                num13 = inClose[ShadowVeryShortTrailingIdx - totIdx];
                            }
                            else {
                                num13 = inOpen[ShadowVeryShortTrailingIdx - totIdx];
                            }
                            if (inClose[ShadowVeryShortTrailingIdx - totIdx] >= inOpen[ShadowVeryShortTrailingIdx - totIdx]) {
                                num12 = inOpen[ShadowVeryShortTrailingIdx - totIdx];
                            }
                            else {
                                num12 = inClose[ShadowVeryShortTrailingIdx - totIdx];
                            }
                            num11 = (inHigh[ShadowVeryShortTrailingIdx - totIdx] - num13) + (num12 - inLow[ShadowVeryShortTrailingIdx - totIdx]);
                        }
                        else {
                            num11 = 0.0;
                        }
                        num14 = num11;
                    }
                    num15 = num14;
                }
                ShadowVeryShortPeriodTotal[totIdx] += num20 - num15;
                totIdx--;
            }
            for (totIdx = 2; totIdx >= 1; totIdx--) {
                double num5;
                double num10;
                if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                    num10 = Math.Abs((double)(inClose[i - totIdx] - inOpen[i - totIdx]));
                }
                else {
                    double num9;
                    if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                        num9 = inHigh[i - totIdx] - inLow[i - totIdx];
                    }
                    else {
                        double num6;
                        if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                            double num7;
                            double num8;
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num8 = inClose[i - totIdx];
                            }
                            else {
                                num8 = inOpen[i - totIdx];
                            }
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num7 = inOpen[i - totIdx];
                            }
                            else {
                                num7 = inClose[i - totIdx];
                            }
                            num6 = (inHigh[i - totIdx] - num8) + (num7 - inLow[i - totIdx]);
                        }
                        else {
                            num6 = 0.0;
                        }
                        num9 = num6;
                    }
                    num10 = num9;
                }
                if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                    num5 = Math.Abs((double)(inClose[EqualTrailingIdx - totIdx] - inOpen[EqualTrailingIdx - totIdx]));
                }
                else {
                    double num4;
                    if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                        num4 = inHigh[EqualTrailingIdx - totIdx] - inLow[EqualTrailingIdx - totIdx];
                    }
                    else {
                        double num;
                        if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                            double num2;
                            double num3;
                            if (inClose[EqualTrailingIdx - totIdx] >= inOpen[EqualTrailingIdx - totIdx]) {
                                num3 = inClose[EqualTrailingIdx - totIdx];
                            }
                            else {
                                num3 = inOpen[EqualTrailingIdx - totIdx];
                            }
                            if (inClose[EqualTrailingIdx - totIdx] >= inOpen[EqualTrailingIdx - totIdx]) {
                                num2 = inOpen[EqualTrailingIdx - totIdx];
                            }
                            else {
                                num2 = inClose[EqualTrailingIdx - totIdx];
                            }
                            num = (inHigh[EqualTrailingIdx - totIdx] - num3) + (num2 - inLow[EqualTrailingIdx - totIdx]);
                        }
                        else {
                            num = 0.0;
                        }
                        num4 = num;
                    }
                    num5 = num4;
                }
                EqualPeriodTotal[totIdx] += num10 - num5;
            }
            i++;
            ShadowVeryShortTrailingIdx++;
            EqualTrailingIdx++;
            if (i <= endIdx) {
                goto Label_0529;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlInNeck(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            double num15;
            double num20;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlInNeckLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double EqualPeriodTotal = 0.0;
            int EqualTrailingIdx = startIdx - Globals.candleSettings[10].avgPeriod;
            double BodyLongPeriodTotal = 0.0;
            int BodyLongTrailingIdx = startIdx - Globals.candleSettings[0].avgPeriod;
            int i = EqualTrailingIdx;
            while (true) {
                double num44;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                    num44 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num43;
                    if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                        num43 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num40;
                        if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                            double num41;
                            double num42;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num42 = inClose[i - 1];
                            }
                            else {
                                num42 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num41 = inOpen[i - 1];
                            }
                            else {
                                num41 = inClose[i - 1];
                            }
                            num40 = (inHigh[i - 1] - num42) + (num41 - inLow[i - 1]);
                        }
                        else {
                            num40 = 0.0;
                        }
                        num43 = num40;
                    }
                    num44 = num43;
                }
                EqualPeriodTotal += num44;
                i++;
            }
            i = BodyLongTrailingIdx;
            while (true) {
                double num39;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num39 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num38;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num38 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num35;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num36;
                            double num37;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num37 = inClose[i - 1];
                            }
                            else {
                                num37 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num36 = inOpen[i - 1];
                            }
                            else {
                                num36 = inClose[i - 1];
                            }
                            num35 = (inHigh[i - 1] - num37) + (num36 - inLow[i - 1]);
                        }
                        else {
                            num35 = 0.0;
                        }
                        num38 = num35;
                    }
                    num39 = num38;
                }
                BodyLongPeriodTotal += num39;
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            Label_0272:
            if (((inClose[i - 1] < inOpen[i - 1]) ? -1 : 1) == -1) {
                double num28;
                double num34;
                if (Globals.candleSettings[0].avgPeriod != 0.0) {
                    num34 = BodyLongPeriodTotal / ((double)Globals.candleSettings[0].avgPeriod);
                }
                else {
                    double num33;
                    if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                        num33 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                    }
                    else {
                        double num32;
                        if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                            num32 = inHigh[i - 1] - inLow[i - 1];
                        }
                        else {
                            double num29;
                            if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                                double num30;
                                double num31;
                                if (inClose[i - 1] >= inOpen[i - 1]) {
                                    num31 = inClose[i - 1];
                                }
                                else {
                                    num31 = inOpen[i - 1];
                                }
                                if (inClose[i - 1] >= inOpen[i - 1]) {
                                    num30 = inOpen[i - 1];
                                }
                                else {
                                    num30 = inClose[i - 1];
                                }
                                num29 = (inHigh[i - 1] - num31) + (num30 - inLow[i - 1]);
                            }
                            else {
                                num29 = 0.0;
                            }
                            num32 = num29;
                        }
                        num33 = num32;
                    }
                    num34 = num33;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                    num28 = 2.0;
                }
                else {
                    num28 = 1.0;
                }
                if (((Math.Abs((double)(inClose[i - 1] - inOpen[i - 1])) > ((Globals.candleSettings[0].factor * num34) / num28)) && (inClose[i] >= inOpen[i])) && (inOpen[i] < inLow[i - 1])) {
                    double num21;
                    double num27;
                    if (Globals.candleSettings[10].avgPeriod != 0.0) {
                        num27 = EqualPeriodTotal / ((double)Globals.candleSettings[10].avgPeriod);
                    }
                    else {
                        double num26;
                        if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                            num26 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                        }
                        else {
                            double num25;
                            if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                                num25 = inHigh[i - 1] - inLow[i - 1];
                            }
                            else {
                                double num22;
                                if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                                    double num23;
                                    double num24;
                                    if (inClose[i - 1] >= inOpen[i - 1]) {
                                        num24 = inClose[i - 1];
                                    }
                                    else {
                                        num24 = inOpen[i - 1];
                                    }
                                    if (inClose[i - 1] >= inOpen[i - 1]) {
                                        num23 = inOpen[i - 1];
                                    }
                                    else {
                                        num23 = inClose[i - 1];
                                    }
                                    num22 = (inHigh[i - 1] - num24) + (num23 - inLow[i - 1]);
                                }
                                else {
                                    num22 = 0.0;
                                }
                                num25 = num22;
                            }
                            num26 = num25;
                        }
                        num27 = num26;
                    }
                    if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                        num21 = 2.0;
                    }
                    else {
                        num21 = 1.0;
                    }
                    if ((inClose[i] <= (inClose[i - 1] + ((Globals.candleSettings[10].factor * num27) / num21))) && (inClose[i] >= inClose[i - 1])) {
                        outInteger[outIdx] = -100;
                        outIdx++;
                        goto Label_058B;
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_058B:
            if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                num20 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
            }
            else {
                double num19;
                if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                    num19 = inHigh[i - 1] - inLow[i - 1];
                }
                else {
                    double num16;
                    if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                        double num17;
                        double num18;
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num18 = inClose[i - 1];
                        }
                        else {
                            num18 = inOpen[i - 1];
                        }
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num17 = inOpen[i - 1];
                        }
                        else {
                            num17 = inClose[i - 1];
                        }
                        num16 = (inHigh[i - 1] - num18) + (num17 - inLow[i - 1]);
                    }
                    else {
                        num16 = 0.0;
                    }
                    num19 = num16;
                }
                num20 = num19;
            }
            if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                num15 = Math.Abs((double)(inClose[EqualTrailingIdx - 1] - inOpen[EqualTrailingIdx - 1]));
            }
            else {
                double num14;
                if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                    num14 = inHigh[EqualTrailingIdx - 1] - inLow[EqualTrailingIdx - 1];
                }
                else {
                    double num11;
                    if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                        double num12;
                        double num13;
                        if (inClose[EqualTrailingIdx - 1] >= inOpen[EqualTrailingIdx - 1]) {
                            num13 = inClose[EqualTrailingIdx - 1];
                        }
                        else {
                            num13 = inOpen[EqualTrailingIdx - 1];
                        }
                        if (inClose[EqualTrailingIdx - 1] >= inOpen[EqualTrailingIdx - 1]) {
                            num12 = inOpen[EqualTrailingIdx - 1];
                        }
                        else {
                            num12 = inClose[EqualTrailingIdx - 1];
                        }
                        num11 = (inHigh[EqualTrailingIdx - 1] - num13) + (num12 - inLow[EqualTrailingIdx - 1]);
                    }
                    else {
                        num11 = 0.0;
                    }
                    num14 = num11;
                }
                num15 = num14;
            }
            EqualPeriodTotal += num20 - num15;
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
            }
            else {
                double num9;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i - 1] - inLow[i - 1];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num8 = inClose[i - 1];
                        }
                        else {
                            num8 = inOpen[i - 1];
                        }
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num7 = inOpen[i - 1];
                        }
                        else {
                            num7 = inClose[i - 1];
                        }
                        num6 = (inHigh[i - 1] - num8) + (num7 - inLow[i - 1]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[BodyLongTrailingIdx - 1] - inOpen[BodyLongTrailingIdx - 1]));
            }
            else {
                double num4;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num4 = inHigh[BodyLongTrailingIdx - 1] - inLow[BodyLongTrailingIdx - 1];
                }
                else {
                    double num;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[BodyLongTrailingIdx - 1] >= inOpen[BodyLongTrailingIdx - 1]) {
                            num3 = inClose[BodyLongTrailingIdx - 1];
                        }
                        else {
                            num3 = inOpen[BodyLongTrailingIdx - 1];
                        }
                        if (inClose[BodyLongTrailingIdx - 1] >= inOpen[BodyLongTrailingIdx - 1]) {
                            num2 = inOpen[BodyLongTrailingIdx - 1];
                        }
                        else {
                            num2 = inClose[BodyLongTrailingIdx - 1];
                        }
                        num = (inHigh[BodyLongTrailingIdx - 1] - num3) + (num2 - inLow[BodyLongTrailingIdx - 1]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            BodyLongPeriodTotal += num10 - num5;
            i++;
            EqualTrailingIdx++;
            BodyLongTrailingIdx++;
            if (i <= endIdx) {
                goto Label_0272;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlInvertedHammer(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            double num15;
            double num20;
            double num25;
            double num30;
            double num49;
            double num55;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlInvertedHammerLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double BodyPeriodTotal = 0.0;
            int BodyTrailingIdx = startIdx - Globals.candleSettings[2].avgPeriod;
            double ShadowLongPeriodTotal = 0.0;
            int ShadowLongTrailingIdx = startIdx - Globals.candleSettings[4].avgPeriod;
            double ShadowVeryShortPeriodTotal = 0.0;
            int ShadowVeryShortTrailingIdx = startIdx - Globals.candleSettings[7].avgPeriod;
            int i = BodyTrailingIdx;
            while (true) {
                double num70;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                    num70 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num69;
                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                        num69 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num66;
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            double num67;
                            double num68;
                            if (inClose[i] >= inOpen[i]) {
                                num68 = inClose[i];
                            }
                            else {
                                num68 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num67 = inOpen[i];
                            }
                            else {
                                num67 = inClose[i];
                            }
                            num66 = (inHigh[i] - num68) + (num67 - inLow[i]);
                        }
                        else {
                            num66 = 0.0;
                        }
                        num69 = num66;
                    }
                    num70 = num69;
                }
                BodyPeriodTotal += num70;
                i++;
            }
            i = ShadowLongTrailingIdx;
            while (true) {
                double num65;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[4].rangeType == RangeType.RealBody) {
                    num65 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num64;
                    if (Globals.candleSettings[4].rangeType == RangeType.HighLow) {
                        num64 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num61;
                        if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                            double num62;
                            double num63;
                            if (inClose[i] >= inOpen[i]) {
                                num63 = inClose[i];
                            }
                            else {
                                num63 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num62 = inOpen[i];
                            }
                            else {
                                num62 = inClose[i];
                            }
                            num61 = (inHigh[i] - num63) + (num62 - inLow[i]);
                        }
                        else {
                            num61 = 0.0;
                        }
                        num64 = num61;
                    }
                    num65 = num64;
                }
                ShadowLongPeriodTotal += num65;
                i++;
            }
            i = ShadowVeryShortTrailingIdx;
            while (true) {
                double num60;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num60 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num59;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num59 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num56;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num57;
                            double num58;
                            if (inClose[i] >= inOpen[i]) {
                                num58 = inClose[i];
                            }
                            else {
                                num58 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num57 = inOpen[i];
                            }
                            else {
                                num57 = inClose[i];
                            }
                            num56 = (inHigh[i] - num58) + (num57 - inLow[i]);
                        }
                        else {
                            num56 = 0.0;
                        }
                        num59 = num56;
                    }
                    num60 = num59;
                }
                ShadowVeryShortPeriodTotal += num60;
                i++;
            }
            int outIdx = 0;
            Label_0313:
            if (Globals.candleSettings[2].avgPeriod != 0.0) {
                num55 = BodyPeriodTotal / ((double)Globals.candleSettings[2].avgPeriod);
            }
            else {
                double num54;
                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                    num54 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num53;
                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                        num53 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num50;
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            double num51;
                            double num52;
                            if (inClose[i] >= inOpen[i]) {
                                num52 = inClose[i];
                            }
                            else {
                                num52 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num51 = inOpen[i];
                            }
                            else {
                                num51 = inClose[i];
                            }
                            num50 = (inHigh[i] - num52) + (num51 - inLow[i]);
                        }
                        else {
                            num50 = 0.0;
                        }
                        num53 = num50;
                    }
                    num54 = num53;
                }
                num55 = num54;
            }
            if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                num49 = 2.0;
            }
            else {
                num49 = 1.0;
            }
            if (Math.Abs((double)(inClose[i] - inOpen[i])) < ((Globals.candleSettings[2].factor * num55) / num49)) {
                double num41;
                double num47;
                double num48;
                if (inClose[i] >= inOpen[i]) {
                    num48 = inClose[i];
                }
                else {
                    num48 = inOpen[i];
                }
                if (Globals.candleSettings[4].avgPeriod != 0.0) {
                    num47 = ShadowLongPeriodTotal / ((double)Globals.candleSettings[4].avgPeriod);
                }
                else {
                    double num46;
                    if (Globals.candleSettings[4].rangeType == RangeType.RealBody) {
                        num46 = Math.Abs((double)(inClose[i] - inOpen[i]));
                    }
                    else {
                        double num45;
                        if (Globals.candleSettings[4].rangeType == RangeType.HighLow) {
                            num45 = inHigh[i] - inLow[i];
                        }
                        else {
                            double num42;
                            if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                                double num43;
                                double num44;
                                if (inClose[i] >= inOpen[i]) {
                                    num44 = inClose[i];
                                }
                                else {
                                    num44 = inOpen[i];
                                }
                                if (inClose[i] >= inOpen[i]) {
                                    num43 = inOpen[i];
                                }
                                else {
                                    num43 = inClose[i];
                                }
                                num42 = (inHigh[i] - num44) + (num43 - inLow[i]);
                            }
                            else {
                                num42 = 0.0;
                            }
                            num45 = num42;
                        }
                        num46 = num45;
                    }
                    num47 = num46;
                }
                if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                    num41 = 2.0;
                }
                else {
                    num41 = 1.0;
                }
                if ((inHigh[i] - num48) > ((Globals.candleSettings[4].factor * num47) / num41)) {
                    double num33;
                    double num39;
                    double num40;
                    if (inClose[i] >= inOpen[i]) {
                        num40 = inOpen[i];
                    }
                    else {
                        num40 = inClose[i];
                    }
                    if (Globals.candleSettings[7].avgPeriod != 0.0) {
                        num39 = ShadowVeryShortPeriodTotal / ((double)Globals.candleSettings[7].avgPeriod);
                    }
                    else {
                        double num38;
                        if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                            num38 = Math.Abs((double)(inClose[i] - inOpen[i]));
                        }
                        else {
                            double num37;
                            if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                                num37 = inHigh[i] - inLow[i];
                            }
                            else {
                                double num34;
                                if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                    double num35;
                                    double num36;
                                    if (inClose[i] >= inOpen[i]) {
                                        num36 = inClose[i];
                                    }
                                    else {
                                        num36 = inOpen[i];
                                    }
                                    if (inClose[i] >= inOpen[i]) {
                                        num35 = inOpen[i];
                                    }
                                    else {
                                        num35 = inClose[i];
                                    }
                                    num34 = (inHigh[i] - num36) + (num35 - inLow[i]);
                                }
                                else {
                                    num34 = 0.0;
                                }
                                num37 = num34;
                            }
                            num38 = num37;
                        }
                        num39 = num38;
                    }
                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                        num33 = 2.0;
                    }
                    else {
                        num33 = 1.0;
                    }
                    if ((num40 - inLow[i]) < ((Globals.candleSettings[7].factor * num39) / num33)) {
                        double num31;
                        double num32;
                        if (inOpen[i] > inClose[i]) {
                            num32 = inOpen[i];
                        }
                        else {
                            num32 = inClose[i];
                        }
                        if (inOpen[i - 1] < inClose[i - 1]) {
                            num31 = inOpen[i - 1];
                        }
                        else {
                            num31 = inClose[i - 1];
                        }
                        if (num32 < num31) {
                            outInteger[outIdx] = 100;
                            outIdx++;
                            goto Label_073E;
                        }
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_073E:
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num30 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num29;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num29 = inHigh[i] - inLow[i];
                }
                else {
                    double num26;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num27;
                        double num28;
                        if (inClose[i] >= inOpen[i]) {
                            num28 = inClose[i];
                        }
                        else {
                            num28 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num27 = inOpen[i];
                        }
                        else {
                            num27 = inClose[i];
                        }
                        num26 = (inHigh[i] - num28) + (num27 - inLow[i]);
                    }
                    else {
                        num26 = 0.0;
                    }
                    num29 = num26;
                }
                num30 = num29;
            }
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num25 = Math.Abs((double)(inClose[BodyTrailingIdx] - inOpen[BodyTrailingIdx]));
            }
            else {
                double num24;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num24 = inHigh[BodyTrailingIdx] - inLow[BodyTrailingIdx];
                }
                else {
                    double num21;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num22;
                        double num23;
                        if (inClose[BodyTrailingIdx] >= inOpen[BodyTrailingIdx]) {
                            num23 = inClose[BodyTrailingIdx];
                        }
                        else {
                            num23 = inOpen[BodyTrailingIdx];
                        }
                        if (inClose[BodyTrailingIdx] >= inOpen[BodyTrailingIdx]) {
                            num22 = inOpen[BodyTrailingIdx];
                        }
                        else {
                            num22 = inClose[BodyTrailingIdx];
                        }
                        num21 = (inHigh[BodyTrailingIdx] - num23) + (num22 - inLow[BodyTrailingIdx]);
                    }
                    else {
                        num21 = 0.0;
                    }
                    num24 = num21;
                }
                num25 = num24;
            }
            BodyPeriodTotal += num30 - num25;
            if (Globals.candleSettings[4].rangeType == RangeType.RealBody) {
                num20 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num19;
                if (Globals.candleSettings[4].rangeType == RangeType.HighLow) {
                    num19 = inHigh[i] - inLow[i];
                }
                else {
                    double num16;
                    if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                        double num17;
                        double num18;
                        if (inClose[i] >= inOpen[i]) {
                            num18 = inClose[i];
                        }
                        else {
                            num18 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num17 = inOpen[i];
                        }
                        else {
                            num17 = inClose[i];
                        }
                        num16 = (inHigh[i] - num18) + (num17 - inLow[i]);
                    }
                    else {
                        num16 = 0.0;
                    }
                    num19 = num16;
                }
                num20 = num19;
            }
            if (Globals.candleSettings[4].rangeType == RangeType.RealBody) {
                num15 = Math.Abs((double)(inClose[ShadowLongTrailingIdx] - inOpen[ShadowLongTrailingIdx]));
            }
            else {
                double num14;
                if (Globals.candleSettings[4].rangeType == RangeType.HighLow) {
                    num14 = inHigh[ShadowLongTrailingIdx] - inLow[ShadowLongTrailingIdx];
                }
                else {
                    double num11;
                    if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                        double num12;
                        double num13;
                        if (inClose[ShadowLongTrailingIdx] >= inOpen[ShadowLongTrailingIdx]) {
                            num13 = inClose[ShadowLongTrailingIdx];
                        }
                        else {
                            num13 = inOpen[ShadowLongTrailingIdx];
                        }
                        if (inClose[ShadowLongTrailingIdx] >= inOpen[ShadowLongTrailingIdx]) {
                            num12 = inOpen[ShadowLongTrailingIdx];
                        }
                        else {
                            num12 = inClose[ShadowLongTrailingIdx];
                        }
                        num11 = (inHigh[ShadowLongTrailingIdx] - num13) + (num12 - inLow[ShadowLongTrailingIdx]);
                    }
                    else {
                        num11 = 0.0;
                    }
                    num14 = num11;
                }
                num15 = num14;
            }
            ShadowLongPeriodTotal += num20 - num15;
            if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num9;
                if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i] - inLow[i];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i] >= inOpen[i]) {
                            num8 = inClose[i];
                        }
                        else {
                            num8 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num7 = inOpen[i];
                        }
                        else {
                            num7 = inClose[i];
                        }
                        num6 = (inHigh[i] - num8) + (num7 - inLow[i]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[ShadowVeryShortTrailingIdx] - inOpen[ShadowVeryShortTrailingIdx]));
            }
            else {
                double num4;
                if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                    num4 = inHigh[ShadowVeryShortTrailingIdx] - inLow[ShadowVeryShortTrailingIdx];
                }
                else {
                    double num;
                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[ShadowVeryShortTrailingIdx] >= inOpen[ShadowVeryShortTrailingIdx]) {
                            num3 = inClose[ShadowVeryShortTrailingIdx];
                        }
                        else {
                            num3 = inOpen[ShadowVeryShortTrailingIdx];
                        }
                        if (inClose[ShadowVeryShortTrailingIdx] >= inOpen[ShadowVeryShortTrailingIdx]) {
                            num2 = inOpen[ShadowVeryShortTrailingIdx];
                        }
                        else {
                            num2 = inClose[ShadowVeryShortTrailingIdx];
                        }
                        num = (inHigh[ShadowVeryShortTrailingIdx] - num3) + (num2 - inLow[ShadowVeryShortTrailingIdx]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            ShadowVeryShortPeriodTotal += num10 - num5;
            i++;
            BodyTrailingIdx++;
            ShadowLongTrailingIdx++;
            ShadowVeryShortTrailingIdx++;
            if (i <= endIdx) {
                goto Label_0313;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlKicking(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            int totIdx;
            int num68;
            double[] ShadowVeryShortPeriodTotal = new double[2];
            double[] BodyLongPeriodTotal = new double[2];
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlKickingLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            ShadowVeryShortPeriodTotal[1] = 0.0;
            ShadowVeryShortPeriodTotal[0] = 0.0;
            int ShadowVeryShortTrailingIdx = startIdx - Globals.candleSettings[7].avgPeriod;
            BodyLongPeriodTotal[1] = 0.0;
            BodyLongPeriodTotal[0] = 0.0;
            int BodyLongTrailingIdx = startIdx - Globals.candleSettings[0].avgPeriod;
            int i = ShadowVeryShortTrailingIdx;
            while (true) {
                double num83;
                double num88;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num88 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num87;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num87 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num84;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num85;
                            double num86;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num86 = inClose[i - 1];
                            }
                            else {
                                num86 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num85 = inOpen[i - 1];
                            }
                            else {
                                num85 = inClose[i - 1];
                            }
                            num84 = (inHigh[i - 1] - num86) + (num85 - inLow[i - 1]);
                        }
                        else {
                            num84 = 0.0;
                        }
                        num87 = num84;
                    }
                    num88 = num87;
                }
                ShadowVeryShortPeriodTotal[1] += num88;
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num83 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num82;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num82 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num79;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num80;
                            double num81;
                            if (inClose[i] >= inOpen[i]) {
                                num81 = inClose[i];
                            }
                            else {
                                num81 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num80 = inOpen[i];
                            }
                            else {
                                num80 = inClose[i];
                            }
                            num79 = (inHigh[i] - num81) + (num80 - inLow[i]);
                        }
                        else {
                            num79 = 0.0;
                        }
                        num82 = num79;
                    }
                    num83 = num82;
                }
                ShadowVeryShortPeriodTotal[0] += num83;
                i++;
            }
            i = BodyLongTrailingIdx;
            while (true) {
                double num73;
                double num78;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num78 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num77;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num77 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num74;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num75;
                            double num76;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num76 = inClose[i - 1];
                            }
                            else {
                                num76 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num75 = inOpen[i - 1];
                            }
                            else {
                                num75 = inClose[i - 1];
                            }
                            num74 = (inHigh[i - 1] - num76) + (num75 - inLow[i - 1]);
                        }
                        else {
                            num74 = 0.0;
                        }
                        num77 = num74;
                    }
                    num78 = num77;
                }
                BodyLongPeriodTotal[1] += num78;
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num73 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num72;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num72 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num69;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num70;
                            double num71;
                            if (inClose[i] >= inOpen[i]) {
                                num71 = inClose[i];
                            }
                            else {
                                num71 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num70 = inOpen[i];
                            }
                            else {
                                num70 = inClose[i];
                            }
                            num69 = (inHigh[i] - num71) + (num70 - inLow[i]);
                        }
                        else {
                            num69 = 0.0;
                        }
                        num72 = num69;
                    }
                    num73 = num72;
                }
                BodyLongPeriodTotal[0] += num73;
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            Label_0413:
            if (inClose[i] >= inOpen[i]) {
                num68 = 1;
            }
            else {
                num68 = -1;
            }
            if (((inClose[i - 1] < inOpen[i - 1]) ? -1 : 1) == -num68) {
                double num61;
                double num67;
                if (Globals.candleSettings[0].avgPeriod != 0.0) {
                    num67 = BodyLongPeriodTotal[1] / ((double)Globals.candleSettings[0].avgPeriod);
                }
                else {
                    double num66;
                    if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                        num66 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                    }
                    else {
                        double num65;
                        if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                            num65 = inHigh[i - 1] - inLow[i - 1];
                        }
                        else {
                            double num62;
                            if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                                double num63;
                                double num64;
                                if (inClose[i - 1] >= inOpen[i - 1]) {
                                    num64 = inClose[i - 1];
                                }
                                else {
                                    num64 = inOpen[i - 1];
                                }
                                if (inClose[i - 1] >= inOpen[i - 1]) {
                                    num63 = inOpen[i - 1];
                                }
                                else {
                                    num63 = inClose[i - 1];
                                }
                                num62 = (inHigh[i - 1] - num64) + (num63 - inLow[i - 1]);
                            }
                            else {
                                num62 = 0.0;
                            }
                            num65 = num62;
                        }
                        num66 = num65;
                    }
                    num67 = num66;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                    num61 = 2.0;
                }
                else {
                    num61 = 1.0;
                }
                if (Math.Abs((double)(inClose[i - 1] - inOpen[i - 1])) > ((Globals.candleSettings[0].factor * num67) / num61)) {
                    double num53;
                    double num59;
                    double num60;
                    if (inClose[i - 1] >= inOpen[i - 1]) {
                        num60 = inClose[i - 1];
                    }
                    else {
                        num60 = inOpen[i - 1];
                    }
                    if (Globals.candleSettings[7].avgPeriod != 0.0) {
                        num59 = ShadowVeryShortPeriodTotal[1] / ((double)Globals.candleSettings[7].avgPeriod);
                    }
                    else {
                        double num58;
                        if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                            num58 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                        }
                        else {
                            double num57;
                            if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                                num57 = inHigh[i - 1] - inLow[i - 1];
                            }
                            else {
                                double num54;
                                if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                    double num55;
                                    double num56;
                                    if (inClose[i - 1] >= inOpen[i - 1]) {
                                        num56 = inClose[i - 1];
                                    }
                                    else {
                                        num56 = inOpen[i - 1];
                                    }
                                    if (inClose[i - 1] >= inOpen[i - 1]) {
                                        num55 = inOpen[i - 1];
                                    }
                                    else {
                                        num55 = inClose[i - 1];
                                    }
                                    num54 = (inHigh[i - 1] - num56) + (num55 - inLow[i - 1]);
                                }
                                else {
                                    num54 = 0.0;
                                }
                                num57 = num54;
                            }
                            num58 = num57;
                        }
                        num59 = num58;
                    }
                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                        num53 = 2.0;
                    }
                    else {
                        num53 = 1.0;
                    }
                    if ((inHigh[i - 1] - num60) < ((Globals.candleSettings[7].factor * num59) / num53)) {
                        double num45;
                        double num51;
                        double num52;
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num52 = inOpen[i - 1];
                        }
                        else {
                            num52 = inClose[i - 1];
                        }
                        if (Globals.candleSettings[7].avgPeriod != 0.0) {
                            num51 = ShadowVeryShortPeriodTotal[1] / ((double)Globals.candleSettings[7].avgPeriod);
                        }
                        else {
                            double num50;
                            if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                                num50 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                            }
                            else {
                                double num49;
                                if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                                    num49 = inHigh[i - 1] - inLow[i - 1];
                                }
                                else {
                                    double num46;
                                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                        double num47;
                                        double num48;
                                        if (inClose[i - 1] >= inOpen[i - 1]) {
                                            num48 = inClose[i - 1];
                                        }
                                        else {
                                            num48 = inOpen[i - 1];
                                        }
                                        if (inClose[i - 1] >= inOpen[i - 1]) {
                                            num47 = inOpen[i - 1];
                                        }
                                        else {
                                            num47 = inClose[i - 1];
                                        }
                                        num46 = (inHigh[i - 1] - num48) + (num47 - inLow[i - 1]);
                                    }
                                    else {
                                        num46 = 0.0;
                                    }
                                    num49 = num46;
                                }
                                num50 = num49;
                            }
                            num51 = num50;
                        }
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            num45 = 2.0;
                        }
                        else {
                            num45 = 1.0;
                        }
                        if ((num52 - inLow[i - 1]) < ((Globals.candleSettings[7].factor * num51) / num45)) {
                            double num38;
                            double num44;
                            if (Globals.candleSettings[0].avgPeriod != 0.0) {
                                num44 = BodyLongPeriodTotal[0] / ((double)Globals.candleSettings[0].avgPeriod);
                            }
                            else {
                                double num43;
                                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                                    num43 = Math.Abs((double)(inClose[i] - inOpen[i]));
                                }
                                else {
                                    double num42;
                                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                                        num42 = inHigh[i] - inLow[i];
                                    }
                                    else {
                                        double num39;
                                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                                            double num40;
                                            double num41;
                                            if (inClose[i] >= inOpen[i]) {
                                                num41 = inClose[i];
                                            }
                                            else {
                                                num41 = inOpen[i];
                                            }
                                            if (inClose[i] >= inOpen[i]) {
                                                num40 = inOpen[i];
                                            }
                                            else {
                                                num40 = inClose[i];
                                            }
                                            num39 = (inHigh[i] - num41) + (num40 - inLow[i]);
                                        }
                                        else {
                                            num39 = 0.0;
                                        }
                                        num42 = num39;
                                    }
                                    num43 = num42;
                                }
                                num44 = num43;
                            }
                            if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                                num38 = 2.0;
                            }
                            else {
                                num38 = 1.0;
                            }
                            if (Math.Abs((double)(inClose[i] - inOpen[i])) > ((Globals.candleSettings[0].factor * num44) / num38)) {
                                double num30;
                                double num36;
                                double num37;
                                if (inClose[i] >= inOpen[i]) {
                                    num37 = inClose[i];
                                }
                                else {
                                    num37 = inOpen[i];
                                }
                                if (Globals.candleSettings[7].avgPeriod != 0.0) {
                                    num36 = ShadowVeryShortPeriodTotal[0] / ((double)Globals.candleSettings[7].avgPeriod);
                                }
                                else {
                                    double num35;
                                    if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                                        num35 = Math.Abs((double)(inClose[i] - inOpen[i]));
                                    }
                                    else {
                                        double num34;
                                        if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                                            num34 = inHigh[i] - inLow[i];
                                        }
                                        else {
                                            double num31;
                                            if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                                double num32;
                                                double num33;
                                                if (inClose[i] >= inOpen[i]) {
                                                    num33 = inClose[i];
                                                }
                                                else {
                                                    num33 = inOpen[i];
                                                }
                                                if (inClose[i] >= inOpen[i]) {
                                                    num32 = inOpen[i];
                                                }
                                                else {
                                                    num32 = inClose[i];
                                                }
                                                num31 = (inHigh[i] - num33) + (num32 - inLow[i]);
                                            }
                                            else {
                                                num31 = 0.0;
                                            }
                                            num34 = num31;
                                        }
                                        num35 = num34;
                                    }
                                    num36 = num35;
                                }
                                if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                    num30 = 2.0;
                                }
                                else {
                                    num30 = 1.0;
                                }
                                if ((inHigh[i] - num37) < ((Globals.candleSettings[7].factor * num36) / num30)) {
                                    double num22;
                                    double num28;
                                    double num29;
                                    if (inClose[i] >= inOpen[i]) {
                                        num29 = inOpen[i];
                                    }
                                    else {
                                        num29 = inClose[i];
                                    }
                                    if (Globals.candleSettings[7].avgPeriod != 0.0) {
                                        num28 = ShadowVeryShortPeriodTotal[0] / ((double)Globals.candleSettings[7].avgPeriod);
                                    }
                                    else {
                                        double num27;
                                        if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                                            num27 = Math.Abs((double)(inClose[i] - inOpen[i]));
                                        }
                                        else {
                                            double num26;
                                            if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                                                num26 = inHigh[i] - inLow[i];
                                            }
                                            else {
                                                double num23;
                                                if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                                    double num24;
                                                    double num25;
                                                    if (inClose[i] >= inOpen[i]) {
                                                        num25 = inClose[i];
                                                    }
                                                    else {
                                                        num25 = inOpen[i];
                                                    }
                                                    if (inClose[i] >= inOpen[i]) {
                                                        num24 = inOpen[i];
                                                    }
                                                    else {
                                                        num24 = inClose[i];
                                                    }
                                                    num23 = (inHigh[i] - num25) + (num24 - inLow[i]);
                                                }
                                                else {
                                                    num23 = 0.0;
                                                }
                                                num26 = num23;
                                            }
                                            num27 = num26;
                                        }
                                        num28 = num27;
                                    }
                                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                        num22 = 2.0;
                                    }
                                    else {
                                        num22 = 1.0;
                                    }
                                    if (((num29 - inLow[i]) < ((Globals.candleSettings[7].factor * num28) / num22)) && (((((inClose[i - 1] < inOpen[i - 1]) ? -1 : 1) == -1) && (inLow[i] > inHigh[i - 1])) || ((inClose[i - 1] >= inOpen[i - 1]) && (inHigh[i] < inLow[i - 1])))) {
                                        int num21;
                                        if (inClose[i] >= inOpen[i]) {
                                            num21 = 1;
                                        }
                                        else {
                                            num21 = -1;
                                        }
                                        outInteger[outIdx] = num21 * 100;
                                        outIdx++;
                                        goto Label_0CDA;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_0CDA:
            totIdx = 1;
            while (totIdx >= 0) {
                double num5;
                double num10;
                double num15;
                double num20;
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num20 = Math.Abs((double)(inClose[i - totIdx] - inOpen[i - totIdx]));
                }
                else {
                    double num19;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num19 = inHigh[i - totIdx] - inLow[i - totIdx];
                    }
                    else {
                        double num16;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num17;
                            double num18;
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num18 = inClose[i - totIdx];
                            }
                            else {
                                num18 = inOpen[i - totIdx];
                            }
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num17 = inOpen[i - totIdx];
                            }
                            else {
                                num17 = inClose[i - totIdx];
                            }
                            num16 = (inHigh[i - totIdx] - num18) + (num17 - inLow[i - totIdx]);
                        }
                        else {
                            num16 = 0.0;
                        }
                        num19 = num16;
                    }
                    num20 = num19;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num15 = Math.Abs((double)(inClose[BodyLongTrailingIdx - totIdx] - inOpen[BodyLongTrailingIdx - totIdx]));
                }
                else {
                    double num14;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num14 = inHigh[BodyLongTrailingIdx - totIdx] - inLow[BodyLongTrailingIdx - totIdx];
                    }
                    else {
                        double num11;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num12;
                            double num13;
                            if (inClose[BodyLongTrailingIdx - totIdx] >= inOpen[BodyLongTrailingIdx - totIdx]) {
                                num13 = inClose[BodyLongTrailingIdx - totIdx];
                            }
                            else {
                                num13 = inOpen[BodyLongTrailingIdx - totIdx];
                            }
                            if (inClose[BodyLongTrailingIdx - totIdx] >= inOpen[BodyLongTrailingIdx - totIdx]) {
                                num12 = inOpen[BodyLongTrailingIdx - totIdx];
                            }
                            else {
                                num12 = inClose[BodyLongTrailingIdx - totIdx];
                            }
                            num11 = (inHigh[BodyLongTrailingIdx - totIdx] - num13) + (num12 - inLow[BodyLongTrailingIdx - totIdx]);
                        }
                        else {
                            num11 = 0.0;
                        }
                        num14 = num11;
                    }
                    num15 = num14;
                }
                BodyLongPeriodTotal[totIdx] += num20 - num15;
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num10 = Math.Abs((double)(inClose[i - totIdx] - inOpen[i - totIdx]));
                }
                else {
                    double num9;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num9 = inHigh[i - totIdx] - inLow[i - totIdx];
                    }
                    else {
                        double num6;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num7;
                            double num8;
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num8 = inClose[i - totIdx];
                            }
                            else {
                                num8 = inOpen[i - totIdx];
                            }
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num7 = inOpen[i - totIdx];
                            }
                            else {
                                num7 = inClose[i - totIdx];
                            }
                            num6 = (inHigh[i - totIdx] - num8) + (num7 - inLow[i - totIdx]);
                        }
                        else {
                            num6 = 0.0;
                        }
                        num9 = num6;
                    }
                    num10 = num9;
                }
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num5 = Math.Abs((double)(inClose[ShadowVeryShortTrailingIdx - totIdx] - inOpen[ShadowVeryShortTrailingIdx - totIdx]));
                }
                else {
                    double num4;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num4 = inHigh[ShadowVeryShortTrailingIdx - totIdx] - inLow[ShadowVeryShortTrailingIdx - totIdx];
                    }
                    else {
                        double num;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num2;
                            double num3;
                            if (inClose[ShadowVeryShortTrailingIdx - totIdx] >= inOpen[ShadowVeryShortTrailingIdx - totIdx]) {
                                num3 = inClose[ShadowVeryShortTrailingIdx - totIdx];
                            }
                            else {
                                num3 = inOpen[ShadowVeryShortTrailingIdx - totIdx];
                            }
                            if (inClose[ShadowVeryShortTrailingIdx - totIdx] >= inOpen[ShadowVeryShortTrailingIdx - totIdx]) {
                                num2 = inOpen[ShadowVeryShortTrailingIdx - totIdx];
                            }
                            else {
                                num2 = inClose[ShadowVeryShortTrailingIdx - totIdx];
                            }
                            num = (inHigh[ShadowVeryShortTrailingIdx - totIdx] - num3) + (num2 - inLow[ShadowVeryShortTrailingIdx - totIdx]);
                        }
                        else {
                            num = 0.0;
                        }
                        num4 = num;
                    }
                    num5 = num4;
                }
                ShadowVeryShortPeriodTotal[totIdx] += num10 - num5;
                totIdx--;
            }
            i++;
            ShadowVeryShortTrailingIdx++;
            BodyLongTrailingIdx++;
            if (i <= endIdx) {
                goto Label_0413;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlKickingByLength(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            int totIdx;
            int num70;
            double[] ShadowVeryShortPeriodTotal = new double[2];
            double[] BodyLongPeriodTotal = new double[2];
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlKickingByLengthLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            ShadowVeryShortPeriodTotal[1] = 0.0;
            ShadowVeryShortPeriodTotal[0] = 0.0;
            int ShadowVeryShortTrailingIdx = startIdx - Globals.candleSettings[7].avgPeriod;
            BodyLongPeriodTotal[1] = 0.0;
            BodyLongPeriodTotal[0] = 0.0;
            int BodyLongTrailingIdx = startIdx - Globals.candleSettings[0].avgPeriod;
            int i = ShadowVeryShortTrailingIdx;
            while (true) {
                double num85;
                double num90;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num90 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num89;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num89 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num86;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num87;
                            double num88;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num88 = inClose[i - 1];
                            }
                            else {
                                num88 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num87 = inOpen[i - 1];
                            }
                            else {
                                num87 = inClose[i - 1];
                            }
                            num86 = (inHigh[i - 1] - num88) + (num87 - inLow[i - 1]);
                        }
                        else {
                            num86 = 0.0;
                        }
                        num89 = num86;
                    }
                    num90 = num89;
                }
                ShadowVeryShortPeriodTotal[1] += num90;
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num85 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num84;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num84 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num81;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num82;
                            double num83;
                            if (inClose[i] >= inOpen[i]) {
                                num83 = inClose[i];
                            }
                            else {
                                num83 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num82 = inOpen[i];
                            }
                            else {
                                num82 = inClose[i];
                            }
                            num81 = (inHigh[i] - num83) + (num82 - inLow[i]);
                        }
                        else {
                            num81 = 0.0;
                        }
                        num84 = num81;
                    }
                    num85 = num84;
                }
                ShadowVeryShortPeriodTotal[0] += num85;
                i++;
            }
            i = BodyLongTrailingIdx;
            while (true) {
                double num75;
                double num80;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num80 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num79;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num79 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num76;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num77;
                            double num78;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num78 = inClose[i - 1];
                            }
                            else {
                                num78 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num77 = inOpen[i - 1];
                            }
                            else {
                                num77 = inClose[i - 1];
                            }
                            num76 = (inHigh[i - 1] - num78) + (num77 - inLow[i - 1]);
                        }
                        else {
                            num76 = 0.0;
                        }
                        num79 = num76;
                    }
                    num80 = num79;
                }
                BodyLongPeriodTotal[1] += num80;
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num75 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num74;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num74 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num71;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num72;
                            double num73;
                            if (inClose[i] >= inOpen[i]) {
                                num73 = inClose[i];
                            }
                            else {
                                num73 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num72 = inOpen[i];
                            }
                            else {
                                num72 = inClose[i];
                            }
                            num71 = (inHigh[i] - num73) + (num72 - inLow[i]);
                        }
                        else {
                            num71 = 0.0;
                        }
                        num74 = num71;
                    }
                    num75 = num74;
                }
                BodyLongPeriodTotal[0] += num75;
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            Label_0413:
            if (inClose[i] >= inOpen[i]) {
                num70 = 1;
            }
            else {
                num70 = -1;
            }
            if (((inClose[i - 1] < inOpen[i - 1]) ? -1 : 1) == -num70) {
                double num63;
                double num69;
                if (Globals.candleSettings[0].avgPeriod != 0.0) {
                    num69 = BodyLongPeriodTotal[1] / ((double)Globals.candleSettings[0].avgPeriod);
                }
                else {
                    double num68;
                    if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                        num68 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                    }
                    else {
                        double num67;
                        if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                            num67 = inHigh[i - 1] - inLow[i - 1];
                        }
                        else {
                            double num64;
                            if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                                double num65;
                                double num66;
                                if (inClose[i - 1] >= inOpen[i - 1]) {
                                    num66 = inClose[i - 1];
                                }
                                else {
                                    num66 = inOpen[i - 1];
                                }
                                if (inClose[i - 1] >= inOpen[i - 1]) {
                                    num65 = inOpen[i - 1];
                                }
                                else {
                                    num65 = inClose[i - 1];
                                }
                                num64 = (inHigh[i - 1] - num66) + (num65 - inLow[i - 1]);
                            }
                            else {
                                num64 = 0.0;
                            }
                            num67 = num64;
                        }
                        num68 = num67;
                    }
                    num69 = num68;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                    num63 = 2.0;
                }
                else {
                    num63 = 1.0;
                }
                if (Math.Abs((double)(inClose[i - 1] - inOpen[i - 1])) > ((Globals.candleSettings[0].factor * num69) / num63)) {
                    double num55;
                    double num61;
                    double num62;
                    if (inClose[i - 1] >= inOpen[i - 1]) {
                        num62 = inClose[i - 1];
                    }
                    else {
                        num62 = inOpen[i - 1];
                    }
                    if (Globals.candleSettings[7].avgPeriod != 0.0) {
                        num61 = ShadowVeryShortPeriodTotal[1] / ((double)Globals.candleSettings[7].avgPeriod);
                    }
                    else {
                        double num60;
                        if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                            num60 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                        }
                        else {
                            double num59;
                            if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                                num59 = inHigh[i - 1] - inLow[i - 1];
                            }
                            else {
                                double num56;
                                if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                    double num57;
                                    double num58;
                                    if (inClose[i - 1] >= inOpen[i - 1]) {
                                        num58 = inClose[i - 1];
                                    }
                                    else {
                                        num58 = inOpen[i - 1];
                                    }
                                    if (inClose[i - 1] >= inOpen[i - 1]) {
                                        num57 = inOpen[i - 1];
                                    }
                                    else {
                                        num57 = inClose[i - 1];
                                    }
                                    num56 = (inHigh[i - 1] - num58) + (num57 - inLow[i - 1]);
                                }
                                else {
                                    num56 = 0.0;
                                }
                                num59 = num56;
                            }
                            num60 = num59;
                        }
                        num61 = num60;
                    }
                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                        num55 = 2.0;
                    }
                    else {
                        num55 = 1.0;
                    }
                    if ((inHigh[i - 1] - num62) < ((Globals.candleSettings[7].factor * num61) / num55)) {
                        double num47;
                        double num53;
                        double num54;
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num54 = inOpen[i - 1];
                        }
                        else {
                            num54 = inClose[i - 1];
                        }
                        if (Globals.candleSettings[7].avgPeriod != 0.0) {
                            num53 = ShadowVeryShortPeriodTotal[1] / ((double)Globals.candleSettings[7].avgPeriod);
                        }
                        else {
                            double num52;
                            if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                                num52 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                            }
                            else {
                                double num51;
                                if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                                    num51 = inHigh[i - 1] - inLow[i - 1];
                                }
                                else {
                                    double num48;
                                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                        double num49;
                                        double num50;
                                        if (inClose[i - 1] >= inOpen[i - 1]) {
                                            num50 = inClose[i - 1];
                                        }
                                        else {
                                            num50 = inOpen[i - 1];
                                        }
                                        if (inClose[i - 1] >= inOpen[i - 1]) {
                                            num49 = inOpen[i - 1];
                                        }
                                        else {
                                            num49 = inClose[i - 1];
                                        }
                                        num48 = (inHigh[i - 1] - num50) + (num49 - inLow[i - 1]);
                                    }
                                    else {
                                        num48 = 0.0;
                                    }
                                    num51 = num48;
                                }
                                num52 = num51;
                            }
                            num53 = num52;
                        }
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            num47 = 2.0;
                        }
                        else {
                            num47 = 1.0;
                        }
                        if ((num54 - inLow[i - 1]) < ((Globals.candleSettings[7].factor * num53) / num47)) {
                            double num40;
                            double num46;
                            if (Globals.candleSettings[0].avgPeriod != 0.0) {
                                num46 = BodyLongPeriodTotal[0] / ((double)Globals.candleSettings[0].avgPeriod);
                            }
                            else {
                                double num45;
                                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                                    num45 = Math.Abs((double)(inClose[i] - inOpen[i]));
                                }
                                else {
                                    double num44;
                                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                                        num44 = inHigh[i] - inLow[i];
                                    }
                                    else {
                                        double num41;
                                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                                            double num42;
                                            double num43;
                                            if (inClose[i] >= inOpen[i]) {
                                                num43 = inClose[i];
                                            }
                                            else {
                                                num43 = inOpen[i];
                                            }
                                            if (inClose[i] >= inOpen[i]) {
                                                num42 = inOpen[i];
                                            }
                                            else {
                                                num42 = inClose[i];
                                            }
                                            num41 = (inHigh[i] - num43) + (num42 - inLow[i]);
                                        }
                                        else {
                                            num41 = 0.0;
                                        }
                                        num44 = num41;
                                    }
                                    num45 = num44;
                                }
                                num46 = num45;
                            }
                            if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                                num40 = 2.0;
                            }
                            else {
                                num40 = 1.0;
                            }
                            if (Math.Abs((double)(inClose[i] - inOpen[i])) > ((Globals.candleSettings[0].factor * num46) / num40)) {
                                double num32;
                                double num38;
                                double num39;
                                if (inClose[i] >= inOpen[i]) {
                                    num39 = inClose[i];
                                }
                                else {
                                    num39 = inOpen[i];
                                }
                                if (Globals.candleSettings[7].avgPeriod != 0.0) {
                                    num38 = ShadowVeryShortPeriodTotal[0] / ((double)Globals.candleSettings[7].avgPeriod);
                                }
                                else {
                                    double num37;
                                    if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                                        num37 = Math.Abs((double)(inClose[i] - inOpen[i]));
                                    }
                                    else {
                                        double num36;
                                        if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                                            num36 = inHigh[i] - inLow[i];
                                        }
                                        else {
                                            double num33;
                                            if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                                double num34;
                                                double num35;
                                                if (inClose[i] >= inOpen[i]) {
                                                    num35 = inClose[i];
                                                }
                                                else {
                                                    num35 = inOpen[i];
                                                }
                                                if (inClose[i] >= inOpen[i]) {
                                                    num34 = inOpen[i];
                                                }
                                                else {
                                                    num34 = inClose[i];
                                                }
                                                num33 = (inHigh[i] - num35) + (num34 - inLow[i]);
                                            }
                                            else {
                                                num33 = 0.0;
                                            }
                                            num36 = num33;
                                        }
                                        num37 = num36;
                                    }
                                    num38 = num37;
                                }
                                if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                    num32 = 2.0;
                                }
                                else {
                                    num32 = 1.0;
                                }
                                if ((inHigh[i] - num39) < ((Globals.candleSettings[7].factor * num38) / num32)) {
                                    double num24;
                                    double num30;
                                    double num31;
                                    if (inClose[i] >= inOpen[i]) {
                                        num31 = inOpen[i];
                                    }
                                    else {
                                        num31 = inClose[i];
                                    }
                                    if (Globals.candleSettings[7].avgPeriod != 0.0) {
                                        num30 = ShadowVeryShortPeriodTotal[0] / ((double)Globals.candleSettings[7].avgPeriod);
                                    }
                                    else {
                                        double num29;
                                        if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                                            num29 = Math.Abs((double)(inClose[i] - inOpen[i]));
                                        }
                                        else {
                                            double num28;
                                            if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                                                num28 = inHigh[i] - inLow[i];
                                            }
                                            else {
                                                double num25;
                                                if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                                    double num26;
                                                    double num27;
                                                    if (inClose[i] >= inOpen[i]) {
                                                        num27 = inClose[i];
                                                    }
                                                    else {
                                                        num27 = inOpen[i];
                                                    }
                                                    if (inClose[i] >= inOpen[i]) {
                                                        num26 = inOpen[i];
                                                    }
                                                    else {
                                                        num26 = inClose[i];
                                                    }
                                                    num25 = (inHigh[i] - num27) + (num26 - inLow[i]);
                                                }
                                                else {
                                                    num25 = 0.0;
                                                }
                                                num28 = num25;
                                            }
                                            num29 = num28;
                                        }
                                        num30 = num29;
                                    }
                                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                        num24 = 2.0;
                                    }
                                    else {
                                        num24 = 1.0;
                                    }
                                    if (((num31 - inLow[i]) < ((Globals.candleSettings[7].factor * num30) / num24)) && (((((inClose[i - 1] < inOpen[i - 1]) ? -1 : 1) == -1) && (inLow[i] > inHigh[i - 1])) || ((inClose[i - 1] >= inOpen[i - 1]) && (inHigh[i] < inLow[i - 1])))) {
                                        int num21;
                                        int num22;
                                        int num23;
                                        if (Math.Abs((double)(inClose[i] - inOpen[i])) > Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]))) {
                                            num23 = i;
                                        }
                                        else {
                                            num23 = i - 1;
                                        }
                                        if (Math.Abs((double)(inClose[i] - inOpen[i])) > Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]))) {
                                            num22 = i;
                                        }
                                        else {
                                            num22 = i - 1;
                                        }
                                        if (inClose[num23] >= inOpen[num22]) {
                                            num21 = 1;
                                        }
                                        else {
                                            num21 = -1;
                                        }
                                        outInteger[outIdx] = num21 * 100;
                                        outIdx++;
                                        goto Label_0D39;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_0D39:
            totIdx = 1;
            while (totIdx >= 0) {
                double num5;
                double num10;
                double num15;
                double num20;
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num20 = Math.Abs((double)(inClose[i - totIdx] - inOpen[i - totIdx]));
                }
                else {
                    double num19;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num19 = inHigh[i - totIdx] - inLow[i - totIdx];
                    }
                    else {
                        double num16;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num17;
                            double num18;
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num18 = inClose[i - totIdx];
                            }
                            else {
                                num18 = inOpen[i - totIdx];
                            }
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num17 = inOpen[i - totIdx];
                            }
                            else {
                                num17 = inClose[i - totIdx];
                            }
                            num16 = (inHigh[i - totIdx] - num18) + (num17 - inLow[i - totIdx]);
                        }
                        else {
                            num16 = 0.0;
                        }
                        num19 = num16;
                    }
                    num20 = num19;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num15 = Math.Abs((double)(inClose[BodyLongTrailingIdx - totIdx] - inOpen[BodyLongTrailingIdx - totIdx]));
                }
                else {
                    double num14;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num14 = inHigh[BodyLongTrailingIdx - totIdx] - inLow[BodyLongTrailingIdx - totIdx];
                    }
                    else {
                        double num11;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num12;
                            double num13;
                            if (inClose[BodyLongTrailingIdx - totIdx] >= inOpen[BodyLongTrailingIdx - totIdx]) {
                                num13 = inClose[BodyLongTrailingIdx - totIdx];
                            }
                            else {
                                num13 = inOpen[BodyLongTrailingIdx - totIdx];
                            }
                            if (inClose[BodyLongTrailingIdx - totIdx] >= inOpen[BodyLongTrailingIdx - totIdx]) {
                                num12 = inOpen[BodyLongTrailingIdx - totIdx];
                            }
                            else {
                                num12 = inClose[BodyLongTrailingIdx - totIdx];
                            }
                            num11 = (inHigh[BodyLongTrailingIdx - totIdx] - num13) + (num12 - inLow[BodyLongTrailingIdx - totIdx]);
                        }
                        else {
                            num11 = 0.0;
                        }
                        num14 = num11;
                    }
                    num15 = num14;
                }
                BodyLongPeriodTotal[totIdx] += num20 - num15;
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num10 = Math.Abs((double)(inClose[i - totIdx] - inOpen[i - totIdx]));
                }
                else {
                    double num9;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num9 = inHigh[i - totIdx] - inLow[i - totIdx];
                    }
                    else {
                        double num6;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num7;
                            double num8;
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num8 = inClose[i - totIdx];
                            }
                            else {
                                num8 = inOpen[i - totIdx];
                            }
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num7 = inOpen[i - totIdx];
                            }
                            else {
                                num7 = inClose[i - totIdx];
                            }
                            num6 = (inHigh[i - totIdx] - num8) + (num7 - inLow[i - totIdx]);
                        }
                        else {
                            num6 = 0.0;
                        }
                        num9 = num6;
                    }
                    num10 = num9;
                }
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num5 = Math.Abs((double)(inClose[ShadowVeryShortTrailingIdx - totIdx] - inOpen[ShadowVeryShortTrailingIdx - totIdx]));
                }
                else {
                    double num4;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num4 = inHigh[ShadowVeryShortTrailingIdx - totIdx] - inLow[ShadowVeryShortTrailingIdx - totIdx];
                    }
                    else {
                        double num;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num2;
                            double num3;
                            if (inClose[ShadowVeryShortTrailingIdx - totIdx] >= inOpen[ShadowVeryShortTrailingIdx - totIdx]) {
                                num3 = inClose[ShadowVeryShortTrailingIdx - totIdx];
                            }
                            else {
                                num3 = inOpen[ShadowVeryShortTrailingIdx - totIdx];
                            }
                            if (inClose[ShadowVeryShortTrailingIdx - totIdx] >= inOpen[ShadowVeryShortTrailingIdx - totIdx]) {
                                num2 = inOpen[ShadowVeryShortTrailingIdx - totIdx];
                            }
                            else {
                                num2 = inClose[ShadowVeryShortTrailingIdx - totIdx];
                            }
                            num = (inHigh[ShadowVeryShortTrailingIdx - totIdx] - num3) + (num2 - inLow[ShadowVeryShortTrailingIdx - totIdx]);
                        }
                        else {
                            num = 0.0;
                        }
                        num4 = num;
                    }
                    num5 = num4;
                }
                ShadowVeryShortPeriodTotal[totIdx] += num10 - num5;
                totIdx--;
            }
            i++;
            ShadowVeryShortTrailingIdx++;
            BodyLongTrailingIdx++;
            if (i <= endIdx) {
                goto Label_0413;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlLadderBottom(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlLadderBottomLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double ShadowVeryShortPeriodTotal = 0.0;
            int ShadowVeryShortTrailingIdx = startIdx - Globals.candleSettings[7].avgPeriod;
            int i = ShadowVeryShortTrailingIdx;
            while (true) {
                double num23;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num23 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num22;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num22 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num19;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num20;
                            double num21;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num21 = inClose[i - 1];
                            }
                            else {
                                num21 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num20 = inOpen[i - 1];
                            }
                            else {
                                num20 = inClose[i - 1];
                            }
                            num19 = (inHigh[i - 1] - num21) + (num20 - inLow[i - 1]);
                        }
                        else {
                            num19 = 0.0;
                        }
                        num22 = num19;
                    }
                    num23 = num22;
                }
                ShadowVeryShortPeriodTotal += num23;
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            Label_0168:
            if ((((((((inClose[i - 4] < inOpen[i - 4]) ? -1 : 1) == -1) && (((inClose[i - 3] < inOpen[i - 3]) ? -1 : 1) == -1)) && (((inClose[i - 2] < inOpen[i - 2]) ? -1 : 1) == -1)) && ((inOpen[i - 4] > inOpen[i - 3]) && (inOpen[i - 3] > inOpen[i - 2]))) && ((inClose[i - 4] > inClose[i - 3]) && (inClose[i - 3] > inClose[i - 2]))) && (((inClose[i - 1] < inOpen[i - 1]) ? -1 : 1) == -1)) {
                double num11;
                double num17;
                double num18;
                if (inClose[i - 1] >= inOpen[i - 1]) {
                    num18 = inClose[i - 1];
                }
                else {
                    num18 = inOpen[i - 1];
                }
                if (Globals.candleSettings[7].avgPeriod != 0.0) {
                    num17 = ShadowVeryShortPeriodTotal / ((double)Globals.candleSettings[7].avgPeriod);
                }
                else {
                    double num16;
                    if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                        num16 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                    }
                    else {
                        double num15;
                        if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                            num15 = inHigh[i - 1] - inLow[i - 1];
                        }
                        else {
                            double num12;
                            if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                double num13;
                                double num14;
                                if (inClose[i - 1] >= inOpen[i - 1]) {
                                    num14 = inClose[i - 1];
                                }
                                else {
                                    num14 = inOpen[i - 1];
                                }
                                if (inClose[i - 1] >= inOpen[i - 1]) {
                                    num13 = inOpen[i - 1];
                                }
                                else {
                                    num13 = inClose[i - 1];
                                }
                                num12 = (inHigh[i - 1] - num14) + (num13 - inLow[i - 1]);
                            }
                            else {
                                num12 = 0.0;
                            }
                            num15 = num12;
                        }
                        num16 = num15;
                    }
                    num17 = num16;
                }
                if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                    num11 = 2.0;
                }
                else {
                    num11 = 1.0;
                }
                if ((((inHigh[i - 1] - num18) > ((Globals.candleSettings[7].factor * num17) / num11)) && (((inClose[i] < inOpen[i]) ? -1 : 1) == 1)) && ((inOpen[i] > inOpen[i - 1]) && (inClose[i] > inHigh[i - 1]))) {
                    outInteger[outIdx] = 100;
                    outIdx++;
                    goto Label_03B0;
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_03B0:
            if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
            }
            else {
                double num9;
                if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i - 1] - inLow[i - 1];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num8 = inClose[i - 1];
                        }
                        else {
                            num8 = inOpen[i - 1];
                        }
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num7 = inOpen[i - 1];
                        }
                        else {
                            num7 = inClose[i - 1];
                        }
                        num6 = (inHigh[i - 1] - num8) + (num7 - inLow[i - 1]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[ShadowVeryShortTrailingIdx - 1] - inOpen[ShadowVeryShortTrailingIdx - 1]));
            }
            else {
                double num4;
                if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                    num4 = inHigh[ShadowVeryShortTrailingIdx - 1] - inLow[ShadowVeryShortTrailingIdx - 1];
                }
                else {
                    double num;
                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[ShadowVeryShortTrailingIdx - 1] >= inOpen[ShadowVeryShortTrailingIdx - 1]) {
                            num3 = inClose[ShadowVeryShortTrailingIdx - 1];
                        }
                        else {
                            num3 = inOpen[ShadowVeryShortTrailingIdx - 1];
                        }
                        if (inClose[ShadowVeryShortTrailingIdx - 1] >= inOpen[ShadowVeryShortTrailingIdx - 1]) {
                            num2 = inOpen[ShadowVeryShortTrailingIdx - 1];
                        }
                        else {
                            num2 = inClose[ShadowVeryShortTrailingIdx - 1];
                        }
                        num = (inHigh[ShadowVeryShortTrailingIdx - 1] - num3) + (num2 - inLow[ShadowVeryShortTrailingIdx - 1]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            ShadowVeryShortPeriodTotal += num10 - num5;
            i++;
            ShadowVeryShortTrailingIdx++;
            if (i <= endIdx) {
                goto Label_0168;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlLongLeggedDoji(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            double num15;
            double num20;
            double num37;
            double num43;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlLongLeggedDojiLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double BodyDojiPeriodTotal = 0.0;
            int BodyDojiTrailingIdx = startIdx - Globals.candleSettings[3].avgPeriod;
            double ShadowLongPeriodTotal = 0.0;
            int ShadowLongTrailingIdx = startIdx - Globals.candleSettings[4].avgPeriod;
            int i = BodyDojiTrailingIdx;
            while (true) {
                double num53;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                    num53 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num52;
                    if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                        num52 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num49;
                        if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                            double num50;
                            double num51;
                            if (inClose[i] >= inOpen[i]) {
                                num51 = inClose[i];
                            }
                            else {
                                num51 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num50 = inOpen[i];
                            }
                            else {
                                num50 = inClose[i];
                            }
                            num49 = (inHigh[i] - num51) + (num50 - inLow[i]);
                        }
                        else {
                            num49 = 0.0;
                        }
                        num52 = num49;
                    }
                    num53 = num52;
                }
                BodyDojiPeriodTotal += num53;
                i++;
            }
            i = ShadowLongTrailingIdx;
            while (true) {
                double num48;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[4].rangeType == RangeType.RealBody) {
                    num48 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num47;
                    if (Globals.candleSettings[4].rangeType == RangeType.HighLow) {
                        num47 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num44;
                        if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                            double num45;
                            double num46;
                            if (inClose[i] >= inOpen[i]) {
                                num46 = inClose[i];
                            }
                            else {
                                num46 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num45 = inOpen[i];
                            }
                            else {
                                num45 = inClose[i];
                            }
                            num44 = (inHigh[i] - num46) + (num45 - inLow[i]);
                        }
                        else {
                            num44 = 0.0;
                        }
                        num47 = num44;
                    }
                    num48 = num47;
                }
                ShadowLongPeriodTotal += num48;
                i++;
            }
            int outIdx = 0;
            Label_022E:
            if (Globals.candleSettings[3].avgPeriod != 0.0) {
                num43 = BodyDojiPeriodTotal / ((double)Globals.candleSettings[3].avgPeriod);
            }
            else {
                double num42;
                if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                    num42 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num41;
                    if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                        num41 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num38;
                        if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                            double num39;
                            double num40;
                            if (inClose[i] >= inOpen[i]) {
                                num40 = inClose[i];
                            }
                            else {
                                num40 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num39 = inOpen[i];
                            }
                            else {
                                num39 = inClose[i];
                            }
                            num38 = (inHigh[i] - num40) + (num39 - inLow[i]);
                        }
                        else {
                            num38 = 0.0;
                        }
                        num41 = num38;
                    }
                    num42 = num41;
                }
                num43 = num42;
            }
            if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                num37 = 2.0;
            }
            else {
                num37 = 1.0;
            }
            if (Math.Abs((double)(inClose[i] - inOpen[i])) <= ((Globals.candleSettings[3].factor * num43) / num37)) {
                double num29;
                double num35;
                double num36;
                if (inClose[i] >= inOpen[i]) {
                    num36 = inOpen[i];
                }
                else {
                    num36 = inClose[i];
                }
                if (Globals.candleSettings[4].avgPeriod != 0.0) {
                    num35 = ShadowLongPeriodTotal / ((double)Globals.candleSettings[4].avgPeriod);
                }
                else {
                    double num34;
                    if (Globals.candleSettings[4].rangeType == RangeType.RealBody) {
                        num34 = Math.Abs((double)(inClose[i] - inOpen[i]));
                    }
                    else {
                        double num33;
                        if (Globals.candleSettings[4].rangeType == RangeType.HighLow) {
                            num33 = inHigh[i] - inLow[i];
                        }
                        else {
                            double num30;
                            if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                                double num31;
                                double num32;
                                if (inClose[i] >= inOpen[i]) {
                                    num32 = inClose[i];
                                }
                                else {
                                    num32 = inOpen[i];
                                }
                                if (inClose[i] >= inOpen[i]) {
                                    num31 = inOpen[i];
                                }
                                else {
                                    num31 = inClose[i];
                                }
                                num30 = (inHigh[i] - num32) + (num31 - inLow[i]);
                            }
                            else {
                                num30 = 0.0;
                            }
                            num33 = num30;
                        }
                        num34 = num33;
                    }
                    num35 = num34;
                }
                if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                    num29 = 2.0;
                }
                else {
                    num29 = 1.0;
                }
                if ((num36 - inLow[i]) <= ((Globals.candleSettings[4].factor * num35) / num29)) {
                    double num21;
                    double num27;
                    double num28;
                    if (inClose[i] >= inOpen[i]) {
                        num28 = inClose[i];
                    }
                    else {
                        num28 = inOpen[i];
                    }
                    if (Globals.candleSettings[4].avgPeriod != 0.0) {
                        num27 = ShadowLongPeriodTotal / ((double)Globals.candleSettings[4].avgPeriod);
                    }
                    else {
                        double num26;
                        if (Globals.candleSettings[4].rangeType == RangeType.RealBody) {
                            num26 = Math.Abs((double)(inClose[i] - inOpen[i]));
                        }
                        else {
                            double num25;
                            if (Globals.candleSettings[4].rangeType == RangeType.HighLow) {
                                num25 = inHigh[i] - inLow[i];
                            }
                            else {
                                double num22;
                                if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                                    double num23;
                                    double num24;
                                    if (inClose[i] >= inOpen[i]) {
                                        num24 = inClose[i];
                                    }
                                    else {
                                        num24 = inOpen[i];
                                    }
                                    if (inClose[i] >= inOpen[i]) {
                                        num23 = inOpen[i];
                                    }
                                    else {
                                        num23 = inClose[i];
                                    }
                                    num22 = (inHigh[i] - num24) + (num23 - inLow[i]);
                                }
                                else {
                                    num22 = 0.0;
                                }
                                num25 = num22;
                            }
                            num26 = num25;
                        }
                        num27 = num26;
                    }
                    if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                        num21 = 2.0;
                    }
                    else {
                        num21 = 1.0;
                    }
                    if ((inHigh[i] - num28) <= ((Globals.candleSettings[4].factor * num27) / num21)) {
                        goto Label_0610;
                    }
                }
                outInteger[outIdx] = 100;
                outIdx++;
                goto Label_0619;
            }
            Label_0610:
            outInteger[outIdx] = 0;
            outIdx++;
            Label_0619:
            if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                num20 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num19;
                if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                    num19 = inHigh[i] - inLow[i];
                }
                else {
                    double num16;
                    if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                        double num17;
                        double num18;
                        if (inClose[i] >= inOpen[i]) {
                            num18 = inClose[i];
                        }
                        else {
                            num18 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num17 = inOpen[i];
                        }
                        else {
                            num17 = inClose[i];
                        }
                        num16 = (inHigh[i] - num18) + (num17 - inLow[i]);
                    }
                    else {
                        num16 = 0.0;
                    }
                    num19 = num16;
                }
                num20 = num19;
            }
            if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                num15 = Math.Abs((double)(inClose[BodyDojiTrailingIdx] - inOpen[BodyDojiTrailingIdx]));
            }
            else {
                double num14;
                if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                    num14 = inHigh[BodyDojiTrailingIdx] - inLow[BodyDojiTrailingIdx];
                }
                else {
                    double num11;
                    if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                        double num12;
                        double num13;
                        if (inClose[BodyDojiTrailingIdx] >= inOpen[BodyDojiTrailingIdx]) {
                            num13 = inClose[BodyDojiTrailingIdx];
                        }
                        else {
                            num13 = inOpen[BodyDojiTrailingIdx];
                        }
                        if (inClose[BodyDojiTrailingIdx] >= inOpen[BodyDojiTrailingIdx]) {
                            num12 = inOpen[BodyDojiTrailingIdx];
                        }
                        else {
                            num12 = inClose[BodyDojiTrailingIdx];
                        }
                        num11 = (inHigh[BodyDojiTrailingIdx] - num13) + (num12 - inLow[BodyDojiTrailingIdx]);
                    }
                    else {
                        num11 = 0.0;
                    }
                    num14 = num11;
                }
                num15 = num14;
            }
            BodyDojiPeriodTotal += num20 - num15;
            if (Globals.candleSettings[4].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num9;
                if (Globals.candleSettings[4].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i] - inLow[i];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i] >= inOpen[i]) {
                            num8 = inClose[i];
                        }
                        else {
                            num8 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num7 = inOpen[i];
                        }
                        else {
                            num7 = inClose[i];
                        }
                        num6 = (inHigh[i] - num8) + (num7 - inLow[i]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[4].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[ShadowLongTrailingIdx] - inOpen[ShadowLongTrailingIdx]));
            }
            else {
                double num4;
                if (Globals.candleSettings[4].rangeType == RangeType.HighLow) {
                    num4 = inHigh[ShadowLongTrailingIdx] - inLow[ShadowLongTrailingIdx];
                }
                else {
                    double num;
                    if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[ShadowLongTrailingIdx] >= inOpen[ShadowLongTrailingIdx]) {
                            num3 = inClose[ShadowLongTrailingIdx];
                        }
                        else {
                            num3 = inOpen[ShadowLongTrailingIdx];
                        }
                        if (inClose[ShadowLongTrailingIdx] >= inOpen[ShadowLongTrailingIdx]) {
                            num2 = inOpen[ShadowLongTrailingIdx];
                        }
                        else {
                            num2 = inClose[ShadowLongTrailingIdx];
                        }
                        num = (inHigh[ShadowLongTrailingIdx] - num3) + (num2 - inLow[ShadowLongTrailingIdx]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            ShadowLongPeriodTotal += num10 - num5;
            i++;
            BodyDojiTrailingIdx++;
            ShadowLongTrailingIdx++;
            if (i <= endIdx) {
                goto Label_022E;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlLongLine(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            double num15;
            double num20;
            double num38;
            double num44;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlLongLineLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double BodyPeriodTotal = 0.0;
            int BodyTrailingIdx = startIdx - Globals.candleSettings[0].avgPeriod;
            double ShadowPeriodTotal = 0.0;
            int ShadowTrailingIdx = startIdx - Globals.candleSettings[6].avgPeriod;
            int i = BodyTrailingIdx;
            while (true) {
                double num54;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num54 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num53;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num53 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num50;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num51;
                            double num52;
                            if (inClose[i] >= inOpen[i]) {
                                num52 = inClose[i];
                            }
                            else {
                                num52 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num51 = inOpen[i];
                            }
                            else {
                                num51 = inClose[i];
                            }
                            num50 = (inHigh[i] - num52) + (num51 - inLow[i]);
                        }
                        else {
                            num50 = 0.0;
                        }
                        num53 = num50;
                    }
                    num54 = num53;
                }
                BodyPeriodTotal += num54;
                i++;
            }
            i = ShadowTrailingIdx;
            while (true) {
                double num49;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[6].rangeType == RangeType.RealBody) {
                    num49 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num48;
                    if (Globals.candleSettings[6].rangeType == RangeType.HighLow) {
                        num48 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num45;
                        if (Globals.candleSettings[6].rangeType == RangeType.Shadows) {
                            double num46;
                            double num47;
                            if (inClose[i] >= inOpen[i]) {
                                num47 = inClose[i];
                            }
                            else {
                                num47 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num46 = inOpen[i];
                            }
                            else {
                                num46 = inClose[i];
                            }
                            num45 = (inHigh[i] - num47) + (num46 - inLow[i]);
                        }
                        else {
                            num45 = 0.0;
                        }
                        num48 = num45;
                    }
                    num49 = num48;
                }
                ShadowPeriodTotal += num49;
                i++;
            }
            int outIdx = 0;
            Label_022E:
            if (Globals.candleSettings[0].avgPeriod != 0.0) {
                num44 = BodyPeriodTotal / ((double)Globals.candleSettings[0].avgPeriod);
            }
            else {
                double num43;
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num43 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num42;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num42 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num39;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num40;
                            double num41;
                            if (inClose[i] >= inOpen[i]) {
                                num41 = inClose[i];
                            }
                            else {
                                num41 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num40 = inOpen[i];
                            }
                            else {
                                num40 = inClose[i];
                            }
                            num39 = (inHigh[i] - num41) + (num40 - inLow[i]);
                        }
                        else {
                            num39 = 0.0;
                        }
                        num42 = num39;
                    }
                    num43 = num42;
                }
                num44 = num43;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                num38 = 2.0;
            }
            else {
                num38 = 1.0;
            }
            if (Math.Abs((double)(inClose[i] - inOpen[i])) > ((Globals.candleSettings[0].factor * num44) / num38)) {
                double num30;
                double num36;
                double num37;
                if (inClose[i] >= inOpen[i]) {
                    num37 = inClose[i];
                }
                else {
                    num37 = inOpen[i];
                }
                if (Globals.candleSettings[6].avgPeriod != 0.0) {
                    num36 = ShadowPeriodTotal / ((double)Globals.candleSettings[6].avgPeriod);
                }
                else {
                    double num35;
                    if (Globals.candleSettings[6].rangeType == RangeType.RealBody) {
                        num35 = Math.Abs((double)(inClose[i] - inOpen[i]));
                    }
                    else {
                        double num34;
                        if (Globals.candleSettings[6].rangeType == RangeType.HighLow) {
                            num34 = inHigh[i] - inLow[i];
                        }
                        else {
                            double num31;
                            if (Globals.candleSettings[6].rangeType == RangeType.Shadows) {
                                double num32;
                                double num33;
                                if (inClose[i] >= inOpen[i]) {
                                    num33 = inClose[i];
                                }
                                else {
                                    num33 = inOpen[i];
                                }
                                if (inClose[i] >= inOpen[i]) {
                                    num32 = inOpen[i];
                                }
                                else {
                                    num32 = inClose[i];
                                }
                                num31 = (inHigh[i] - num33) + (num32 - inLow[i]);
                            }
                            else {
                                num31 = 0.0;
                            }
                            num34 = num31;
                        }
                        num35 = num34;
                    }
                    num36 = num35;
                }
                if (Globals.candleSettings[6].rangeType == RangeType.Shadows) {
                    num30 = 2.0;
                }
                else {
                    num30 = 1.0;
                }
                if ((inHigh[i] - num37) < ((Globals.candleSettings[6].factor * num36) / num30)) {
                    double num22;
                    double num28;
                    double num29;
                    if (inClose[i] >= inOpen[i]) {
                        num29 = inOpen[i];
                    }
                    else {
                        num29 = inClose[i];
                    }
                    if (Globals.candleSettings[6].avgPeriod != 0.0) {
                        num28 = ShadowPeriodTotal / ((double)Globals.candleSettings[6].avgPeriod);
                    }
                    else {
                        double num27;
                        if (Globals.candleSettings[6].rangeType == RangeType.RealBody) {
                            num27 = Math.Abs((double)(inClose[i] - inOpen[i]));
                        }
                        else {
                            double num26;
                            if (Globals.candleSettings[6].rangeType == RangeType.HighLow) {
                                num26 = inHigh[i] - inLow[i];
                            }
                            else {
                                double num23;
                                if (Globals.candleSettings[6].rangeType == RangeType.Shadows) {
                                    double num24;
                                    double num25;
                                    if (inClose[i] >= inOpen[i]) {
                                        num25 = inClose[i];
                                    }
                                    else {
                                        num25 = inOpen[i];
                                    }
                                    if (inClose[i] >= inOpen[i]) {
                                        num24 = inOpen[i];
                                    }
                                    else {
                                        num24 = inClose[i];
                                    }
                                    num23 = (inHigh[i] - num25) + (num24 - inLow[i]);
                                }
                                else {
                                    num23 = 0.0;
                                }
                                num26 = num23;
                            }
                            num27 = num26;
                        }
                        num28 = num27;
                    }
                    if (Globals.candleSettings[6].rangeType == RangeType.Shadows) {
                        num22 = 2.0;
                    }
                    else {
                        num22 = 1.0;
                    }
                    if ((num29 - inLow[i]) < ((Globals.candleSettings[6].factor * num28) / num22)) {
                        int num21;
                        if (inClose[i] >= inOpen[i]) {
                            num21 = 1;
                        }
                        else {
                            num21 = -1;
                        }
                        outInteger[outIdx] = num21 * 100;
                        outIdx++;
                        goto Label_062D;
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_062D:
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num20 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num19;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num19 = inHigh[i] - inLow[i];
                }
                else {
                    double num16;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num17;
                        double num18;
                        if (inClose[i] >= inOpen[i]) {
                            num18 = inClose[i];
                        }
                        else {
                            num18 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num17 = inOpen[i];
                        }
                        else {
                            num17 = inClose[i];
                        }
                        num16 = (inHigh[i] - num18) + (num17 - inLow[i]);
                    }
                    else {
                        num16 = 0.0;
                    }
                    num19 = num16;
                }
                num20 = num19;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num15 = Math.Abs((double)(inClose[BodyTrailingIdx] - inOpen[BodyTrailingIdx]));
            }
            else {
                double num14;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num14 = inHigh[BodyTrailingIdx] - inLow[BodyTrailingIdx];
                }
                else {
                    double num11;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num12;
                        double num13;
                        if (inClose[BodyTrailingIdx] >= inOpen[BodyTrailingIdx]) {
                            num13 = inClose[BodyTrailingIdx];
                        }
                        else {
                            num13 = inOpen[BodyTrailingIdx];
                        }
                        if (inClose[BodyTrailingIdx] >= inOpen[BodyTrailingIdx]) {
                            num12 = inOpen[BodyTrailingIdx];
                        }
                        else {
                            num12 = inClose[BodyTrailingIdx];
                        }
                        num11 = (inHigh[BodyTrailingIdx] - num13) + (num12 - inLow[BodyTrailingIdx]);
                    }
                    else {
                        num11 = 0.0;
                    }
                    num14 = num11;
                }
                num15 = num14;
            }
            BodyPeriodTotal += num20 - num15;
            if (Globals.candleSettings[6].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num9;
                if (Globals.candleSettings[6].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i] - inLow[i];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[6].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i] >= inOpen[i]) {
                            num8 = inClose[i];
                        }
                        else {
                            num8 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num7 = inOpen[i];
                        }
                        else {
                            num7 = inClose[i];
                        }
                        num6 = (inHigh[i] - num8) + (num7 - inLow[i]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[6].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[ShadowTrailingIdx] - inOpen[ShadowTrailingIdx]));
            }
            else {
                double num4;
                if (Globals.candleSettings[6].rangeType == RangeType.HighLow) {
                    num4 = inHigh[ShadowTrailingIdx] - inLow[ShadowTrailingIdx];
                }
                else {
                    double num;
                    if (Globals.candleSettings[6].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[ShadowTrailingIdx] >= inOpen[ShadowTrailingIdx]) {
                            num3 = inClose[ShadowTrailingIdx];
                        }
                        else {
                            num3 = inOpen[ShadowTrailingIdx];
                        }
                        if (inClose[ShadowTrailingIdx] >= inOpen[ShadowTrailingIdx]) {
                            num2 = inOpen[ShadowTrailingIdx];
                        }
                        else {
                            num2 = inClose[ShadowTrailingIdx];
                        }
                        num = (inHigh[ShadowTrailingIdx] - num3) + (num2 - inLow[ShadowTrailingIdx]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            ShadowPeriodTotal += num10 - num5;
            i++;
            BodyTrailingIdx++;
            ShadowTrailingIdx++;
            if (i <= endIdx) {
                goto Label_022E;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlMarubozu(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            double num15;
            double num20;
            double num38;
            double num44;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlMarubozuLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double BodyLongPeriodTotal = 0.0;
            int BodyLongTrailingIdx = startIdx - Globals.candleSettings[0].avgPeriod;
            double ShadowVeryShortPeriodTotal = 0.0;
            int ShadowVeryShortTrailingIdx = startIdx - Globals.candleSettings[7].avgPeriod;
            int i = BodyLongTrailingIdx;
            while (true) {
                double num54;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num54 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num53;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num53 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num50;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num51;
                            double num52;
                            if (inClose[i] >= inOpen[i]) {
                                num52 = inClose[i];
                            }
                            else {
                                num52 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num51 = inOpen[i];
                            }
                            else {
                                num51 = inClose[i];
                            }
                            num50 = (inHigh[i] - num52) + (num51 - inLow[i]);
                        }
                        else {
                            num50 = 0.0;
                        }
                        num53 = num50;
                    }
                    num54 = num53;
                }
                BodyLongPeriodTotal += num54;
                i++;
            }
            i = ShadowVeryShortTrailingIdx;
            while (true) {
                double num49;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num49 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num48;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num48 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num45;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num46;
                            double num47;
                            if (inClose[i] >= inOpen[i]) {
                                num47 = inClose[i];
                            }
                            else {
                                num47 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num46 = inOpen[i];
                            }
                            else {
                                num46 = inClose[i];
                            }
                            num45 = (inHigh[i] - num47) + (num46 - inLow[i]);
                        }
                        else {
                            num45 = 0.0;
                        }
                        num48 = num45;
                    }
                    num49 = num48;
                }
                ShadowVeryShortPeriodTotal += num49;
                i++;
            }
            int outIdx = 0;
            Label_022E:
            if (Globals.candleSettings[0].avgPeriod != 0.0) {
                num44 = BodyLongPeriodTotal / ((double)Globals.candleSettings[0].avgPeriod);
            }
            else {
                double num43;
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num43 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num42;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num42 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num39;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num40;
                            double num41;
                            if (inClose[i] >= inOpen[i]) {
                                num41 = inClose[i];
                            }
                            else {
                                num41 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num40 = inOpen[i];
                            }
                            else {
                                num40 = inClose[i];
                            }
                            num39 = (inHigh[i] - num41) + (num40 - inLow[i]);
                        }
                        else {
                            num39 = 0.0;
                        }
                        num42 = num39;
                    }
                    num43 = num42;
                }
                num44 = num43;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                num38 = 2.0;
            }
            else {
                num38 = 1.0;
            }
            if (Math.Abs((double)(inClose[i] - inOpen[i])) > ((Globals.candleSettings[0].factor * num44) / num38)) {
                double num30;
                double num36;
                double num37;
                if (inClose[i] >= inOpen[i]) {
                    num37 = inClose[i];
                }
                else {
                    num37 = inOpen[i];
                }
                if (Globals.candleSettings[7].avgPeriod != 0.0) {
                    num36 = ShadowVeryShortPeriodTotal / ((double)Globals.candleSettings[7].avgPeriod);
                }
                else {
                    double num35;
                    if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                        num35 = Math.Abs((double)(inClose[i] - inOpen[i]));
                    }
                    else {
                        double num34;
                        if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                            num34 = inHigh[i] - inLow[i];
                        }
                        else {
                            double num31;
                            if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                double num32;
                                double num33;
                                if (inClose[i] >= inOpen[i]) {
                                    num33 = inClose[i];
                                }
                                else {
                                    num33 = inOpen[i];
                                }
                                if (inClose[i] >= inOpen[i]) {
                                    num32 = inOpen[i];
                                }
                                else {
                                    num32 = inClose[i];
                                }
                                num31 = (inHigh[i] - num33) + (num32 - inLow[i]);
                            }
                            else {
                                num31 = 0.0;
                            }
                            num34 = num31;
                        }
                        num35 = num34;
                    }
                    num36 = num35;
                }
                if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                    num30 = 2.0;
                }
                else {
                    num30 = 1.0;
                }
                if ((inHigh[i] - num37) < ((Globals.candleSettings[7].factor * num36) / num30)) {
                    double num22;
                    double num28;
                    double num29;
                    if (inClose[i] >= inOpen[i]) {
                        num29 = inOpen[i];
                    }
                    else {
                        num29 = inClose[i];
                    }
                    if (Globals.candleSettings[7].avgPeriod != 0.0) {
                        num28 = ShadowVeryShortPeriodTotal / ((double)Globals.candleSettings[7].avgPeriod);
                    }
                    else {
                        double num27;
                        if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                            num27 = Math.Abs((double)(inClose[i] - inOpen[i]));
                        }
                        else {
                            double num26;
                            if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                                num26 = inHigh[i] - inLow[i];
                            }
                            else {
                                double num23;
                                if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                    double num24;
                                    double num25;
                                    if (inClose[i] >= inOpen[i]) {
                                        num25 = inClose[i];
                                    }
                                    else {
                                        num25 = inOpen[i];
                                    }
                                    if (inClose[i] >= inOpen[i]) {
                                        num24 = inOpen[i];
                                    }
                                    else {
                                        num24 = inClose[i];
                                    }
                                    num23 = (inHigh[i] - num25) + (num24 - inLow[i]);
                                }
                                else {
                                    num23 = 0.0;
                                }
                                num26 = num23;
                            }
                            num27 = num26;
                        }
                        num28 = num27;
                    }
                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                        num22 = 2.0;
                    }
                    else {
                        num22 = 1.0;
                    }
                    if ((num29 - inLow[i]) < ((Globals.candleSettings[7].factor * num28) / num22)) {
                        int num21;
                        if (inClose[i] >= inOpen[i]) {
                            num21 = 1;
                        }
                        else {
                            num21 = -1;
                        }
                        outInteger[outIdx] = num21 * 100;
                        outIdx++;
                        goto Label_062D;
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_062D:
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num20 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num19;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num19 = inHigh[i] - inLow[i];
                }
                else {
                    double num16;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num17;
                        double num18;
                        if (inClose[i] >= inOpen[i]) {
                            num18 = inClose[i];
                        }
                        else {
                            num18 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num17 = inOpen[i];
                        }
                        else {
                            num17 = inClose[i];
                        }
                        num16 = (inHigh[i] - num18) + (num17 - inLow[i]);
                    }
                    else {
                        num16 = 0.0;
                    }
                    num19 = num16;
                }
                num20 = num19;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num15 = Math.Abs((double)(inClose[BodyLongTrailingIdx] - inOpen[BodyLongTrailingIdx]));
            }
            else {
                double num14;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num14 = inHigh[BodyLongTrailingIdx] - inLow[BodyLongTrailingIdx];
                }
                else {
                    double num11;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num12;
                        double num13;
                        if (inClose[BodyLongTrailingIdx] >= inOpen[BodyLongTrailingIdx]) {
                            num13 = inClose[BodyLongTrailingIdx];
                        }
                        else {
                            num13 = inOpen[BodyLongTrailingIdx];
                        }
                        if (inClose[BodyLongTrailingIdx] >= inOpen[BodyLongTrailingIdx]) {
                            num12 = inOpen[BodyLongTrailingIdx];
                        }
                        else {
                            num12 = inClose[BodyLongTrailingIdx];
                        }
                        num11 = (inHigh[BodyLongTrailingIdx] - num13) + (num12 - inLow[BodyLongTrailingIdx]);
                    }
                    else {
                        num11 = 0.0;
                    }
                    num14 = num11;
                }
                num15 = num14;
            }
            BodyLongPeriodTotal += num20 - num15;
            if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num9;
                if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i] - inLow[i];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i] >= inOpen[i]) {
                            num8 = inClose[i];
                        }
                        else {
                            num8 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num7 = inOpen[i];
                        }
                        else {
                            num7 = inClose[i];
                        }
                        num6 = (inHigh[i] - num8) + (num7 - inLow[i]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[ShadowVeryShortTrailingIdx] - inOpen[ShadowVeryShortTrailingIdx]));
            }
            else {
                double num4;
                if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                    num4 = inHigh[ShadowVeryShortTrailingIdx] - inLow[ShadowVeryShortTrailingIdx];
                }
                else {
                    double num;
                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[ShadowVeryShortTrailingIdx] >= inOpen[ShadowVeryShortTrailingIdx]) {
                            num3 = inClose[ShadowVeryShortTrailingIdx];
                        }
                        else {
                            num3 = inOpen[ShadowVeryShortTrailingIdx];
                        }
                        if (inClose[ShadowVeryShortTrailingIdx] >= inOpen[ShadowVeryShortTrailingIdx]) {
                            num2 = inOpen[ShadowVeryShortTrailingIdx];
                        }
                        else {
                            num2 = inClose[ShadowVeryShortTrailingIdx];
                        }
                        num = (inHigh[ShadowVeryShortTrailingIdx] - num3) + (num2 - inLow[ShadowVeryShortTrailingIdx]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            ShadowVeryShortPeriodTotal += num10 - num5;
            i++;
            BodyLongTrailingIdx++;
            ShadowVeryShortTrailingIdx++;
            if (i <= endIdx) {
                goto Label_022E;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlMatchingLow(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlMatchingLowLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double EqualPeriodTotal = 0.0;
            int EqualTrailingIdx = startIdx - Globals.candleSettings[10].avgPeriod;
            int i = EqualTrailingIdx;
            while (true) {
                double num29;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                    num29 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num28;
                    if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                        num28 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num25;
                        if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                            double num26;
                            double num27;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num27 = inClose[i - 1];
                            }
                            else {
                                num27 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num26 = inOpen[i - 1];
                            }
                            else {
                                num26 = inClose[i - 1];
                            }
                            num25 = (inHigh[i - 1] - num27) + (num26 - inLow[i - 1]);
                        }
                        else {
                            num25 = 0.0;
                        }
                        num28 = num25;
                    }
                    num29 = num28;
                }
                EqualPeriodTotal += num29;
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            Label_016C:
            if ((((inClose[i - 1] < inOpen[i - 1]) ? -1 : 1) == -1) && (((inClose[i] < inOpen[i]) ? -1 : 1) == -1)) {
                double num18;
                double num24;
                if (Globals.candleSettings[10].avgPeriod != 0.0) {
                    num24 = EqualPeriodTotal / ((double)Globals.candleSettings[10].avgPeriod);
                }
                else {
                    double num23;
                    if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                        num23 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                    }
                    else {
                        double num22;
                        if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                            num22 = inHigh[i - 1] - inLow[i - 1];
                        }
                        else {
                            double num19;
                            if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                                double num20;
                                double num21;
                                if (inClose[i - 1] >= inOpen[i - 1]) {
                                    num21 = inClose[i - 1];
                                }
                                else {
                                    num21 = inOpen[i - 1];
                                }
                                if (inClose[i - 1] >= inOpen[i - 1]) {
                                    num20 = inOpen[i - 1];
                                }
                                else {
                                    num20 = inClose[i - 1];
                                }
                                num19 = (inHigh[i - 1] - num21) + (num20 - inLow[i - 1]);
                            }
                            else {
                                num19 = 0.0;
                            }
                            num22 = num19;
                        }
                        num23 = num22;
                    }
                    num24 = num23;
                }
                if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                    num18 = 2.0;
                }
                else {
                    num18 = 1.0;
                }
                if (inClose[i] <= (inClose[i - 1] + ((Globals.candleSettings[10].factor * num24) / num18))) {
                    double num11;
                    double num17;
                    if (Globals.candleSettings[10].avgPeriod != 0.0) {
                        num17 = EqualPeriodTotal / ((double)Globals.candleSettings[10].avgPeriod);
                    }
                    else {
                        double num16;
                        if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                            num16 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                        }
                        else {
                            double num15;
                            if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                                num15 = inHigh[i - 1] - inLow[i - 1];
                            }
                            else {
                                double num12;
                                if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                                    double num13;
                                    double num14;
                                    if (inClose[i - 1] >= inOpen[i - 1]) {
                                        num14 = inClose[i - 1];
                                    }
                                    else {
                                        num14 = inOpen[i - 1];
                                    }
                                    if (inClose[i - 1] >= inOpen[i - 1]) {
                                        num13 = inOpen[i - 1];
                                    }
                                    else {
                                        num13 = inClose[i - 1];
                                    }
                                    num12 = (inHigh[i - 1] - num14) + (num13 - inLow[i - 1]);
                                }
                                else {
                                    num12 = 0.0;
                                }
                                num15 = num12;
                            }
                            num16 = num15;
                        }
                        num17 = num16;
                    }
                    if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                        num11 = 2.0;
                    }
                    else {
                        num11 = 1.0;
                    }
                    if (inClose[i] >= (inClose[i - 1] - ((Globals.candleSettings[10].factor * num17) / num11))) {
                        outInteger[outIdx] = 100;
                        outIdx++;
                        goto Label_046A;
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_046A:
            if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
            }
            else {
                double num9;
                if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i - 1] - inLow[i - 1];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num8 = inClose[i - 1];
                        }
                        else {
                            num8 = inOpen[i - 1];
                        }
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num7 = inOpen[i - 1];
                        }
                        else {
                            num7 = inClose[i - 1];
                        }
                        num6 = (inHigh[i - 1] - num8) + (num7 - inLow[i - 1]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[EqualTrailingIdx - 1] - inOpen[EqualTrailingIdx - 1]));
            }
            else {
                double num4;
                if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                    num4 = inHigh[EqualTrailingIdx - 1] - inLow[EqualTrailingIdx - 1];
                }
                else {
                    double num;
                    if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[EqualTrailingIdx - 1] >= inOpen[EqualTrailingIdx - 1]) {
                            num3 = inClose[EqualTrailingIdx - 1];
                        }
                        else {
                            num3 = inOpen[EqualTrailingIdx - 1];
                        }
                        if (inClose[EqualTrailingIdx - 1] >= inOpen[EqualTrailingIdx - 1]) {
                            num2 = inOpen[EqualTrailingIdx - 1];
                        }
                        else {
                            num2 = inClose[EqualTrailingIdx - 1];
                        }
                        num = (inHigh[EqualTrailingIdx - 1] - num3) + (num2 - inLow[EqualTrailingIdx - 1]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            EqualPeriodTotal += num10 - num5;
            i++;
            EqualTrailingIdx++;
            if (i <= endIdx) {
                goto Label_016C;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlMatHold(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,double optInPenetration,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num15;
            double num20;
            double num54;
            double num60;
            double[] BodyPeriodTotal = new double[5];
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (optInPenetration == -4E+37) {
                optInPenetration = 0.5;
            }
            else if ((optInPenetration < 0.0) || (optInPenetration > 3E+37)) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlMatHoldLookback(optInPenetration);
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            BodyPeriodTotal[4] = 0.0;
            BodyPeriodTotal[3] = 0.0;
            BodyPeriodTotal[2] = 0.0;
            BodyPeriodTotal[1] = 0.0;
            BodyPeriodTotal[0] = 0.0;
            int BodyShortTrailingIdx = startIdx - Globals.candleSettings[2].avgPeriod;
            int BodyLongTrailingIdx = startIdx - Globals.candleSettings[0].avgPeriod;
            int i = BodyShortTrailingIdx;
            while (true) {
                double num70;
                double num75;
                double num80;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                    num80 = Math.Abs((double)(inClose[i - 3] - inOpen[i - 3]));
                }
                else {
                    double num79;
                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                        num79 = inHigh[i - 3] - inLow[i - 3];
                    }
                    else {
                        double num76;
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            double num77;
                            double num78;
                            if (inClose[i - 3] >= inOpen[i - 3]) {
                                num78 = inClose[i - 3];
                            }
                            else {
                                num78 = inOpen[i - 3];
                            }
                            if (inClose[i - 3] >= inOpen[i - 3]) {
                                num77 = inOpen[i - 3];
                            }
                            else {
                                num77 = inClose[i - 3];
                            }
                            num76 = (inHigh[i - 3] - num78) + (num77 - inLow[i - 3]);
                        }
                        else {
                            num76 = 0.0;
                        }
                        num79 = num76;
                    }
                    num80 = num79;
                }
                BodyPeriodTotal[3] += num80;
                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                    num75 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                }
                else {
                    double num74;
                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                        num74 = inHigh[i - 2] - inLow[i - 2];
                    }
                    else {
                        double num71;
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            double num72;
                            double num73;
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num73 = inClose[i - 2];
                            }
                            else {
                                num73 = inOpen[i - 2];
                            }
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num72 = inOpen[i - 2];
                            }
                            else {
                                num72 = inClose[i - 2];
                            }
                            num71 = (inHigh[i - 2] - num73) + (num72 - inLow[i - 2]);
                        }
                        else {
                            num71 = 0.0;
                        }
                        num74 = num71;
                    }
                    num75 = num74;
                }
                BodyPeriodTotal[2] += num75;
                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                    num70 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num69;
                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                        num69 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num66;
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            double num67;
                            double num68;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num68 = inClose[i - 1];
                            }
                            else {
                                num68 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num67 = inOpen[i - 1];
                            }
                            else {
                                num67 = inClose[i - 1];
                            }
                            num66 = (inHigh[i - 1] - num68) + (num67 - inLow[i - 1]);
                        }
                        else {
                            num66 = 0.0;
                        }
                        num69 = num66;
                    }
                    num70 = num69;
                }
                BodyPeriodTotal[1] += num70;
                i++;
            }
            i = BodyLongTrailingIdx;
            while (true) {
                double num65;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num65 = Math.Abs((double)(inClose[i - 4] - inOpen[i - 4]));
                }
                else {
                    double num64;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num64 = inHigh[i - 4] - inLow[i - 4];
                    }
                    else {
                        double num61;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num62;
                            double num63;
                            if (inClose[i - 4] >= inOpen[i - 4]) {
                                num63 = inClose[i - 4];
                            }
                            else {
                                num63 = inOpen[i - 4];
                            }
                            if (inClose[i - 4] >= inOpen[i - 4]) {
                                num62 = inOpen[i - 4];
                            }
                            else {
                                num62 = inClose[i - 4];
                            }
                            num61 = (inHigh[i - 4] - num63) + (num62 - inLow[i - 4]);
                        }
                        else {
                            num61 = 0.0;
                        }
                        num64 = num61;
                    }
                    num65 = num64;
                }
                BodyPeriodTotal[4] += num65;
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            Label_0488:
            if (Globals.candleSettings[0].avgPeriod != 0.0) {
                num60 = BodyPeriodTotal[4] / ((double)Globals.candleSettings[0].avgPeriod);
            }
            else {
                double num59;
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num59 = Math.Abs((double)(inClose[i - 4] - inOpen[i - 4]));
                }
                else {
                    double num58;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num58 = inHigh[i - 4] - inLow[i - 4];
                    }
                    else {
                        double num55;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num56;
                            double num57;
                            if (inClose[i - 4] >= inOpen[i - 4]) {
                                num57 = inClose[i - 4];
                            }
                            else {
                                num57 = inOpen[i - 4];
                            }
                            if (inClose[i - 4] >= inOpen[i - 4]) {
                                num56 = inOpen[i - 4];
                            }
                            else {
                                num56 = inClose[i - 4];
                            }
                            num55 = (inHigh[i - 4] - num57) + (num56 - inLow[i - 4]);
                        }
                        else {
                            num55 = 0.0;
                        }
                        num58 = num55;
                    }
                    num59 = num58;
                }
                num60 = num59;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                num54 = 2.0;
            }
            else {
                num54 = 1.0;
            }
            if (Math.Abs((double)(inClose[i - 4] - inOpen[i - 4])) > ((Globals.candleSettings[0].factor * num60) / num54)) {
                double num47;
                double num53;
                if (Globals.candleSettings[2].avgPeriod != 0.0) {
                    num53 = BodyPeriodTotal[3] / ((double)Globals.candleSettings[2].avgPeriod);
                }
                else {
                    double num52;
                    if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                        num52 = Math.Abs((double)(inClose[i - 3] - inOpen[i - 3]));
                    }
                    else {
                        double num51;
                        if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                            num51 = inHigh[i - 3] - inLow[i - 3];
                        }
                        else {
                            double num48;
                            if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                                double num49;
                                double num50;
                                if (inClose[i - 3] >= inOpen[i - 3]) {
                                    num50 = inClose[i - 3];
                                }
                                else {
                                    num50 = inOpen[i - 3];
                                }
                                if (inClose[i - 3] >= inOpen[i - 3]) {
                                    num49 = inOpen[i - 3];
                                }
                                else {
                                    num49 = inClose[i - 3];
                                }
                                num48 = (inHigh[i - 3] - num50) + (num49 - inLow[i - 3]);
                            }
                            else {
                                num48 = 0.0;
                            }
                            num51 = num48;
                        }
                        num52 = num51;
                    }
                    num53 = num52;
                }
                if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                    num47 = 2.0;
                }
                else {
                    num47 = 1.0;
                }
                if (Math.Abs((double)(inClose[i - 3] - inOpen[i - 3])) < ((Globals.candleSettings[2].factor * num53) / num47)) {
                    double num40;
                    double num46;
                    if (Globals.candleSettings[2].avgPeriod != 0.0) {
                        num46 = BodyPeriodTotal[2] / ((double)Globals.candleSettings[2].avgPeriod);
                    }
                    else {
                        double num45;
                        if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                            num45 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                        }
                        else {
                            double num44;
                            if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                                num44 = inHigh[i - 2] - inLow[i - 2];
                            }
                            else {
                                double num41;
                                if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                                    double num42;
                                    double num43;
                                    if (inClose[i - 2] >= inOpen[i - 2]) {
                                        num43 = inClose[i - 2];
                                    }
                                    else {
                                        num43 = inOpen[i - 2];
                                    }
                                    if (inClose[i - 2] >= inOpen[i - 2]) {
                                        num42 = inOpen[i - 2];
                                    }
                                    else {
                                        num42 = inClose[i - 2];
                                    }
                                    num41 = (inHigh[i - 2] - num43) + (num42 - inLow[i - 2]);
                                }
                                else {
                                    num41 = 0.0;
                                }
                                num44 = num41;
                            }
                            num45 = num44;
                        }
                        num46 = num45;
                    }
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        num40 = 2.0;
                    }
                    else {
                        num40 = 1.0;
                    }
                    if (Math.Abs((double)(inClose[i - 2] - inOpen[i - 2])) < ((Globals.candleSettings[2].factor * num46) / num40)) {
                        double num33;
                        double num39;
                        if (Globals.candleSettings[2].avgPeriod != 0.0) {
                            num39 = BodyPeriodTotal[1] / ((double)Globals.candleSettings[2].avgPeriod);
                        }
                        else {
                            double num38;
                            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                                num38 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                            }
                            else {
                                double num37;
                                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                                    num37 = inHigh[i - 1] - inLow[i - 1];
                                }
                                else {
                                    double num34;
                                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                                        double num35;
                                        double num36;
                                        if (inClose[i - 1] >= inOpen[i - 1]) {
                                            num36 = inClose[i - 1];
                                        }
                                        else {
                                            num36 = inOpen[i - 1];
                                        }
                                        if (inClose[i - 1] >= inOpen[i - 1]) {
                                            num35 = inOpen[i - 1];
                                        }
                                        else {
                                            num35 = inClose[i - 1];
                                        }
                                        num34 = (inHigh[i - 1] - num36) + (num35 - inLow[i - 1]);
                                    }
                                    else {
                                        num34 = 0.0;
                                    }
                                    num37 = num34;
                                }
                                num38 = num37;
                            }
                            num39 = num38;
                        }
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            num33 = 2.0;
                        }
                        else {
                            num33 = 1.0;
                        }
                        if ((((Math.Abs((double)(inClose[i - 1] - inOpen[i - 1])) < ((Globals.candleSettings[2].factor * num39) / num33)) && (inClose[i - 4] >= inOpen[i - 4])) && (((inClose[i - 3] < inOpen[i - 3]) ? -1 : 1) == -1)) && (inClose[i] >= inOpen[i])) {
                            double num31;
                            double num32;
                            if (inOpen[i - 3] < inClose[i - 3]) {
                                num32 = inOpen[i - 3];
                            }
                            else {
                                num32 = inClose[i - 3];
                            }
                            if (inOpen[i - 4] > inClose[i - 4]) {
                                num31 = inOpen[i - 4];
                            }
                            else {
                                num31 = inClose[i - 4];
                            }
                            if (num32 > num31) {
                                double num30;
                                if (inOpen[i - 2] < inClose[i - 2]) {
                                    num30 = inOpen[i - 2];
                                }
                                else {
                                    num30 = inClose[i - 2];
                                }
                                if (num30 < inClose[i - 4]) {
                                    double num29;
                                    if (inOpen[i - 1] < inClose[i - 1]) {
                                        num29 = inOpen[i - 1];
                                    }
                                    else {
                                        num29 = inClose[i - 1];
                                    }
                                    if (num29 < inClose[i - 4]) {
                                        double num28;
                                        if (inOpen[i - 2] < inClose[i - 2]) {
                                            num28 = inOpen[i - 2];
                                        }
                                        else {
                                            num28 = inClose[i - 2];
                                        }
                                        if (num28 > (inClose[i - 4] - (Math.Abs((double)(inClose[i - 4] - inOpen[i - 4])) * optInPenetration))) {
                                            double num27;
                                            if (inOpen[i - 1] < inClose[i - 1]) {
                                                num27 = inOpen[i - 1];
                                            }
                                            else {
                                                num27 = inClose[i - 1];
                                            }
                                            if (num27 > (inClose[i - 4] - (Math.Abs((double)(inClose[i - 4] - inOpen[i - 4])) * optInPenetration))) {
                                                double num26;
                                                if (inClose[i - 2] > inOpen[i - 2]) {
                                                    num26 = inClose[i - 2];
                                                }
                                                else {
                                                    num26 = inOpen[i - 2];
                                                }
                                                if (num26 < inOpen[i - 3]) {
                                                    double num24;
                                                    double num25;
                                                    if (inClose[i - 1] > inOpen[i - 1]) {
                                                        num25 = inClose[i - 1];
                                                    }
                                                    else {
                                                        num25 = inOpen[i - 1];
                                                    }
                                                    if (inClose[i - 2] > inOpen[i - 2]) {
                                                        num24 = inClose[i - 2];
                                                    }
                                                    else {
                                                        num24 = inOpen[i - 2];
                                                    }
                                                    if ((num25 < num24) && (inOpen[i] > inClose[i - 1])) {
                                                        double num21;
                                                        double num23;
                                                        if (inHigh[i - 3] > inHigh[i - 2]) {
                                                            num23 = inHigh[i - 3];
                                                        }
                                                        else {
                                                            num23 = inHigh[i - 2];
                                                        }
                                                        if (num23 > inHigh[i - 1]) {
                                                            double num22;
                                                            if (inHigh[i - 3] > inHigh[i - 2]) {
                                                                num22 = inHigh[i - 3];
                                                            }
                                                            else {
                                                                num22 = inHigh[i - 2];
                                                            }
                                                            num21 = num22;
                                                        }
                                                        else {
                                                            num21 = inHigh[i - 1];
                                                        }
                                                        if (inClose[i] > num21) {
                                                            outInteger[outIdx] = 100;
                                                            outIdx++;
                                                            goto Label_0C54;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_0C54:
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num20 = Math.Abs((double)(inClose[i - 4] - inOpen[i - 4]));
            }
            else {
                double num19;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num19 = inHigh[i - 4] - inLow[i - 4];
                }
                else {
                    double num16;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num17;
                        double num18;
                        if (inClose[i - 4] >= inOpen[i - 4]) {
                            num18 = inClose[i - 4];
                        }
                        else {
                            num18 = inOpen[i - 4];
                        }
                        if (inClose[i - 4] >= inOpen[i - 4]) {
                            num17 = inOpen[i - 4];
                        }
                        else {
                            num17 = inClose[i - 4];
                        }
                        num16 = (inHigh[i - 4] - num18) + (num17 - inLow[i - 4]);
                    }
                    else {
                        num16 = 0.0;
                    }
                    num19 = num16;
                }
                num20 = num19;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num15 = Math.Abs((double)(inClose[BodyLongTrailingIdx - 4] - inOpen[BodyLongTrailingIdx - 4]));
            }
            else {
                double num14;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num14 = inHigh[BodyLongTrailingIdx - 4] - inLow[BodyLongTrailingIdx - 4];
                }
                else {
                    double num11;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num12;
                        double num13;
                        if (inClose[BodyLongTrailingIdx - 4] >= inOpen[BodyLongTrailingIdx - 4]) {
                            num13 = inClose[BodyLongTrailingIdx - 4];
                        }
                        else {
                            num13 = inOpen[BodyLongTrailingIdx - 4];
                        }
                        if (inClose[BodyLongTrailingIdx - 4] >= inOpen[BodyLongTrailingIdx - 4]) {
                            num12 = inOpen[BodyLongTrailingIdx - 4];
                        }
                        else {
                            num12 = inClose[BodyLongTrailingIdx - 4];
                        }
                        num11 = (inHigh[BodyLongTrailingIdx - 4] - num13) + (num12 - inLow[BodyLongTrailingIdx - 4]);
                    }
                    else {
                        num11 = 0.0;
                    }
                    num14 = num11;
                }
                num15 = num14;
            }
            BodyPeriodTotal[4] += num20 - num15;
            for (int totIdx = 3; totIdx >= 1; totIdx--) {
                double num5;
                double num10;
                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                    num10 = Math.Abs((double)(inClose[i - totIdx] - inOpen[i - totIdx]));
                }
                else {
                    double num9;
                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                        num9 = inHigh[i - totIdx] - inLow[i - totIdx];
                    }
                    else {
                        double num6;
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            double num7;
                            double num8;
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num8 = inClose[i - totIdx];
                            }
                            else {
                                num8 = inOpen[i - totIdx];
                            }
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num7 = inOpen[i - totIdx];
                            }
                            else {
                                num7 = inClose[i - totIdx];
                            }
                            num6 = (inHigh[i - totIdx] - num8) + (num7 - inLow[i - totIdx]);
                        }
                        else {
                            num6 = 0.0;
                        }
                        num9 = num6;
                    }
                    num10 = num9;
                }
                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                    num5 = Math.Abs((double)(inClose[BodyShortTrailingIdx - totIdx] - inOpen[BodyShortTrailingIdx - totIdx]));
                }
                else {
                    double num4;
                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                        num4 = inHigh[BodyShortTrailingIdx - totIdx] - inLow[BodyShortTrailingIdx - totIdx];
                    }
                    else {
                        double num;
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            double num2;
                            double num3;
                            if (inClose[BodyShortTrailingIdx - totIdx] >= inOpen[BodyShortTrailingIdx - totIdx]) {
                                num3 = inClose[BodyShortTrailingIdx - totIdx];
                            }
                            else {
                                num3 = inOpen[BodyShortTrailingIdx - totIdx];
                            }
                            if (inClose[BodyShortTrailingIdx - totIdx] >= inOpen[BodyShortTrailingIdx - totIdx]) {
                                num2 = inOpen[BodyShortTrailingIdx - totIdx];
                            }
                            else {
                                num2 = inClose[BodyShortTrailingIdx - totIdx];
                            }
                            num = (inHigh[BodyShortTrailingIdx - totIdx] - num3) + (num2 - inLow[BodyShortTrailingIdx - totIdx]);
                        }
                        else {
                            num = 0.0;
                        }
                        num4 = num;
                    }
                    num5 = num4;
                }
                BodyPeriodTotal[totIdx] += num10 - num5;
            }
            i++;
            BodyShortTrailingIdx++;
            BodyLongTrailingIdx++;
            if (i <= endIdx) {
                goto Label_0488;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlMorningDojiStar(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,double optInPenetration,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            double num15;
            double num20;
            double num25;
            double num30;
            double num47;
            double num53;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (optInPenetration == -4E+37) {
                optInPenetration = 0.3;
            }
            else if ((optInPenetration < 0.0) || (optInPenetration > 3E+37)) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlMorningDojiStarLookback(optInPenetration);
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double BodyLongPeriodTotal = 0.0;
            double BodyDojiPeriodTotal = 0.0;
            double BodyShortPeriodTotal = 0.0;
            int BodyLongTrailingIdx = (startIdx - 2) - Globals.candleSettings[0].avgPeriod;
            int BodyDojiTrailingIdx = (startIdx - 1) - Globals.candleSettings[3].avgPeriod;
            int BodyShortTrailingIdx = startIdx - Globals.candleSettings[2].avgPeriod;
            int i = BodyLongTrailingIdx;
            while (true) {
                double num68;
                if (i >= (startIdx - 2)) {
                    break;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num68 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num67;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num67 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num64;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num65;
                            double num66;
                            if (inClose[i] >= inOpen[i]) {
                                num66 = inClose[i];
                            }
                            else {
                                num66 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num65 = inOpen[i];
                            }
                            else {
                                num65 = inClose[i];
                            }
                            num64 = (inHigh[i] - num66) + (num65 - inLow[i]);
                        }
                        else {
                            num64 = 0.0;
                        }
                        num67 = num64;
                    }
                    num68 = num67;
                }
                BodyLongPeriodTotal += num68;
                i++;
            }
            i = BodyDojiTrailingIdx;
            while (true) {
                double num63;
                if (i >= (startIdx - 1)) {
                    break;
                }
                if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                    num63 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num62;
                    if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                        num62 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num59;
                        if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                            double num60;
                            double num61;
                            if (inClose[i] >= inOpen[i]) {
                                num61 = inClose[i];
                            }
                            else {
                                num61 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num60 = inOpen[i];
                            }
                            else {
                                num60 = inClose[i];
                            }
                            num59 = (inHigh[i] - num61) + (num60 - inLow[i]);
                        }
                        else {
                            num59 = 0.0;
                        }
                        num62 = num59;
                    }
                    num63 = num62;
                }
                BodyDojiPeriodTotal += num63;
                i++;
            }
            i = BodyShortTrailingIdx;
            while (true) {
                double num58;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                    num58 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num57;
                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                        num57 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num54;
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            double num55;
                            double num56;
                            if (inClose[i] >= inOpen[i]) {
                                num56 = inClose[i];
                            }
                            else {
                                num56 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num55 = inOpen[i];
                            }
                            else {
                                num55 = inClose[i];
                            }
                            num54 = (inHigh[i] - num56) + (num55 - inLow[i]);
                        }
                        else {
                            num54 = 0.0;
                        }
                        num57 = num54;
                    }
                    num58 = num57;
                }
                BodyShortPeriodTotal += num58;
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            Label_035B:
            if (Globals.candleSettings[0].avgPeriod != 0.0) {
                num53 = BodyLongPeriodTotal / ((double)Globals.candleSettings[0].avgPeriod);
            }
            else {
                double num52;
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num52 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                }
                else {
                    double num51;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num51 = inHigh[i - 2] - inLow[i - 2];
                    }
                    else {
                        double num48;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num49;
                            double num50;
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num50 = inClose[i - 2];
                            }
                            else {
                                num50 = inOpen[i - 2];
                            }
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num49 = inOpen[i - 2];
                            }
                            else {
                                num49 = inClose[i - 2];
                            }
                            num48 = (inHigh[i - 2] - num50) + (num49 - inLow[i - 2]);
                        }
                        else {
                            num48 = 0.0;
                        }
                        num51 = num48;
                    }
                    num52 = num51;
                }
                num53 = num52;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                num47 = 2.0;
            }
            else {
                num47 = 1.0;
            }
            if ((Math.Abs((double)(inClose[i - 2] - inOpen[i - 2])) > ((Globals.candleSettings[0].factor * num53) / num47)) && (((inClose[i - 2] < inOpen[i - 2]) ? -1 : 1) == -1)) {
                double num40;
                double num46;
                if (Globals.candleSettings[3].avgPeriod != 0.0) {
                    num46 = BodyDojiPeriodTotal / ((double)Globals.candleSettings[3].avgPeriod);
                }
                else {
                    double num45;
                    if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                        num45 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                    }
                    else {
                        double num44;
                        if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                            num44 = inHigh[i - 1] - inLow[i - 1];
                        }
                        else {
                            double num41;
                            if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                                double num42;
                                double num43;
                                if (inClose[i - 1] >= inOpen[i - 1]) {
                                    num43 = inClose[i - 1];
                                }
                                else {
                                    num43 = inOpen[i - 1];
                                }
                                if (inClose[i - 1] >= inOpen[i - 1]) {
                                    num42 = inOpen[i - 1];
                                }
                                else {
                                    num42 = inClose[i - 1];
                                }
                                num41 = (inHigh[i - 1] - num43) + (num42 - inLow[i - 1]);
                            }
                            else {
                                num41 = 0.0;
                            }
                            num44 = num41;
                        }
                        num45 = num44;
                    }
                    num46 = num45;
                }
                if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                    num40 = 2.0;
                }
                else {
                    num40 = 1.0;
                }
                if (Math.Abs((double)(inClose[i - 1] - inOpen[i - 1])) <= ((Globals.candleSettings[3].factor * num46) / num40)) {
                    double num38;
                    double num39;
                    if (inOpen[i - 1] > inClose[i - 1]) {
                        num39 = inOpen[i - 1];
                    }
                    else {
                        num39 = inClose[i - 1];
                    }
                    if (inOpen[i - 2] < inClose[i - 2]) {
                        num38 = inOpen[i - 2];
                    }
                    else {
                        num38 = inClose[i - 2];
                    }
                    if (num39 < num38) {
                        double num31;
                        double num37;
                        if (Globals.candleSettings[2].avgPeriod != 0.0) {
                            num37 = BodyShortPeriodTotal / ((double)Globals.candleSettings[2].avgPeriod);
                        }
                        else {
                            double num36;
                            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                                num36 = Math.Abs((double)(inClose[i] - inOpen[i]));
                            }
                            else {
                                double num35;
                                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                                    num35 = inHigh[i] - inLow[i];
                                }
                                else {
                                    double num32;
                                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                                        double num33;
                                        double num34;
                                        if (inClose[i] >= inOpen[i]) {
                                            num34 = inClose[i];
                                        }
                                        else {
                                            num34 = inOpen[i];
                                        }
                                        if (inClose[i] >= inOpen[i]) {
                                            num33 = inOpen[i];
                                        }
                                        else {
                                            num33 = inClose[i];
                                        }
                                        num32 = (inHigh[i] - num34) + (num33 - inLow[i]);
                                    }
                                    else {
                                        num32 = 0.0;
                                    }
                                    num35 = num32;
                                }
                                num36 = num35;
                            }
                            num37 = num36;
                        }
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            num31 = 2.0;
                        }
                        else {
                            num31 = 1.0;
                        }
                        if (((Math.Abs((double)(inClose[i] - inOpen[i])) > ((Globals.candleSettings[2].factor * num37) / num31)) && (((inClose[i] < inOpen[i]) ? -1 : 1) == 1)) && (inClose[i] > (inClose[i - 2] + (Math.Abs((double)(inClose[i - 2] - inOpen[i - 2])) * optInPenetration)))) {
                            outInteger[outIdx] = 100;
                            outIdx++;
                            goto Label_0800;
                        }
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_0800:
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num30 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
            }
            else {
                double num29;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num29 = inHigh[i - 2] - inLow[i - 2];
                }
                else {
                    double num26;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num27;
                        double num28;
                        if (inClose[i - 2] >= inOpen[i - 2]) {
                            num28 = inClose[i - 2];
                        }
                        else {
                            num28 = inOpen[i - 2];
                        }
                        if (inClose[i - 2] >= inOpen[i - 2]) {
                            num27 = inOpen[i - 2];
                        }
                        else {
                            num27 = inClose[i - 2];
                        }
                        num26 = (inHigh[i - 2] - num28) + (num27 - inLow[i - 2]);
                    }
                    else {
                        num26 = 0.0;
                    }
                    num29 = num26;
                }
                num30 = num29;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num25 = Math.Abs((double)(inClose[BodyLongTrailingIdx] - inOpen[BodyLongTrailingIdx]));
            }
            else {
                double num24;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num24 = inHigh[BodyLongTrailingIdx] - inLow[BodyLongTrailingIdx];
                }
                else {
                    double num21;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num22;
                        double num23;
                        if (inClose[BodyLongTrailingIdx] >= inOpen[BodyLongTrailingIdx]) {
                            num23 = inClose[BodyLongTrailingIdx];
                        }
                        else {
                            num23 = inOpen[BodyLongTrailingIdx];
                        }
                        if (inClose[BodyLongTrailingIdx] >= inOpen[BodyLongTrailingIdx]) {
                            num22 = inOpen[BodyLongTrailingIdx];
                        }
                        else {
                            num22 = inClose[BodyLongTrailingIdx];
                        }
                        num21 = (inHigh[BodyLongTrailingIdx] - num23) + (num22 - inLow[BodyLongTrailingIdx]);
                    }
                    else {
                        num21 = 0.0;
                    }
                    num24 = num21;
                }
                num25 = num24;
            }
            BodyLongPeriodTotal += num30 - num25;
            if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                num20 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
            }
            else {
                double num19;
                if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                    num19 = inHigh[i - 1] - inLow[i - 1];
                }
                else {
                    double num16;
                    if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                        double num17;
                        double num18;
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num18 = inClose[i - 1];
                        }
                        else {
                            num18 = inOpen[i - 1];
                        }
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num17 = inOpen[i - 1];
                        }
                        else {
                            num17 = inClose[i - 1];
                        }
                        num16 = (inHigh[i - 1] - num18) + (num17 - inLow[i - 1]);
                    }
                    else {
                        num16 = 0.0;
                    }
                    num19 = num16;
                }
                num20 = num19;
            }
            if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                num15 = Math.Abs((double)(inClose[BodyDojiTrailingIdx] - inOpen[BodyDojiTrailingIdx]));
            }
            else {
                double num14;
                if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                    num14 = inHigh[BodyDojiTrailingIdx] - inLow[BodyDojiTrailingIdx];
                }
                else {
                    double num11;
                    if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                        double num12;
                        double num13;
                        if (inClose[BodyDojiTrailingIdx] >= inOpen[BodyDojiTrailingIdx]) {
                            num13 = inClose[BodyDojiTrailingIdx];
                        }
                        else {
                            num13 = inOpen[BodyDojiTrailingIdx];
                        }
                        if (inClose[BodyDojiTrailingIdx] >= inOpen[BodyDojiTrailingIdx]) {
                            num12 = inOpen[BodyDojiTrailingIdx];
                        }
                        else {
                            num12 = inClose[BodyDojiTrailingIdx];
                        }
                        num11 = (inHigh[BodyDojiTrailingIdx] - num13) + (num12 - inLow[BodyDojiTrailingIdx]);
                    }
                    else {
                        num11 = 0.0;
                    }
                    num14 = num11;
                }
                num15 = num14;
            }
            BodyDojiPeriodTotal += num20 - num15;
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num9;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i] - inLow[i];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i] >= inOpen[i]) {
                            num8 = inClose[i];
                        }
                        else {
                            num8 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num7 = inOpen[i];
                        }
                        else {
                            num7 = inClose[i];
                        }
                        num6 = (inHigh[i] - num8) + (num7 - inLow[i]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[BodyShortTrailingIdx] - inOpen[BodyShortTrailingIdx]));
            }
            else {
                double num4;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num4 = inHigh[BodyShortTrailingIdx] - inLow[BodyShortTrailingIdx];
                }
                else {
                    double num;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[BodyShortTrailingIdx] >= inOpen[BodyShortTrailingIdx]) {
                            num3 = inClose[BodyShortTrailingIdx];
                        }
                        else {
                            num3 = inOpen[BodyShortTrailingIdx];
                        }
                        if (inClose[BodyShortTrailingIdx] >= inOpen[BodyShortTrailingIdx]) {
                            num2 = inOpen[BodyShortTrailingIdx];
                        }
                        else {
                            num2 = inClose[BodyShortTrailingIdx];
                        }
                        num = (inHigh[BodyShortTrailingIdx] - num3) + (num2 - inLow[BodyShortTrailingIdx]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            BodyShortPeriodTotal += num10 - num5;
            i++;
            BodyLongTrailingIdx++;
            BodyDojiTrailingIdx++;
            BodyShortTrailingIdx++;
            if (i <= endIdx) {
                goto Label_035B;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlMorningStar(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,double optInPenetration,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            double num15;
            double num20;
            double num25;
            double num30;
            double num47;
            double num53;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (optInPenetration == -4E+37) {
                optInPenetration = 0.3;
            }
            else if ((optInPenetration < 0.0) || (optInPenetration > 3E+37)) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlMorningStarLookback(optInPenetration);
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double BodyLongPeriodTotal = 0.0;
            double BodyShortPeriodTotal = 0.0;
            double BodyShortPeriodTotal2 = 0.0;
            int BodyLongTrailingIdx = (startIdx - 2) - Globals.candleSettings[0].avgPeriod;
            int BodyShortTrailingIdx = (startIdx - 1) - Globals.candleSettings[2].avgPeriod;
            int i = BodyLongTrailingIdx;
            while (true) {
                double num68;
                if (i >= (startIdx - 2)) {
                    break;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num68 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num67;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num67 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num64;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num65;
                            double num66;
                            if (inClose[i] >= inOpen[i]) {
                                num66 = inClose[i];
                            }
                            else {
                                num66 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num65 = inOpen[i];
                            }
                            else {
                                num65 = inClose[i];
                            }
                            num64 = (inHigh[i] - num66) + (num65 - inLow[i]);
                        }
                        else {
                            num64 = 0.0;
                        }
                        num67 = num64;
                    }
                    num68 = num67;
                }
                BodyLongPeriodTotal += num68;
                i++;
            }
            i = BodyShortTrailingIdx;
            while (true) {
                double num58;
                double num63;
                if (i >= (startIdx - 1)) {
                    break;
                }
                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                    num63 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num62;
                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                        num62 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num59;
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            double num60;
                            double num61;
                            if (inClose[i] >= inOpen[i]) {
                                num61 = inClose[i];
                            }
                            else {
                                num61 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num60 = inOpen[i];
                            }
                            else {
                                num60 = inClose[i];
                            }
                            num59 = (inHigh[i] - num61) + (num60 - inLow[i]);
                        }
                        else {
                            num59 = 0.0;
                        }
                        num62 = num59;
                    }
                    num63 = num62;
                }
                BodyShortPeriodTotal += num63;
                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                    num58 = Math.Abs((double)(inClose[i + 1] - inOpen[i + 1]));
                }
                else {
                    double num57;
                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                        num57 = inHigh[i + 1] - inLow[i + 1];
                    }
                    else {
                        double num54;
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            double num55;
                            double num56;
                            if (inClose[i + 1] >= inOpen[i + 1]) {
                                num56 = inClose[i + 1];
                            }
                            else {
                                num56 = inOpen[i + 1];
                            }
                            if (inClose[i + 1] >= inOpen[i + 1]) {
                                num55 = inOpen[i + 1];
                            }
                            else {
                                num55 = inClose[i + 1];
                            }
                            num54 = (inHigh[i + 1] - num56) + (num55 - inLow[i + 1]);
                        }
                        else {
                            num54 = 0.0;
                        }
                        num57 = num54;
                    }
                    num58 = num57;
                }
                BodyShortPeriodTotal2 += num58;
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            Label_0353:
            if (Globals.candleSettings[0].avgPeriod != 0.0) {
                num53 = BodyLongPeriodTotal / ((double)Globals.candleSettings[0].avgPeriod);
            }
            else {
                double num52;
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num52 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                }
                else {
                    double num51;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num51 = inHigh[i - 2] - inLow[i - 2];
                    }
                    else {
                        double num48;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num49;
                            double num50;
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num50 = inClose[i - 2];
                            }
                            else {
                                num50 = inOpen[i - 2];
                            }
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num49 = inOpen[i - 2];
                            }
                            else {
                                num49 = inClose[i - 2];
                            }
                            num48 = (inHigh[i - 2] - num50) + (num49 - inLow[i - 2]);
                        }
                        else {
                            num48 = 0.0;
                        }
                        num51 = num48;
                    }
                    num52 = num51;
                }
                num53 = num52;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                num47 = 2.0;
            }
            else {
                num47 = 1.0;
            }
            if ((Math.Abs((double)(inClose[i - 2] - inOpen[i - 2])) > ((Globals.candleSettings[0].factor * num53) / num47)) && (((inClose[i - 2] < inOpen[i - 2]) ? -1 : 1) == -1)) {
                double num40;
                double num46;
                if (Globals.candleSettings[2].avgPeriod != 0.0) {
                    num46 = BodyShortPeriodTotal / ((double)Globals.candleSettings[2].avgPeriod);
                }
                else {
                    double num45;
                    if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                        num45 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                    }
                    else {
                        double num44;
                        if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                            num44 = inHigh[i - 1] - inLow[i - 1];
                        }
                        else {
                            double num41;
                            if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                                double num42;
                                double num43;
                                if (inClose[i - 1] >= inOpen[i - 1]) {
                                    num43 = inClose[i - 1];
                                }
                                else {
                                    num43 = inOpen[i - 1];
                                }
                                if (inClose[i - 1] >= inOpen[i - 1]) {
                                    num42 = inOpen[i - 1];
                                }
                                else {
                                    num42 = inClose[i - 1];
                                }
                                num41 = (inHigh[i - 1] - num43) + (num42 - inLow[i - 1]);
                            }
                            else {
                                num41 = 0.0;
                            }
                            num44 = num41;
                        }
                        num45 = num44;
                    }
                    num46 = num45;
                }
                if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                    num40 = 2.0;
                }
                else {
                    num40 = 1.0;
                }
                if (Math.Abs((double)(inClose[i - 1] - inOpen[i - 1])) <= ((Globals.candleSettings[2].factor * num46) / num40)) {
                    double num38;
                    double num39;
                    if (inOpen[i - 1] > inClose[i - 1]) {
                        num39 = inOpen[i - 1];
                    }
                    else {
                        num39 = inClose[i - 1];
                    }
                    if (inOpen[i - 2] < inClose[i - 2]) {
                        num38 = inOpen[i - 2];
                    }
                    else {
                        num38 = inClose[i - 2];
                    }
                    if (num39 < num38) {
                        double num31;
                        double num37;
                        if (Globals.candleSettings[2].avgPeriod != 0.0) {
                            num37 = BodyShortPeriodTotal2 / ((double)Globals.candleSettings[2].avgPeriod);
                        }
                        else {
                            double num36;
                            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                                num36 = Math.Abs((double)(inClose[i] - inOpen[i]));
                            }
                            else {
                                double num35;
                                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                                    num35 = inHigh[i] - inLow[i];
                                }
                                else {
                                    double num32;
                                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                                        double num33;
                                        double num34;
                                        if (inClose[i] >= inOpen[i]) {
                                            num34 = inClose[i];
                                        }
                                        else {
                                            num34 = inOpen[i];
                                        }
                                        if (inClose[i] >= inOpen[i]) {
                                            num33 = inOpen[i];
                                        }
                                        else {
                                            num33 = inClose[i];
                                        }
                                        num32 = (inHigh[i] - num34) + (num33 - inLow[i]);
                                    }
                                    else {
                                        num32 = 0.0;
                                    }
                                    num35 = num32;
                                }
                                num36 = num35;
                            }
                            num37 = num36;
                        }
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            num31 = 2.0;
                        }
                        else {
                            num31 = 1.0;
                        }
                        if (((Math.Abs((double)(inClose[i] - inOpen[i])) > ((Globals.candleSettings[2].factor * num37) / num31)) && (((inClose[i] < inOpen[i]) ? -1 : 1) == 1)) && (inClose[i] > (inClose[i - 2] + (Math.Abs((double)(inClose[i - 2] - inOpen[i - 2])) * optInPenetration)))) {
                            outInteger[outIdx] = 100;
                            outIdx++;
                            goto Label_07F2;
                        }
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_07F2:
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num30 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
            }
            else {
                double num29;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num29 = inHigh[i - 2] - inLow[i - 2];
                }
                else {
                    double num26;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num27;
                        double num28;
                        if (inClose[i - 2] >= inOpen[i - 2]) {
                            num28 = inClose[i - 2];
                        }
                        else {
                            num28 = inOpen[i - 2];
                        }
                        if (inClose[i - 2] >= inOpen[i - 2]) {
                            num27 = inOpen[i - 2];
                        }
                        else {
                            num27 = inClose[i - 2];
                        }
                        num26 = (inHigh[i - 2] - num28) + (num27 - inLow[i - 2]);
                    }
                    else {
                        num26 = 0.0;
                    }
                    num29 = num26;
                }
                num30 = num29;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num25 = Math.Abs((double)(inClose[BodyLongTrailingIdx] - inOpen[BodyLongTrailingIdx]));
            }
            else {
                double num24;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num24 = inHigh[BodyLongTrailingIdx] - inLow[BodyLongTrailingIdx];
                }
                else {
                    double num21;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num22;
                        double num23;
                        if (inClose[BodyLongTrailingIdx] >= inOpen[BodyLongTrailingIdx]) {
                            num23 = inClose[BodyLongTrailingIdx];
                        }
                        else {
                            num23 = inOpen[BodyLongTrailingIdx];
                        }
                        if (inClose[BodyLongTrailingIdx] >= inOpen[BodyLongTrailingIdx]) {
                            num22 = inOpen[BodyLongTrailingIdx];
                        }
                        else {
                            num22 = inClose[BodyLongTrailingIdx];
                        }
                        num21 = (inHigh[BodyLongTrailingIdx] - num23) + (num22 - inLow[BodyLongTrailingIdx]);
                    }
                    else {
                        num21 = 0.0;
                    }
                    num24 = num21;
                }
                num25 = num24;
            }
            BodyLongPeriodTotal += num30 - num25;
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num20 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
            }
            else {
                double num19;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num19 = inHigh[i - 1] - inLow[i - 1];
                }
                else {
                    double num16;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num17;
                        double num18;
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num18 = inClose[i - 1];
                        }
                        else {
                            num18 = inOpen[i - 1];
                        }
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num17 = inOpen[i - 1];
                        }
                        else {
                            num17 = inClose[i - 1];
                        }
                        num16 = (inHigh[i - 1] - num18) + (num17 - inLow[i - 1]);
                    }
                    else {
                        num16 = 0.0;
                    }
                    num19 = num16;
                }
                num20 = num19;
            }
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num15 = Math.Abs((double)(inClose[BodyShortTrailingIdx] - inOpen[BodyShortTrailingIdx]));
            }
            else {
                double num14;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num14 = inHigh[BodyShortTrailingIdx] - inLow[BodyShortTrailingIdx];
                }
                else {
                    double num11;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num12;
                        double num13;
                        if (inClose[BodyShortTrailingIdx] >= inOpen[BodyShortTrailingIdx]) {
                            num13 = inClose[BodyShortTrailingIdx];
                        }
                        else {
                            num13 = inOpen[BodyShortTrailingIdx];
                        }
                        if (inClose[BodyShortTrailingIdx] >= inOpen[BodyShortTrailingIdx]) {
                            num12 = inOpen[BodyShortTrailingIdx];
                        }
                        else {
                            num12 = inClose[BodyShortTrailingIdx];
                        }
                        num11 = (inHigh[BodyShortTrailingIdx] - num13) + (num12 - inLow[BodyShortTrailingIdx]);
                    }
                    else {
                        num11 = 0.0;
                    }
                    num14 = num11;
                }
                num15 = num14;
            }
            BodyShortPeriodTotal += num20 - num15;
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num9;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i] - inLow[i];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i] >= inOpen[i]) {
                            num8 = inClose[i];
                        }
                        else {
                            num8 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num7 = inOpen[i];
                        }
                        else {
                            num7 = inClose[i];
                        }
                        num6 = (inHigh[i] - num8) + (num7 - inLow[i]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[BodyShortTrailingIdx + 1] - inOpen[BodyShortTrailingIdx + 1]));
            }
            else {
                double num4;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num4 = inHigh[BodyShortTrailingIdx + 1] - inLow[BodyShortTrailingIdx + 1];
                }
                else {
                    double num;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[BodyShortTrailingIdx + 1] >= inOpen[BodyShortTrailingIdx + 1]) {
                            num3 = inClose[BodyShortTrailingIdx + 1];
                        }
                        else {
                            num3 = inOpen[BodyShortTrailingIdx + 1];
                        }
                        if (inClose[BodyShortTrailingIdx + 1] >= inOpen[BodyShortTrailingIdx + 1]) {
                            num2 = inOpen[BodyShortTrailingIdx + 1];
                        }
                        else {
                            num2 = inClose[BodyShortTrailingIdx + 1];
                        }
                        num = (inHigh[BodyShortTrailingIdx + 1] - num3) + (num2 - inLow[BodyShortTrailingIdx + 1]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            BodyShortPeriodTotal2 += num10 - num5;
            i++;
            BodyLongTrailingIdx++;
            BodyShortTrailingIdx++;
            if (i <= endIdx) {
                goto Label_0353;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlOnNeck(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            double num15;
            double num20;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlOnNeckLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double EqualPeriodTotal = 0.0;
            int EqualTrailingIdx = startIdx - Globals.candleSettings[10].avgPeriod;
            double BodyLongPeriodTotal = 0.0;
            int BodyLongTrailingIdx = startIdx - Globals.candleSettings[0].avgPeriod;
            int i = EqualTrailingIdx;
            while (true) {
                double num51;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                    num51 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num50;
                    if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                        num50 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num47;
                        if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                            double num48;
                            double num49;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num49 = inClose[i - 1];
                            }
                            else {
                                num49 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num48 = inOpen[i - 1];
                            }
                            else {
                                num48 = inClose[i - 1];
                            }
                            num47 = (inHigh[i - 1] - num49) + (num48 - inLow[i - 1]);
                        }
                        else {
                            num47 = 0.0;
                        }
                        num50 = num47;
                    }
                    num51 = num50;
                }
                EqualPeriodTotal += num51;
                i++;
            }
            i = BodyLongTrailingIdx;
            while (true) {
                double num46;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num46 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num45;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num45 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num42;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num43;
                            double num44;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num44 = inClose[i - 1];
                            }
                            else {
                                num44 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num43 = inOpen[i - 1];
                            }
                            else {
                                num43 = inClose[i - 1];
                            }
                            num42 = (inHigh[i - 1] - num44) + (num43 - inLow[i - 1]);
                        }
                        else {
                            num42 = 0.0;
                        }
                        num45 = num42;
                    }
                    num46 = num45;
                }
                BodyLongPeriodTotal += num46;
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            Label_0272:
            if (((inClose[i - 1] < inOpen[i - 1]) ? -1 : 1) == -1) {
                double num35;
                double num41;
                if (Globals.candleSettings[0].avgPeriod != 0.0) {
                    num41 = BodyLongPeriodTotal / ((double)Globals.candleSettings[0].avgPeriod);
                }
                else {
                    double num40;
                    if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                        num40 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                    }
                    else {
                        double num39;
                        if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                            num39 = inHigh[i - 1] - inLow[i - 1];
                        }
                        else {
                            double num36;
                            if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                                double num37;
                                double num38;
                                if (inClose[i - 1] >= inOpen[i - 1]) {
                                    num38 = inClose[i - 1];
                                }
                                else {
                                    num38 = inOpen[i - 1];
                                }
                                if (inClose[i - 1] >= inOpen[i - 1]) {
                                    num37 = inOpen[i - 1];
                                }
                                else {
                                    num37 = inClose[i - 1];
                                }
                                num36 = (inHigh[i - 1] - num38) + (num37 - inLow[i - 1]);
                            }
                            else {
                                num36 = 0.0;
                            }
                            num39 = num36;
                        }
                        num40 = num39;
                    }
                    num41 = num40;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                    num35 = 2.0;
                }
                else {
                    num35 = 1.0;
                }
                if (((Math.Abs((double)(inClose[i - 1] - inOpen[i - 1])) > ((Globals.candleSettings[0].factor * num41) / num35)) && (inClose[i] >= inOpen[i])) && (inOpen[i] < inLow[i - 1])) {
                    double num28;
                    double num34;
                    if (Globals.candleSettings[10].avgPeriod != 0.0) {
                        num34 = EqualPeriodTotal / ((double)Globals.candleSettings[10].avgPeriod);
                    }
                    else {
                        double num33;
                        if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                            num33 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                        }
                        else {
                            double num32;
                            if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                                num32 = inHigh[i - 1] - inLow[i - 1];
                            }
                            else {
                                double num29;
                                if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                                    double num30;
                                    double num31;
                                    if (inClose[i - 1] >= inOpen[i - 1]) {
                                        num31 = inClose[i - 1];
                                    }
                                    else {
                                        num31 = inOpen[i - 1];
                                    }
                                    if (inClose[i - 1] >= inOpen[i - 1]) {
                                        num30 = inOpen[i - 1];
                                    }
                                    else {
                                        num30 = inClose[i - 1];
                                    }
                                    num29 = (inHigh[i - 1] - num31) + (num30 - inLow[i - 1]);
                                }
                                else {
                                    num29 = 0.0;
                                }
                                num32 = num29;
                            }
                            num33 = num32;
                        }
                        num34 = num33;
                    }
                    if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                        num28 = 2.0;
                    }
                    else {
                        num28 = 1.0;
                    }
                    if (inClose[i] <= (inLow[i - 1] + ((Globals.candleSettings[10].factor * num34) / num28))) {
                        double num21;
                        double num27;
                        if (Globals.candleSettings[10].avgPeriod != 0.0) {
                            num27 = EqualPeriodTotal / ((double)Globals.candleSettings[10].avgPeriod);
                        }
                        else {
                            double num26;
                            if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                                num26 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                            }
                            else {
                                double num25;
                                if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                                    num25 = inHigh[i - 1] - inLow[i - 1];
                                }
                                else {
                                    double num22;
                                    if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                                        double num23;
                                        double num24;
                                        if (inClose[i - 1] >= inOpen[i - 1]) {
                                            num24 = inClose[i - 1];
                                        }
                                        else {
                                            num24 = inOpen[i - 1];
                                        }
                                        if (inClose[i - 1] >= inOpen[i - 1]) {
                                            num23 = inOpen[i - 1];
                                        }
                                        else {
                                            num23 = inClose[i - 1];
                                        }
                                        num22 = (inHigh[i - 1] - num24) + (num23 - inLow[i - 1]);
                                    }
                                    else {
                                        num22 = 0.0;
                                    }
                                    num25 = num22;
                                }
                                num26 = num25;
                            }
                            num27 = num26;
                        }
                        if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                            num21 = 2.0;
                        }
                        else {
                            num21 = 1.0;
                        }
                        if (inClose[i] >= (inLow[i - 1] - ((Globals.candleSettings[10].factor * num27) / num21))) {
                            outInteger[outIdx] = -100;
                            outIdx++;
                            goto Label_06E1;
                        }
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_06E1:
            if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                num20 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
            }
            else {
                double num19;
                if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                    num19 = inHigh[i - 1] - inLow[i - 1];
                }
                else {
                    double num16;
                    if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                        double num17;
                        double num18;
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num18 = inClose[i - 1];
                        }
                        else {
                            num18 = inOpen[i - 1];
                        }
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num17 = inOpen[i - 1];
                        }
                        else {
                            num17 = inClose[i - 1];
                        }
                        num16 = (inHigh[i - 1] - num18) + (num17 - inLow[i - 1]);
                    }
                    else {
                        num16 = 0.0;
                    }
                    num19 = num16;
                }
                num20 = num19;
            }
            if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                num15 = Math.Abs((double)(inClose[EqualTrailingIdx - 1] - inOpen[EqualTrailingIdx - 1]));
            }
            else {
                double num14;
                if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                    num14 = inHigh[EqualTrailingIdx - 1] - inLow[EqualTrailingIdx - 1];
                }
                else {
                    double num11;
                    if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                        double num12;
                        double num13;
                        if (inClose[EqualTrailingIdx - 1] >= inOpen[EqualTrailingIdx - 1]) {
                            num13 = inClose[EqualTrailingIdx - 1];
                        }
                        else {
                            num13 = inOpen[EqualTrailingIdx - 1];
                        }
                        if (inClose[EqualTrailingIdx - 1] >= inOpen[EqualTrailingIdx - 1]) {
                            num12 = inOpen[EqualTrailingIdx - 1];
                        }
                        else {
                            num12 = inClose[EqualTrailingIdx - 1];
                        }
                        num11 = (inHigh[EqualTrailingIdx - 1] - num13) + (num12 - inLow[EqualTrailingIdx - 1]);
                    }
                    else {
                        num11 = 0.0;
                    }
                    num14 = num11;
                }
                num15 = num14;
            }
            EqualPeriodTotal += num20 - num15;
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
            }
            else {
                double num9;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i - 1] - inLow[i - 1];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num8 = inClose[i - 1];
                        }
                        else {
                            num8 = inOpen[i - 1];
                        }
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num7 = inOpen[i - 1];
                        }
                        else {
                            num7 = inClose[i - 1];
                        }
                        num6 = (inHigh[i - 1] - num8) + (num7 - inLow[i - 1]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[BodyLongTrailingIdx - 1] - inOpen[BodyLongTrailingIdx - 1]));
            }
            else {
                double num4;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num4 = inHigh[BodyLongTrailingIdx - 1] - inLow[BodyLongTrailingIdx - 1];
                }
                else {
                    double num;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[BodyLongTrailingIdx - 1] >= inOpen[BodyLongTrailingIdx - 1]) {
                            num3 = inClose[BodyLongTrailingIdx - 1];
                        }
                        else {
                            num3 = inOpen[BodyLongTrailingIdx - 1];
                        }
                        if (inClose[BodyLongTrailingIdx - 1] >= inOpen[BodyLongTrailingIdx - 1]) {
                            num2 = inOpen[BodyLongTrailingIdx - 1];
                        }
                        else {
                            num2 = inClose[BodyLongTrailingIdx - 1];
                        }
                        num = (inHigh[BodyLongTrailingIdx - 1] - num3) + (num2 - inLow[BodyLongTrailingIdx - 1]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            BodyLongPeriodTotal += num10 - num5;
            i++;
            EqualTrailingIdx++;
            BodyLongTrailingIdx++;
            if (i <= endIdx) {
                goto Label_0272;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlPiercing(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            int totIdx;
            double[] BodyLongPeriodTotal = new double[2];
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlPiercingLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            BodyLongPeriodTotal[1] = 0.0;
            BodyLongPeriodTotal[0] = 0.0;
            int BodyLongTrailingIdx = startIdx - Globals.candleSettings[0].avgPeriod;
            int i = BodyLongTrailingIdx;
            while (true) {
                double num29;
                double num34;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num34 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num33;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num33 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num30;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num31;
                            double num32;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num32 = inClose[i - 1];
                            }
                            else {
                                num32 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num31 = inOpen[i - 1];
                            }
                            else {
                                num31 = inClose[i - 1];
                            }
                            num30 = (inHigh[i - 1] - num32) + (num31 - inLow[i - 1]);
                        }
                        else {
                            num30 = 0.0;
                        }
                        num33 = num30;
                    }
                    num34 = num33;
                }
                BodyLongPeriodTotal[1] += num34;
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num29 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num28;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num28 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num25;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num26;
                            double num27;
                            if (inClose[i] >= inOpen[i]) {
                                num27 = inClose[i];
                            }
                            else {
                                num27 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num26 = inOpen[i];
                            }
                            else {
                                num26 = inClose[i];
                            }
                            num25 = (inHigh[i] - num27) + (num26 - inLow[i]);
                        }
                        else {
                            num25 = 0.0;
                        }
                        num28 = num25;
                    }
                    num29 = num28;
                }
                BodyLongPeriodTotal[0] += num29;
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            Label_0237:
            if (((inClose[i - 1] < inOpen[i - 1]) ? -1 : 1) == -1) {
                double num18;
                double num24;
                if (Globals.candleSettings[0].avgPeriod != 0.0) {
                    num24 = BodyLongPeriodTotal[1] / ((double)Globals.candleSettings[0].avgPeriod);
                }
                else {
                    double num23;
                    if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                        num23 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                    }
                    else {
                        double num22;
                        if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                            num22 = inHigh[i - 1] - inLow[i - 1];
                        }
                        else {
                            double num19;
                            if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                                double num20;
                                double num21;
                                if (inClose[i - 1] >= inOpen[i - 1]) {
                                    num21 = inClose[i - 1];
                                }
                                else {
                                    num21 = inOpen[i - 1];
                                }
                                if (inClose[i - 1] >= inOpen[i - 1]) {
                                    num20 = inOpen[i - 1];
                                }
                                else {
                                    num20 = inClose[i - 1];
                                }
                                num19 = (inHigh[i - 1] - num21) + (num20 - inLow[i - 1]);
                            }
                            else {
                                num19 = 0.0;
                            }
                            num22 = num19;
                        }
                        num23 = num22;
                    }
                    num24 = num23;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                    num18 = 2.0;
                }
                else {
                    num18 = 1.0;
                }
                if ((Math.Abs((double)(inClose[i - 1] - inOpen[i - 1])) > ((Globals.candleSettings[0].factor * num24) / num18)) && (inClose[i] >= inOpen[i])) {
                    double num11;
                    double num17;
                    if (Globals.candleSettings[0].avgPeriod != 0.0) {
                        num17 = BodyLongPeriodTotal[0] / ((double)Globals.candleSettings[0].avgPeriod);
                    }
                    else {
                        double num16;
                        if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                            num16 = Math.Abs((double)(inClose[i] - inOpen[i]));
                        }
                        else {
                            double num15;
                            if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                                num15 = inHigh[i] - inLow[i];
                            }
                            else {
                                double num12;
                                if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                                    double num13;
                                    double num14;
                                    if (inClose[i] >= inOpen[i]) {
                                        num14 = inClose[i];
                                    }
                                    else {
                                        num14 = inOpen[i];
                                    }
                                    if (inClose[i] >= inOpen[i]) {
                                        num13 = inOpen[i];
                                    }
                                    else {
                                        num13 = inClose[i];
                                    }
                                    num12 = (inHigh[i] - num14) + (num13 - inLow[i]);
                                }
                                else {
                                    num12 = 0.0;
                                }
                                num15 = num12;
                            }
                            num16 = num15;
                        }
                        num17 = num16;
                    }
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        num11 = 2.0;
                    }
                    else {
                        num11 = 1.0;
                    }
                    if (((Math.Abs((double)(inClose[i] - inOpen[i])) > ((Globals.candleSettings[0].factor * num17) / num11)) && (inOpen[i] < inLow[i - 1])) && ((inClose[i] < inOpen[i - 1]) && (inClose[i] > (inClose[i - 1] + (Math.Abs((double)(inClose[i - 1] - inOpen[i - 1])) * 0.5))))) {
                        outInteger[outIdx] = 100;
                        outIdx++;
                        goto Label_0558;
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_0558:
            totIdx = 1;
            while (totIdx >= 0) {
                double num5;
                double num10;
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num10 = Math.Abs((double)(inClose[i - totIdx] - inOpen[i - totIdx]));
                }
                else {
                    double num9;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num9 = inHigh[i - totIdx] - inLow[i - totIdx];
                    }
                    else {
                        double num6;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num7;
                            double num8;
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num8 = inClose[i - totIdx];
                            }
                            else {
                                num8 = inOpen[i - totIdx];
                            }
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num7 = inOpen[i - totIdx];
                            }
                            else {
                                num7 = inClose[i - totIdx];
                            }
                            num6 = (inHigh[i - totIdx] - num8) + (num7 - inLow[i - totIdx]);
                        }
                        else {
                            num6 = 0.0;
                        }
                        num9 = num6;
                    }
                    num10 = num9;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num5 = Math.Abs((double)(inClose[BodyLongTrailingIdx - totIdx] - inOpen[BodyLongTrailingIdx - totIdx]));
                }
                else {
                    double num4;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num4 = inHigh[BodyLongTrailingIdx - totIdx] - inLow[BodyLongTrailingIdx - totIdx];
                    }
                    else {
                        double num;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num2;
                            double num3;
                            if (inClose[BodyLongTrailingIdx - totIdx] >= inOpen[BodyLongTrailingIdx - totIdx]) {
                                num3 = inClose[BodyLongTrailingIdx - totIdx];
                            }
                            else {
                                num3 = inOpen[BodyLongTrailingIdx - totIdx];
                            }
                            if (inClose[BodyLongTrailingIdx - totIdx] >= inOpen[BodyLongTrailingIdx - totIdx]) {
                                num2 = inOpen[BodyLongTrailingIdx - totIdx];
                            }
                            else {
                                num2 = inClose[BodyLongTrailingIdx - totIdx];
                            }
                            num = (inHigh[BodyLongTrailingIdx - totIdx] - num3) + (num2 - inLow[BodyLongTrailingIdx - totIdx]);
                        }
                        else {
                            num = 0.0;
                        }
                        num4 = num;
                    }
                    num5 = num4;
                }
                BodyLongPeriodTotal[totIdx] += num10 - num5;
                totIdx--;
            }
            i++;
            BodyLongTrailingIdx++;
            if (i <= endIdx) {
                goto Label_0237;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlRickshawMan(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            double num15;
            double num20;
            double num25;
            double num30;
            double num63;
            double num69;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlRickshawManLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double BodyDojiPeriodTotal = 0.0;
            int BodyDojiTrailingIdx = startIdx - Globals.candleSettings[3].avgPeriod;
            double ShadowLongPeriodTotal = 0.0;
            int ShadowLongTrailingIdx = startIdx - Globals.candleSettings[4].avgPeriod;
            double NearPeriodTotal = 0.0;
            int NearTrailingIdx = startIdx - Globals.candleSettings[8].avgPeriod;
            int i = BodyDojiTrailingIdx;
            while (true) {
                double num84;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                    num84 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num83;
                    if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                        num83 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num80;
                        if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                            double num81;
                            double num82;
                            if (inClose[i] >= inOpen[i]) {
                                num82 = inClose[i];
                            }
                            else {
                                num82 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num81 = inOpen[i];
                            }
                            else {
                                num81 = inClose[i];
                            }
                            num80 = (inHigh[i] - num82) + (num81 - inLow[i]);
                        }
                        else {
                            num80 = 0.0;
                        }
                        num83 = num80;
                    }
                    num84 = num83;
                }
                BodyDojiPeriodTotal += num84;
                i++;
            }
            i = ShadowLongTrailingIdx;
            while (true) {
                double num79;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[4].rangeType == RangeType.RealBody) {
                    num79 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num78;
                    if (Globals.candleSettings[4].rangeType == RangeType.HighLow) {
                        num78 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num75;
                        if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                            double num76;
                            double num77;
                            if (inClose[i] >= inOpen[i]) {
                                num77 = inClose[i];
                            }
                            else {
                                num77 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num76 = inOpen[i];
                            }
                            else {
                                num76 = inClose[i];
                            }
                            num75 = (inHigh[i] - num77) + (num76 - inLow[i]);
                        }
                        else {
                            num75 = 0.0;
                        }
                        num78 = num75;
                    }
                    num79 = num78;
                }
                ShadowLongPeriodTotal += num79;
                i++;
            }
            i = NearTrailingIdx;
            while (true) {
                double num74;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                    num74 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num73;
                    if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                        num73 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num70;
                        if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                            double num71;
                            double num72;
                            if (inClose[i] >= inOpen[i]) {
                                num72 = inClose[i];
                            }
                            else {
                                num72 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num71 = inOpen[i];
                            }
                            else {
                                num71 = inClose[i];
                            }
                            num70 = (inHigh[i] - num72) + (num71 - inLow[i]);
                        }
                        else {
                            num70 = 0.0;
                        }
                        num73 = num70;
                    }
                    num74 = num73;
                }
                NearPeriodTotal += num74;
                i++;
            }
            int outIdx = 0;
            Label_0313:
            if (Globals.candleSettings[3].avgPeriod != 0.0) {
                num69 = BodyDojiPeriodTotal / ((double)Globals.candleSettings[3].avgPeriod);
            }
            else {
                double num68;
                if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                    num68 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num67;
                    if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                        num67 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num64;
                        if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                            double num65;
                            double num66;
                            if (inClose[i] >= inOpen[i]) {
                                num66 = inClose[i];
                            }
                            else {
                                num66 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num65 = inOpen[i];
                            }
                            else {
                                num65 = inClose[i];
                            }
                            num64 = (inHigh[i] - num66) + (num65 - inLow[i]);
                        }
                        else {
                            num64 = 0.0;
                        }
                        num67 = num64;
                    }
                    num68 = num67;
                }
                num69 = num68;
            }
            if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                num63 = 2.0;
            }
            else {
                num63 = 1.0;
            }
            if (Math.Abs((double)(inClose[i] - inOpen[i])) <= ((Globals.candleSettings[3].factor * num69) / num63)) {
                double num55;
                double num61;
                double num62;
                if (inClose[i] >= inOpen[i]) {
                    num62 = inOpen[i];
                }
                else {
                    num62 = inClose[i];
                }
                if (Globals.candleSettings[4].avgPeriod != 0.0) {
                    num61 = ShadowLongPeriodTotal / ((double)Globals.candleSettings[4].avgPeriod);
                }
                else {
                    double num60;
                    if (Globals.candleSettings[4].rangeType == RangeType.RealBody) {
                        num60 = Math.Abs((double)(inClose[i] - inOpen[i]));
                    }
                    else {
                        double num59;
                        if (Globals.candleSettings[4].rangeType == RangeType.HighLow) {
                            num59 = inHigh[i] - inLow[i];
                        }
                        else {
                            double num56;
                            if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                                double num57;
                                double num58;
                                if (inClose[i] >= inOpen[i]) {
                                    num58 = inClose[i];
                                }
                                else {
                                    num58 = inOpen[i];
                                }
                                if (inClose[i] >= inOpen[i]) {
                                    num57 = inOpen[i];
                                }
                                else {
                                    num57 = inClose[i];
                                }
                                num56 = (inHigh[i] - num58) + (num57 - inLow[i]);
                            }
                            else {
                                num56 = 0.0;
                            }
                            num59 = num56;
                        }
                        num60 = num59;
                    }
                    num61 = num60;
                }
                if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                    num55 = 2.0;
                }
                else {
                    num55 = 1.0;
                }
                if ((num62 - inLow[i]) > ((Globals.candleSettings[4].factor * num61) / num55)) {
                    double num47;
                    double num53;
                    double num54;
                    if (inClose[i] >= inOpen[i]) {
                        num54 = inClose[i];
                    }
                    else {
                        num54 = inOpen[i];
                    }
                    if (Globals.candleSettings[4].avgPeriod != 0.0) {
                        num53 = ShadowLongPeriodTotal / ((double)Globals.candleSettings[4].avgPeriod);
                    }
                    else {
                        double num52;
                        if (Globals.candleSettings[4].rangeType == RangeType.RealBody) {
                            num52 = Math.Abs((double)(inClose[i] - inOpen[i]));
                        }
                        else {
                            double num51;
                            if (Globals.candleSettings[4].rangeType == RangeType.HighLow) {
                                num51 = inHigh[i] - inLow[i];
                            }
                            else {
                                double num48;
                                if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                                    double num49;
                                    double num50;
                                    if (inClose[i] >= inOpen[i]) {
                                        num50 = inClose[i];
                                    }
                                    else {
                                        num50 = inOpen[i];
                                    }
                                    if (inClose[i] >= inOpen[i]) {
                                        num49 = inOpen[i];
                                    }
                                    else {
                                        num49 = inClose[i];
                                    }
                                    num48 = (inHigh[i] - num50) + (num49 - inLow[i]);
                                }
                                else {
                                    num48 = 0.0;
                                }
                                num51 = num48;
                            }
                            num52 = num51;
                        }
                        num53 = num52;
                    }
                    if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                        num47 = 2.0;
                    }
                    else {
                        num47 = 1.0;
                    }
                    if ((inHigh[i] - num54) > ((Globals.candleSettings[4].factor * num53) / num47)) {
                        double num39;
                        double num45;
                        double num46;
                        if (inOpen[i] < inClose[i]) {
                            num46 = inOpen[i];
                        }
                        else {
                            num46 = inClose[i];
                        }
                        if (Globals.candleSettings[8].avgPeriod != 0.0) {
                            num45 = NearPeriodTotal / ((double)Globals.candleSettings[8].avgPeriod);
                        }
                        else {
                            double num44;
                            if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                                num44 = Math.Abs((double)(inClose[i] - inOpen[i]));
                            }
                            else {
                                double num43;
                                if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                                    num43 = inHigh[i] - inLow[i];
                                }
                                else {
                                    double num40;
                                    if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                                        double num41;
                                        double num42;
                                        if (inClose[i] >= inOpen[i]) {
                                            num42 = inClose[i];
                                        }
                                        else {
                                            num42 = inOpen[i];
                                        }
                                        if (inClose[i] >= inOpen[i]) {
                                            num41 = inOpen[i];
                                        }
                                        else {
                                            num41 = inClose[i];
                                        }
                                        num40 = (inHigh[i] - num42) + (num41 - inLow[i]);
                                    }
                                    else {
                                        num40 = 0.0;
                                    }
                                    num43 = num40;
                                }
                                num44 = num43;
                            }
                            num45 = num44;
                        }
                        if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                            num39 = 2.0;
                        }
                        else {
                            num39 = 1.0;
                        }
                        if (num46 <= ((inLow[i] + ((inHigh[i] - inLow[i]) / 2.0)) + ((Globals.candleSettings[8].factor * num45) / num39))) {
                            double num31;
                            double num37;
                            double num38;
                            if (inOpen[i] > inClose[i]) {
                                num38 = inOpen[i];
                            }
                            else {
                                num38 = inClose[i];
                            }
                            if (Globals.candleSettings[8].avgPeriod != 0.0) {
                                num37 = NearPeriodTotal / ((double)Globals.candleSettings[8].avgPeriod);
                            }
                            else {
                                double num36;
                                if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                                    num36 = Math.Abs((double)(inClose[i] - inOpen[i]));
                                }
                                else {
                                    double num35;
                                    if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                                        num35 = inHigh[i] - inLow[i];
                                    }
                                    else {
                                        double num32;
                                        if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                                            double num33;
                                            double num34;
                                            if (inClose[i] >= inOpen[i]) {
                                                num34 = inClose[i];
                                            }
                                            else {
                                                num34 = inOpen[i];
                                            }
                                            if (inClose[i] >= inOpen[i]) {
                                                num33 = inOpen[i];
                                            }
                                            else {
                                                num33 = inClose[i];
                                            }
                                            num32 = (inHigh[i] - num34) + (num33 - inLow[i]);
                                        }
                                        else {
                                            num32 = 0.0;
                                        }
                                        num35 = num32;
                                    }
                                    num36 = num35;
                                }
                                num37 = num36;
                            }
                            if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                                num31 = 2.0;
                            }
                            else {
                                num31 = 1.0;
                            }
                            if (num38 >= ((inLow[i] + ((inHigh[i] - inLow[i]) / 2.0)) - ((Globals.candleSettings[8].factor * num37) / num31))) {
                                outInteger[outIdx] = 100;
                                outIdx++;
                                goto Label_09C6;
                            }
                        }
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_09C6:
            if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                num30 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num29;
                if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                    num29 = inHigh[i] - inLow[i];
                }
                else {
                    double num26;
                    if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                        double num27;
                        double num28;
                        if (inClose[i] >= inOpen[i]) {
                            num28 = inClose[i];
                        }
                        else {
                            num28 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num27 = inOpen[i];
                        }
                        else {
                            num27 = inClose[i];
                        }
                        num26 = (inHigh[i] - num28) + (num27 - inLow[i]);
                    }
                    else {
                        num26 = 0.0;
                    }
                    num29 = num26;
                }
                num30 = num29;
            }
            if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                num25 = Math.Abs((double)(inClose[BodyDojiTrailingIdx] - inOpen[BodyDojiTrailingIdx]));
            }
            else {
                double num24;
                if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                    num24 = inHigh[BodyDojiTrailingIdx] - inLow[BodyDojiTrailingIdx];
                }
                else {
                    double num21;
                    if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                        double num22;
                        double num23;
                        if (inClose[BodyDojiTrailingIdx] >= inOpen[BodyDojiTrailingIdx]) {
                            num23 = inClose[BodyDojiTrailingIdx];
                        }
                        else {
                            num23 = inOpen[BodyDojiTrailingIdx];
                        }
                        if (inClose[BodyDojiTrailingIdx] >= inOpen[BodyDojiTrailingIdx]) {
                            num22 = inOpen[BodyDojiTrailingIdx];
                        }
                        else {
                            num22 = inClose[BodyDojiTrailingIdx];
                        }
                        num21 = (inHigh[BodyDojiTrailingIdx] - num23) + (num22 - inLow[BodyDojiTrailingIdx]);
                    }
                    else {
                        num21 = 0.0;
                    }
                    num24 = num21;
                }
                num25 = num24;
            }
            BodyDojiPeriodTotal += num30 - num25;
            if (Globals.candleSettings[4].rangeType == RangeType.RealBody) {
                num20 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num19;
                if (Globals.candleSettings[4].rangeType == RangeType.HighLow) {
                    num19 = inHigh[i] - inLow[i];
                }
                else {
                    double num16;
                    if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                        double num17;
                        double num18;
                        if (inClose[i] >= inOpen[i]) {
                            num18 = inClose[i];
                        }
                        else {
                            num18 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num17 = inOpen[i];
                        }
                        else {
                            num17 = inClose[i];
                        }
                        num16 = (inHigh[i] - num18) + (num17 - inLow[i]);
                    }
                    else {
                        num16 = 0.0;
                    }
                    num19 = num16;
                }
                num20 = num19;
            }
            if (Globals.candleSettings[4].rangeType == RangeType.RealBody) {
                num15 = Math.Abs((double)(inClose[ShadowLongTrailingIdx] - inOpen[ShadowLongTrailingIdx]));
            }
            else {
                double num14;
                if (Globals.candleSettings[4].rangeType == RangeType.HighLow) {
                    num14 = inHigh[ShadowLongTrailingIdx] - inLow[ShadowLongTrailingIdx];
                }
                else {
                    double num11;
                    if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                        double num12;
                        double num13;
                        if (inClose[ShadowLongTrailingIdx] >= inOpen[ShadowLongTrailingIdx]) {
                            num13 = inClose[ShadowLongTrailingIdx];
                        }
                        else {
                            num13 = inOpen[ShadowLongTrailingIdx];
                        }
                        if (inClose[ShadowLongTrailingIdx] >= inOpen[ShadowLongTrailingIdx]) {
                            num12 = inOpen[ShadowLongTrailingIdx];
                        }
                        else {
                            num12 = inClose[ShadowLongTrailingIdx];
                        }
                        num11 = (inHigh[ShadowLongTrailingIdx] - num13) + (num12 - inLow[ShadowLongTrailingIdx]);
                    }
                    else {
                        num11 = 0.0;
                    }
                    num14 = num11;
                }
                num15 = num14;
            }
            ShadowLongPeriodTotal += num20 - num15;
            if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num9;
                if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i] - inLow[i];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i] >= inOpen[i]) {
                            num8 = inClose[i];
                        }
                        else {
                            num8 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num7 = inOpen[i];
                        }
                        else {
                            num7 = inClose[i];
                        }
                        num6 = (inHigh[i] - num8) + (num7 - inLow[i]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[NearTrailingIdx] - inOpen[NearTrailingIdx]));
            }
            else {
                double num4;
                if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                    num4 = inHigh[NearTrailingIdx] - inLow[NearTrailingIdx];
                }
                else {
                    double num;
                    if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[NearTrailingIdx] >= inOpen[NearTrailingIdx]) {
                            num3 = inClose[NearTrailingIdx];
                        }
                        else {
                            num3 = inOpen[NearTrailingIdx];
                        }
                        if (inClose[NearTrailingIdx] >= inOpen[NearTrailingIdx]) {
                            num2 = inOpen[NearTrailingIdx];
                        }
                        else {
                            num2 = inClose[NearTrailingIdx];
                        }
                        num = (inHigh[NearTrailingIdx] - num3) + (num2 - inLow[NearTrailingIdx]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            NearPeriodTotal += num10 - num5;
            i++;
            BodyDojiTrailingIdx++;
            ShadowLongTrailingIdx++;
            NearTrailingIdx++;
            if (i <= endIdx) {
                goto Label_0313;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlRiseFall3Methods(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            double num25;
            double num30;
            double num78;
            double num84;
            double[] BodyPeriodTotal = new double[5];
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlRiseFall3MethodsLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            BodyPeriodTotal[4] = 0.0;
            BodyPeriodTotal[3] = 0.0;
            BodyPeriodTotal[2] = 0.0;
            BodyPeriodTotal[1] = 0.0;
            BodyPeriodTotal[0] = 0.0;
            int BodyShortTrailingIdx = startIdx - Globals.candleSettings[2].avgPeriod;
            int BodyLongTrailingIdx = startIdx - Globals.candleSettings[0].avgPeriod;
            int i = BodyShortTrailingIdx;
            while (true) {
                double num99;
                double num104;
                double num109;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                    num109 = Math.Abs((double)(inClose[i - 3] - inOpen[i - 3]));
                }
                else {
                    double num108;
                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                        num108 = inHigh[i - 3] - inLow[i - 3];
                    }
                    else {
                        double num105;
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            double num106;
                            double num107;
                            if (inClose[i - 3] >= inOpen[i - 3]) {
                                num107 = inClose[i - 3];
                            }
                            else {
                                num107 = inOpen[i - 3];
                            }
                            if (inClose[i - 3] >= inOpen[i - 3]) {
                                num106 = inOpen[i - 3];
                            }
                            else {
                                num106 = inClose[i - 3];
                            }
                            num105 = (inHigh[i - 3] - num107) + (num106 - inLow[i - 3]);
                        }
                        else {
                            num105 = 0.0;
                        }
                        num108 = num105;
                    }
                    num109 = num108;
                }
                BodyPeriodTotal[3] += num109;
                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                    num104 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                }
                else {
                    double num103;
                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                        num103 = inHigh[i - 2] - inLow[i - 2];
                    }
                    else {
                        double num100;
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            double num101;
                            double num102;
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num102 = inClose[i - 2];
                            }
                            else {
                                num102 = inOpen[i - 2];
                            }
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num101 = inOpen[i - 2];
                            }
                            else {
                                num101 = inClose[i - 2];
                            }
                            num100 = (inHigh[i - 2] - num102) + (num101 - inLow[i - 2]);
                        }
                        else {
                            num100 = 0.0;
                        }
                        num103 = num100;
                    }
                    num104 = num103;
                }
                BodyPeriodTotal[2] += num104;
                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                    num99 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num98;
                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                        num98 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num95;
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            double num96;
                            double num97;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num97 = inClose[i - 1];
                            }
                            else {
                                num97 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num96 = inOpen[i - 1];
                            }
                            else {
                                num96 = inClose[i - 1];
                            }
                            num95 = (inHigh[i - 1] - num97) + (num96 - inLow[i - 1]);
                        }
                        else {
                            num95 = 0.0;
                        }
                        num98 = num95;
                    }
                    num99 = num98;
                }
                BodyPeriodTotal[1] += num99;
                i++;
            }
            i = BodyLongTrailingIdx;
            while (true) {
                double num89;
                double num94;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num94 = Math.Abs((double)(inClose[i - 4] - inOpen[i - 4]));
                }
                else {
                    double num93;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num93 = inHigh[i - 4] - inLow[i - 4];
                    }
                    else {
                        double num90;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num91;
                            double num92;
                            if (inClose[i - 4] >= inOpen[i - 4]) {
                                num92 = inClose[i - 4];
                            }
                            else {
                                num92 = inOpen[i - 4];
                            }
                            if (inClose[i - 4] >= inOpen[i - 4]) {
                                num91 = inOpen[i - 4];
                            }
                            else {
                                num91 = inClose[i - 4];
                            }
                            num90 = (inHigh[i - 4] - num92) + (num91 - inLow[i - 4]);
                        }
                        else {
                            num90 = 0.0;
                        }
                        num93 = num90;
                    }
                    num94 = num93;
                }
                BodyPeriodTotal[4] += num94;
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num89 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num88;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num88 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num85;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num86;
                            double num87;
                            if (inClose[i] >= inOpen[i]) {
                                num87 = inClose[i];
                            }
                            else {
                                num87 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num86 = inOpen[i];
                            }
                            else {
                                num86 = inClose[i];
                            }
                            num85 = (inHigh[i] - num87) + (num86 - inLow[i]);
                        }
                        else {
                            num85 = 0.0;
                        }
                        num88 = num85;
                    }
                    num89 = num88;
                }
                BodyPeriodTotal[0] += num89;
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            Label_04FF:
            if (Globals.candleSettings[0].avgPeriod != 0.0) {
                num84 = BodyPeriodTotal[4] / ((double)Globals.candleSettings[0].avgPeriod);
            }
            else {
                double num83;
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num83 = Math.Abs((double)(inClose[i - 4] - inOpen[i - 4]));
                }
                else {
                    double num82;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num82 = inHigh[i - 4] - inLow[i - 4];
                    }
                    else {
                        double num79;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num80;
                            double num81;
                            if (inClose[i - 4] >= inOpen[i - 4]) {
                                num81 = inClose[i - 4];
                            }
                            else {
                                num81 = inOpen[i - 4];
                            }
                            if (inClose[i - 4] >= inOpen[i - 4]) {
                                num80 = inOpen[i - 4];
                            }
                            else {
                                num80 = inClose[i - 4];
                            }
                            num79 = (inHigh[i - 4] - num81) + (num80 - inLow[i - 4]);
                        }
                        else {
                            num79 = 0.0;
                        }
                        num82 = num79;
                    }
                    num83 = num82;
                }
                num84 = num83;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                num78 = 2.0;
            }
            else {
                num78 = 1.0;
            }
            if (Math.Abs((double)(inClose[i - 4] - inOpen[i - 4])) > ((Globals.candleSettings[0].factor * num84) / num78)) {
                double num71;
                double num77;
                if (Globals.candleSettings[2].avgPeriod != 0.0) {
                    num77 = BodyPeriodTotal[3] / ((double)Globals.candleSettings[2].avgPeriod);
                }
                else {
                    double num76;
                    if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                        num76 = Math.Abs((double)(inClose[i - 3] - inOpen[i - 3]));
                    }
                    else {
                        double num75;
                        if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                            num75 = inHigh[i - 3] - inLow[i - 3];
                        }
                        else {
                            double num72;
                            if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                                double num73;
                                double num74;
                                if (inClose[i - 3] >= inOpen[i - 3]) {
                                    num74 = inClose[i - 3];
                                }
                                else {
                                    num74 = inOpen[i - 3];
                                }
                                if (inClose[i - 3] >= inOpen[i - 3]) {
                                    num73 = inOpen[i - 3];
                                }
                                else {
                                    num73 = inClose[i - 3];
                                }
                                num72 = (inHigh[i - 3] - num74) + (num73 - inLow[i - 3]);
                            }
                            else {
                                num72 = 0.0;
                            }
                            num75 = num72;
                        }
                        num76 = num75;
                    }
                    num77 = num76;
                }
                if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                    num71 = 2.0;
                }
                else {
                    num71 = 1.0;
                }
                if (Math.Abs((double)(inClose[i - 3] - inOpen[i - 3])) < ((Globals.candleSettings[2].factor * num77) / num71)) {
                    double num64;
                    double num70;
                    if (Globals.candleSettings[2].avgPeriod != 0.0) {
                        num70 = BodyPeriodTotal[2] / ((double)Globals.candleSettings[2].avgPeriod);
                    }
                    else {
                        double num69;
                        if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                            num69 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                        }
                        else {
                            double num68;
                            if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                                num68 = inHigh[i - 2] - inLow[i - 2];
                            }
                            else {
                                double num65;
                                if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                                    double num66;
                                    double num67;
                                    if (inClose[i - 2] >= inOpen[i - 2]) {
                                        num67 = inClose[i - 2];
                                    }
                                    else {
                                        num67 = inOpen[i - 2];
                                    }
                                    if (inClose[i - 2] >= inOpen[i - 2]) {
                                        num66 = inOpen[i - 2];
                                    }
                                    else {
                                        num66 = inClose[i - 2];
                                    }
                                    num65 = (inHigh[i - 2] - num67) + (num66 - inLow[i - 2]);
                                }
                                else {
                                    num65 = 0.0;
                                }
                                num68 = num65;
                            }
                            num69 = num68;
                        }
                        num70 = num69;
                    }
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        num64 = 2.0;
                    }
                    else {
                        num64 = 1.0;
                    }
                    if (Math.Abs((double)(inClose[i - 2] - inOpen[i - 2])) < ((Globals.candleSettings[2].factor * num70) / num64)) {
                        double num57;
                        double num63;
                        if (Globals.candleSettings[2].avgPeriod != 0.0) {
                            num63 = BodyPeriodTotal[1] / ((double)Globals.candleSettings[2].avgPeriod);
                        }
                        else {
                            double num62;
                            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                                num62 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                            }
                            else {
                                double num61;
                                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                                    num61 = inHigh[i - 1] - inLow[i - 1];
                                }
                                else {
                                    double num58;
                                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                                        double num59;
                                        double num60;
                                        if (inClose[i - 1] >= inOpen[i - 1]) {
                                            num60 = inClose[i - 1];
                                        }
                                        else {
                                            num60 = inOpen[i - 1];
                                        }
                                        if (inClose[i - 1] >= inOpen[i - 1]) {
                                            num59 = inOpen[i - 1];
                                        }
                                        else {
                                            num59 = inClose[i - 1];
                                        }
                                        num58 = (inHigh[i - 1] - num60) + (num59 - inLow[i - 1]);
                                    }
                                    else {
                                        num58 = 0.0;
                                    }
                                    num61 = num58;
                                }
                                num62 = num61;
                            }
                            num63 = num62;
                        }
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            num57 = 2.0;
                        }
                        else {
                            num57 = 1.0;
                        }
                        if (Math.Abs((double)(inClose[i - 1] - inOpen[i - 1])) < ((Globals.candleSettings[2].factor * num63) / num57)) {
                            double num50;
                            double num56;
                            if (Globals.candleSettings[0].avgPeriod != 0.0) {
                                num56 = BodyPeriodTotal[0] / ((double)Globals.candleSettings[0].avgPeriod);
                            }
                            else {
                                double num55;
                                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                                    num55 = Math.Abs((double)(inClose[i] - inOpen[i]));
                                }
                                else {
                                    double num54;
                                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                                        num54 = inHigh[i] - inLow[i];
                                    }
                                    else {
                                        double num51;
                                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                                            double num52;
                                            double num53;
                                            if (inClose[i] >= inOpen[i]) {
                                                num53 = inClose[i];
                                            }
                                            else {
                                                num53 = inOpen[i];
                                            }
                                            if (inClose[i] >= inOpen[i]) {
                                                num52 = inOpen[i];
                                            }
                                            else {
                                                num52 = inClose[i];
                                            }
                                            num51 = (inHigh[i] - num53) + (num52 - inLow[i]);
                                        }
                                        else {
                                            num51 = 0.0;
                                        }
                                        num54 = num51;
                                    }
                                    num55 = num54;
                                }
                                num56 = num55;
                            }
                            if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                                num50 = 2.0;
                            }
                            else {
                                num50 = 1.0;
                            }
                            if (Math.Abs((double)(inClose[i] - inOpen[i])) > ((Globals.candleSettings[0].factor * num56) / num50)) {
                                int num49;
                                if (inClose[i - 3] >= inOpen[i - 3]) {
                                    num49 = 1;
                                }
                                else {
                                    num49 = -1;
                                }
                                if (((inClose[i - 4] < inOpen[i - 4]) ? -1 : 1) == -num49) {
                                    int num48;
                                    if (inClose[i - 2] >= inOpen[i - 2]) {
                                        num48 = 1;
                                    }
                                    else {
                                        num48 = -1;
                                    }
                                    if (((inClose[i - 3] < inOpen[i - 3]) ? -1 : 1) == num48) {
                                        int num47;
                                        if (inClose[i - 1] >= inOpen[i - 1]) {
                                            num47 = 1;
                                        }
                                        else {
                                            num47 = -1;
                                        }
                                        if (((inClose[i - 2] < inOpen[i - 2]) ? -1 : 1) == num47) {
                                            int num46;
                                            if (inClose[i] >= inOpen[i]) {
                                                num46 = 1;
                                            }
                                            else {
                                                num46 = -1;
                                            }
                                            if (((inClose[i - 1] < inOpen[i - 1]) ? -1 : 1) == -num46) {
                                                double num45;
                                                if (inOpen[i - 3] < inClose[i - 3]) {
                                                    num45 = inOpen[i - 3];
                                                }
                                                else {
                                                    num45 = inClose[i - 3];
                                                }
                                                if (num45 < inHigh[i - 4]) {
                                                    double num44;
                                                    if (inOpen[i - 3] > inClose[i - 3]) {
                                                        num44 = inOpen[i - 3];
                                                    }
                                                    else {
                                                        num44 = inClose[i - 3];
                                                    }
                                                    if (num44 > inLow[i - 4]) {
                                                        double num43;
                                                        if (inOpen[i - 2] < inClose[i - 2]) {
                                                            num43 = inOpen[i - 2];
                                                        }
                                                        else {
                                                            num43 = inClose[i - 2];
                                                        }
                                                        if (num43 < inHigh[i - 4]) {
                                                            double num42;
                                                            if (inOpen[i - 2] > inClose[i - 2]) {
                                                                num42 = inOpen[i - 2];
                                                            }
                                                            else {
                                                                num42 = inClose[i - 2];
                                                            }
                                                            if (num42 > inLow[i - 4]) {
                                                                double num41;
                                                                if (inOpen[i - 1] < inClose[i - 1]) {
                                                                    num41 = inOpen[i - 1];
                                                                }
                                                                else {
                                                                    num41 = inClose[i - 1];
                                                                }
                                                                if (num41 < inHigh[i - 4]) {
                                                                    double num40;
                                                                    if (inOpen[i - 1] > inClose[i - 1]) {
                                                                        num40 = inOpen[i - 1];
                                                                    }
                                                                    else {
                                                                        num40 = inClose[i - 1];
                                                                    }
                                                                    if (num40 > inLow[i - 4]) {
                                                                        int num38;
                                                                        int num39;
                                                                        if (inClose[i - 4] >= inOpen[i - 4]) {
                                                                            num39 = 1;
                                                                        }
                                                                        else {
                                                                            num39 = -1;
                                                                        }
                                                                        if (inClose[i - 4] >= inOpen[i - 4]) {
                                                                            num38 = 1;
                                                                        }
                                                                        else {
                                                                            num38 = -1;
                                                                        }
                                                                        if ((inClose[i - 2] * num39) < (inClose[i - 3] * num38)) {
                                                                            int num36;
                                                                            int num37;
                                                                            if (inClose[i - 4] >= inOpen[i - 4]) {
                                                                                num37 = 1;
                                                                            }
                                                                            else {
                                                                                num37 = -1;
                                                                            }
                                                                            if (inClose[i - 4] >= inOpen[i - 4]) {
                                                                                num36 = 1;
                                                                            }
                                                                            else {
                                                                                num36 = -1;
                                                                            }
                                                                            if ((inClose[i - 1] * num37) < (inClose[i - 2] * num36)) {
                                                                                int num34;
                                                                                int num35;
                                                                                if (inClose[i - 4] >= inOpen[i - 4]) {
                                                                                    num35 = 1;
                                                                                }
                                                                                else {
                                                                                    num35 = -1;
                                                                                }
                                                                                if (inClose[i - 4] >= inOpen[i - 4]) {
                                                                                    num34 = 1;
                                                                                }
                                                                                else {
                                                                                    num34 = -1;
                                                                                }
                                                                                if ((inOpen[i] * num35) > (inClose[i - 1] * num34)) {
                                                                                    int num32;
                                                                                    int num33;
                                                                                    if (inClose[i - 4] >= inOpen[i - 4]) {
                                                                                        num33 = 1;
                                                                                    }
                                                                                    else {
                                                                                        num33 = -1;
                                                                                    }
                                                                                    if (inClose[i - 4] >= inOpen[i - 4]) {
                                                                                        num32 = 1;
                                                                                    }
                                                                                    else {
                                                                                        num32 = -1;
                                                                                    }
                                                                                    if ((inClose[i] * num33) > (inClose[i - 4] * num32)) {
                                                                                        int num31;
                                                                                        if (inClose[i - 4] >= inOpen[i - 4]) {
                                                                                            num31 = 1;
                                                                                        }
                                                                                        else {
                                                                                            num31 = -1;
                                                                                        }
                                                                                        outInteger[outIdx] = num31 * 100;
                                                                                        outIdx++;
                                                                                        goto Label_0EAB;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_0EAB:
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num30 = Math.Abs((double)(inClose[i - 4] - inOpen[i - 4]));
            }
            else {
                double num29;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num29 = inHigh[i - 4] - inLow[i - 4];
                }
                else {
                    double num26;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num27;
                        double num28;
                        if (inClose[i - 4] >= inOpen[i - 4]) {
                            num28 = inClose[i - 4];
                        }
                        else {
                            num28 = inOpen[i - 4];
                        }
                        if (inClose[i - 4] >= inOpen[i - 4]) {
                            num27 = inOpen[i - 4];
                        }
                        else {
                            num27 = inClose[i - 4];
                        }
                        num26 = (inHigh[i - 4] - num28) + (num27 - inLow[i - 4]);
                    }
                    else {
                        num26 = 0.0;
                    }
                    num29 = num26;
                }
                num30 = num29;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num25 = Math.Abs((double)(inClose[BodyLongTrailingIdx - 4] - inOpen[BodyLongTrailingIdx - 4]));
            }
            else {
                double num24;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num24 = inHigh[BodyLongTrailingIdx - 4] - inLow[BodyLongTrailingIdx - 4];
                }
                else {
                    double num21;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num22;
                        double num23;
                        if (inClose[BodyLongTrailingIdx - 4] >= inOpen[BodyLongTrailingIdx - 4]) {
                            num23 = inClose[BodyLongTrailingIdx - 4];
                        }
                        else {
                            num23 = inOpen[BodyLongTrailingIdx - 4];
                        }
                        if (inClose[BodyLongTrailingIdx - 4] >= inOpen[BodyLongTrailingIdx - 4]) {
                            num22 = inOpen[BodyLongTrailingIdx - 4];
                        }
                        else {
                            num22 = inClose[BodyLongTrailingIdx - 4];
                        }
                        num21 = (inHigh[BodyLongTrailingIdx - 4] - num23) + (num22 - inLow[BodyLongTrailingIdx - 4]);
                    }
                    else {
                        num21 = 0.0;
                    }
                    num24 = num21;
                }
                num25 = num24;
            }
            BodyPeriodTotal[4] += num30 - num25;
            for (int totIdx = 3; totIdx >= 1; totIdx--) {
                double num15;
                double num20;
                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                    num20 = Math.Abs((double)(inClose[i - totIdx] - inOpen[i - totIdx]));
                }
                else {
                    double num19;
                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                        num19 = inHigh[i - totIdx] - inLow[i - totIdx];
                    }
                    else {
                        double num16;
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            double num17;
                            double num18;
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num18 = inClose[i - totIdx];
                            }
                            else {
                                num18 = inOpen[i - totIdx];
                            }
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num17 = inOpen[i - totIdx];
                            }
                            else {
                                num17 = inClose[i - totIdx];
                            }
                            num16 = (inHigh[i - totIdx] - num18) + (num17 - inLow[i - totIdx]);
                        }
                        else {
                            num16 = 0.0;
                        }
                        num19 = num16;
                    }
                    num20 = num19;
                }
                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                    num15 = Math.Abs((double)(inClose[BodyShortTrailingIdx - totIdx] - inOpen[BodyShortTrailingIdx - totIdx]));
                }
                else {
                    double num14;
                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                        num14 = inHigh[BodyShortTrailingIdx - totIdx] - inLow[BodyShortTrailingIdx - totIdx];
                    }
                    else {
                        double num11;
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            double num12;
                            double num13;
                            if (inClose[BodyShortTrailingIdx - totIdx] >= inOpen[BodyShortTrailingIdx - totIdx]) {
                                num13 = inClose[BodyShortTrailingIdx - totIdx];
                            }
                            else {
                                num13 = inOpen[BodyShortTrailingIdx - totIdx];
                            }
                            if (inClose[BodyShortTrailingIdx - totIdx] >= inOpen[BodyShortTrailingIdx - totIdx]) {
                                num12 = inOpen[BodyShortTrailingIdx - totIdx];
                            }
                            else {
                                num12 = inClose[BodyShortTrailingIdx - totIdx];
                            }
                            num11 = (inHigh[BodyShortTrailingIdx - totIdx] - num13) + (num12 - inLow[BodyShortTrailingIdx - totIdx]);
                        }
                        else {
                            num11 = 0.0;
                        }
                        num14 = num11;
                    }
                    num15 = num14;
                }
                BodyPeriodTotal[totIdx] += num20 - num15;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num9;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i] - inLow[i];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i] >= inOpen[i]) {
                            num8 = inClose[i];
                        }
                        else {
                            num8 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num7 = inOpen[i];
                        }
                        else {
                            num7 = inClose[i];
                        }
                        num6 = (inHigh[i] - num8) + (num7 - inLow[i]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[BodyLongTrailingIdx] - inOpen[BodyLongTrailingIdx]));
            }
            else {
                double num4;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num4 = inHigh[BodyLongTrailingIdx] - inLow[BodyLongTrailingIdx];
                }
                else {
                    double num;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[BodyLongTrailingIdx] >= inOpen[BodyLongTrailingIdx]) {
                            num3 = inClose[BodyLongTrailingIdx];
                        }
                        else {
                            num3 = inOpen[BodyLongTrailingIdx];
                        }
                        if (inClose[BodyLongTrailingIdx] >= inOpen[BodyLongTrailingIdx]) {
                            num2 = inOpen[BodyLongTrailingIdx];
                        }
                        else {
                            num2 = inClose[BodyLongTrailingIdx];
                        }
                        num = (inHigh[BodyLongTrailingIdx] - num3) + (num2 - inLow[BodyLongTrailingIdx]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            BodyPeriodTotal[0] += num10 - num5;
            i++;
            BodyShortTrailingIdx++;
            BodyLongTrailingIdx++;
            if (i <= endIdx) {
                goto Label_04FF;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlSeperatingLines(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            double num15;
            double num20;
            double num25;
            double num30;
            int num31;
            double num32;
            double num38;
            double num39;
            double num48;
            double num54;
            double num55;
            double num61;
            double num62;
            double num68;
            int num69;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlSeperatingLinesLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double ShadowVeryShortPeriodTotal = 0.0;
            int ShadowVeryShortTrailingIdx = startIdx - Globals.candleSettings[7].avgPeriod;
            double BodyLongPeriodTotal = 0.0;
            int BodyLongTrailingIdx = startIdx - Globals.candleSettings[0].avgPeriod;
            double EqualPeriodTotal = 0.0;
            int EqualTrailingIdx = startIdx - Globals.candleSettings[10].avgPeriod;
            int i = ShadowVeryShortTrailingIdx;
            while (true) {
                double num84;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num84 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num83;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num83 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num80;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num81;
                            double num82;
                            if (inClose[i] >= inOpen[i]) {
                                num82 = inClose[i];
                            }
                            else {
                                num82 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num81 = inOpen[i];
                            }
                            else {
                                num81 = inClose[i];
                            }
                            num80 = (inHigh[i] - num82) + (num81 - inLow[i]);
                        }
                        else {
                            num80 = 0.0;
                        }
                        num83 = num80;
                    }
                    num84 = num83;
                }
                ShadowVeryShortPeriodTotal += num84;
                i++;
            }
            i = BodyLongTrailingIdx;
            while (true) {
                double num79;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num79 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num78;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num78 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num75;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num76;
                            double num77;
                            if (inClose[i] >= inOpen[i]) {
                                num77 = inClose[i];
                            }
                            else {
                                num77 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num76 = inOpen[i];
                            }
                            else {
                                num76 = inClose[i];
                            }
                            num75 = (inHigh[i] - num77) + (num76 - inLow[i]);
                        }
                        else {
                            num75 = 0.0;
                        }
                        num78 = num75;
                    }
                    num79 = num78;
                }
                BodyLongPeriodTotal += num79;
                i++;
            }
            i = EqualTrailingIdx;
            while (true) {
                double num74;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                    num74 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num73;
                    if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                        num73 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num70;
                        if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                            double num71;
                            double num72;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num72 = inClose[i - 1];
                            }
                            else {
                                num72 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num71 = inOpen[i - 1];
                            }
                            else {
                                num71 = inClose[i - 1];
                            }
                            num70 = (inHigh[i - 1] - num72) + (num71 - inLow[i - 1]);
                        }
                        else {
                            num70 = 0.0;
                        }
                        num73 = num70;
                    }
                    num74 = num73;
                }
                EqualPeriodTotal += num74;
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            Label_0338:
            if (inClose[i] >= inOpen[i]) {
                num69 = 1;
            }
            else {
                num69 = -1;
            }
            if (((inClose[i - 1] < inOpen[i - 1]) ? -1 : 1) != -num69) {
                goto Label_0A41;
            }
            if (Globals.candleSettings[10].avgPeriod != 0.0) {
                num68 = EqualPeriodTotal / ((double)Globals.candleSettings[10].avgPeriod);
            }
            else {
                double num67;
                if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                    num67 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num66;
                    if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                        num66 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num63;
                        if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                            double num64;
                            double num65;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num65 = inClose[i - 1];
                            }
                            else {
                                num65 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num64 = inOpen[i - 1];
                            }
                            else {
                                num64 = inClose[i - 1];
                            }
                            num63 = (inHigh[i - 1] - num65) + (num64 - inLow[i - 1]);
                        }
                        else {
                            num63 = 0.0;
                        }
                        num66 = num63;
                    }
                    num67 = num66;
                }
                num68 = num67;
            }
            if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                num62 = 2.0;
            }
            else {
                num62 = 1.0;
            }
            if (inOpen[i] > (inOpen[i - 1] + ((Globals.candleSettings[10].factor * num68) / num62))) {
                goto Label_0A41;
            }
            if (Globals.candleSettings[10].avgPeriod != 0.0) {
                num61 = EqualPeriodTotal / ((double)Globals.candleSettings[10].avgPeriod);
            }
            else {
                double num60;
                if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                    num60 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num59;
                    if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                        num59 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num56;
                        if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                            double num57;
                            double num58;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num58 = inClose[i - 1];
                            }
                            else {
                                num58 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num57 = inOpen[i - 1];
                            }
                            else {
                                num57 = inClose[i - 1];
                            }
                            num56 = (inHigh[i - 1] - num58) + (num57 - inLow[i - 1]);
                        }
                        else {
                            num56 = 0.0;
                        }
                        num59 = num56;
                    }
                    num60 = num59;
                }
                num61 = num60;
            }
            if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                num55 = 2.0;
            }
            else {
                num55 = 1.0;
            }
            if (inOpen[i] < (inOpen[i - 1] - ((Globals.candleSettings[10].factor * num61) / num55))) {
                goto Label_0A41;
            }
            if (Globals.candleSettings[0].avgPeriod != 0.0) {
                num54 = BodyLongPeriodTotal / ((double)Globals.candleSettings[0].avgPeriod);
            }
            else {
                double num53;
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num53 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num52;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num52 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num49;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num50;
                            double num51;
                            if (inClose[i] >= inOpen[i]) {
                                num51 = inClose[i];
                            }
                            else {
                                num51 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num50 = inOpen[i];
                            }
                            else {
                                num50 = inClose[i];
                            }
                            num49 = (inHigh[i] - num51) + (num50 - inLow[i]);
                        }
                        else {
                            num49 = 0.0;
                        }
                        num52 = num49;
                    }
                    num53 = num52;
                }
                num54 = num53;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                num48 = 2.0;
            }
            else {
                num48 = 1.0;
            }
            if (Math.Abs((double)(inClose[i] - inOpen[i])) <= ((Globals.candleSettings[0].factor * num54) / num48)) {
                goto Label_0A41;
            }
            if (inClose[i] >= inOpen[i]) {
                double num40;
                double num46;
                double num47;
                if (inClose[i] >= inOpen[i]) {
                    num47 = inOpen[i];
                }
                else {
                    num47 = inClose[i];
                }
                if (Globals.candleSettings[7].avgPeriod != 0.0) {
                    num46 = ShadowVeryShortPeriodTotal / ((double)Globals.candleSettings[7].avgPeriod);
                }
                else {
                    double num45;
                    if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                        num45 = Math.Abs((double)(inClose[i] - inOpen[i]));
                    }
                    else {
                        double num44;
                        if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                            num44 = inHigh[i] - inLow[i];
                        }
                        else {
                            double num41;
                            if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                double num42;
                                double num43;
                                if (inClose[i] >= inOpen[i]) {
                                    num43 = inClose[i];
                                }
                                else {
                                    num43 = inOpen[i];
                                }
                                if (inClose[i] >= inOpen[i]) {
                                    num42 = inOpen[i];
                                }
                                else {
                                    num42 = inClose[i];
                                }
                                num41 = (inHigh[i] - num43) + (num42 - inLow[i]);
                            }
                            else {
                                num41 = 0.0;
                            }
                            num44 = num41;
                        }
                        num45 = num44;
                    }
                    num46 = num45;
                }
                if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                    num40 = 2.0;
                }
                else {
                    num40 = 1.0;
                }
                if ((num47 - inLow[i]) < ((Globals.candleSettings[7].factor * num46) / num40)) {
                    goto Label_0A1E;
                }
            }
            if (((inClose[i] < inOpen[i]) ? -1 : 1) != -1) {
                goto Label_0A41;
            }
            if (inClose[i] >= inOpen[i]) {
                num39 = inClose[i];
            }
            else {
                num39 = inOpen[i];
            }
            if (Globals.candleSettings[7].avgPeriod != 0.0) {
                num38 = ShadowVeryShortPeriodTotal / ((double)Globals.candleSettings[7].avgPeriod);
            }
            else {
                double num37;
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num37 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num36;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num36 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num33;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num34;
                            double num35;
                            if (inClose[i] >= inOpen[i]) {
                                num35 = inClose[i];
                            }
                            else {
                                num35 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num34 = inOpen[i];
                            }
                            else {
                                num34 = inClose[i];
                            }
                            num33 = (inHigh[i] - num35) + (num34 - inLow[i]);
                        }
                        else {
                            num33 = 0.0;
                        }
                        num36 = num33;
                    }
                    num37 = num36;
                }
                num38 = num37;
            }
            if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                num32 = 2.0;
            }
            else {
                num32 = 1.0;
            }
            if ((inHigh[i] - num39) >= ((Globals.candleSettings[7].factor * num38) / num32)) {
                goto Label_0A41;
            }
            Label_0A1E:
            if (inClose[i] >= inOpen[i]) {
                num31 = 1;
            }
            else {
                num31 = -1;
            }
            outInteger[outIdx] = num31 * 100;
            outIdx++;
            goto Label_0A4D;
            Label_0A41:
            outInteger[outIdx] = 0;
            outIdx++;
            Label_0A4D:
            if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                num30 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num29;
                if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                    num29 = inHigh[i] - inLow[i];
                }
                else {
                    double num26;
                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                        double num27;
                        double num28;
                        if (inClose[i] >= inOpen[i]) {
                            num28 = inClose[i];
                        }
                        else {
                            num28 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num27 = inOpen[i];
                        }
                        else {
                            num27 = inClose[i];
                        }
                        num26 = (inHigh[i] - num28) + (num27 - inLow[i]);
                    }
                    else {
                        num26 = 0.0;
                    }
                    num29 = num26;
                }
                num30 = num29;
            }
            if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                num25 = Math.Abs((double)(inClose[ShadowVeryShortTrailingIdx] - inOpen[ShadowVeryShortTrailingIdx]));
            }
            else {
                double num24;
                if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                    num24 = inHigh[ShadowVeryShortTrailingIdx] - inLow[ShadowVeryShortTrailingIdx];
                }
                else {
                    double num21;
                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                        double num22;
                        double num23;
                        if (inClose[ShadowVeryShortTrailingIdx] >= inOpen[ShadowVeryShortTrailingIdx]) {
                            num23 = inClose[ShadowVeryShortTrailingIdx];
                        }
                        else {
                            num23 = inOpen[ShadowVeryShortTrailingIdx];
                        }
                        if (inClose[ShadowVeryShortTrailingIdx] >= inOpen[ShadowVeryShortTrailingIdx]) {
                            num22 = inOpen[ShadowVeryShortTrailingIdx];
                        }
                        else {
                            num22 = inClose[ShadowVeryShortTrailingIdx];
                        }
                        num21 = (inHigh[ShadowVeryShortTrailingIdx] - num23) + (num22 - inLow[ShadowVeryShortTrailingIdx]);
                    }
                    else {
                        num21 = 0.0;
                    }
                    num24 = num21;
                }
                num25 = num24;
            }
            ShadowVeryShortPeriodTotal += num30 - num25;
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num20 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num19;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num19 = inHigh[i] - inLow[i];
                }
                else {
                    double num16;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num17;
                        double num18;
                        if (inClose[i] >= inOpen[i]) {
                            num18 = inClose[i];
                        }
                        else {
                            num18 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num17 = inOpen[i];
                        }
                        else {
                            num17 = inClose[i];
                        }
                        num16 = (inHigh[i] - num18) + (num17 - inLow[i]);
                    }
                    else {
                        num16 = 0.0;
                    }
                    num19 = num16;
                }
                num20 = num19;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num15 = Math.Abs((double)(inClose[BodyLongTrailingIdx] - inOpen[BodyLongTrailingIdx]));
            }
            else {
                double num14;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num14 = inHigh[BodyLongTrailingIdx] - inLow[BodyLongTrailingIdx];
                }
                else {
                    double num11;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num12;
                        double num13;
                        if (inClose[BodyLongTrailingIdx] >= inOpen[BodyLongTrailingIdx]) {
                            num13 = inClose[BodyLongTrailingIdx];
                        }
                        else {
                            num13 = inOpen[BodyLongTrailingIdx];
                        }
                        if (inClose[BodyLongTrailingIdx] >= inOpen[BodyLongTrailingIdx]) {
                            num12 = inOpen[BodyLongTrailingIdx];
                        }
                        else {
                            num12 = inClose[BodyLongTrailingIdx];
                        }
                        num11 = (inHigh[BodyLongTrailingIdx] - num13) + (num12 - inLow[BodyLongTrailingIdx]);
                    }
                    else {
                        num11 = 0.0;
                    }
                    num14 = num11;
                }
                num15 = num14;
            }
            BodyLongPeriodTotal += num20 - num15;
            if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
            }
            else {
                double num9;
                if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i - 1] - inLow[i - 1];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num8 = inClose[i - 1];
                        }
                        else {
                            num8 = inOpen[i - 1];
                        }
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num7 = inOpen[i - 1];
                        }
                        else {
                            num7 = inClose[i - 1];
                        }
                        num6 = (inHigh[i - 1] - num8) + (num7 - inLow[i - 1]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[EqualTrailingIdx - 1] - inOpen[EqualTrailingIdx - 1]));
            }
            else {
                double num4;
                if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                    num4 = inHigh[EqualTrailingIdx - 1] - inLow[EqualTrailingIdx - 1];
                }
                else {
                    double num;
                    if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[EqualTrailingIdx - 1] >= inOpen[EqualTrailingIdx - 1]) {
                            num3 = inClose[EqualTrailingIdx - 1];
                        }
                        else {
                            num3 = inOpen[EqualTrailingIdx - 1];
                        }
                        if (inClose[EqualTrailingIdx - 1] >= inOpen[EqualTrailingIdx - 1]) {
                            num2 = inOpen[EqualTrailingIdx - 1];
                        }
                        else {
                            num2 = inClose[EqualTrailingIdx - 1];
                        }
                        num = (inHigh[EqualTrailingIdx - 1] - num3) + (num2 - inLow[EqualTrailingIdx - 1]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            EqualPeriodTotal += num10 - num5;
            i++;
            ShadowVeryShortTrailingIdx++;
            BodyLongTrailingIdx++;
            EqualTrailingIdx++;
            if (i <= endIdx) {
                goto Label_0338;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlShootingStar(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            double num15;
            double num20;
            double num25;
            double num30;
            double num49;
            double num55;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlShootingStarLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double BodyPeriodTotal = 0.0;
            int BodyTrailingIdx = startIdx - Globals.candleSettings[2].avgPeriod;
            double ShadowLongPeriodTotal = 0.0;
            int ShadowLongTrailingIdx = startIdx - Globals.candleSettings[4].avgPeriod;
            double ShadowVeryShortPeriodTotal = 0.0;
            int ShadowVeryShortTrailingIdx = startIdx - Globals.candleSettings[7].avgPeriod;
            int i = BodyTrailingIdx;
            while (true) {
                double num70;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                    num70 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num69;
                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                        num69 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num66;
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            double num67;
                            double num68;
                            if (inClose[i] >= inOpen[i]) {
                                num68 = inClose[i];
                            }
                            else {
                                num68 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num67 = inOpen[i];
                            }
                            else {
                                num67 = inClose[i];
                            }
                            num66 = (inHigh[i] - num68) + (num67 - inLow[i]);
                        }
                        else {
                            num66 = 0.0;
                        }
                        num69 = num66;
                    }
                    num70 = num69;
                }
                BodyPeriodTotal += num70;
                i++;
            }
            i = ShadowLongTrailingIdx;
            while (true) {
                double num65;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[4].rangeType == RangeType.RealBody) {
                    num65 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num64;
                    if (Globals.candleSettings[4].rangeType == RangeType.HighLow) {
                        num64 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num61;
                        if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                            double num62;
                            double num63;
                            if (inClose[i] >= inOpen[i]) {
                                num63 = inClose[i];
                            }
                            else {
                                num63 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num62 = inOpen[i];
                            }
                            else {
                                num62 = inClose[i];
                            }
                            num61 = (inHigh[i] - num63) + (num62 - inLow[i]);
                        }
                        else {
                            num61 = 0.0;
                        }
                        num64 = num61;
                    }
                    num65 = num64;
                }
                ShadowLongPeriodTotal += num65;
                i++;
            }
            i = ShadowVeryShortTrailingIdx;
            while (true) {
                double num60;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num60 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num59;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num59 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num56;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num57;
                            double num58;
                            if (inClose[i] >= inOpen[i]) {
                                num58 = inClose[i];
                            }
                            else {
                                num58 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num57 = inOpen[i];
                            }
                            else {
                                num57 = inClose[i];
                            }
                            num56 = (inHigh[i] - num58) + (num57 - inLow[i]);
                        }
                        else {
                            num56 = 0.0;
                        }
                        num59 = num56;
                    }
                    num60 = num59;
                }
                ShadowVeryShortPeriodTotal += num60;
                i++;
            }
            int outIdx = 0;
            Label_0313:
            if (Globals.candleSettings[2].avgPeriod != 0.0) {
                num55 = BodyPeriodTotal / ((double)Globals.candleSettings[2].avgPeriod);
            }
            else {
                double num54;
                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                    num54 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num53;
                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                        num53 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num50;
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            double num51;
                            double num52;
                            if (inClose[i] >= inOpen[i]) {
                                num52 = inClose[i];
                            }
                            else {
                                num52 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num51 = inOpen[i];
                            }
                            else {
                                num51 = inClose[i];
                            }
                            num50 = (inHigh[i] - num52) + (num51 - inLow[i]);
                        }
                        else {
                            num50 = 0.0;
                        }
                        num53 = num50;
                    }
                    num54 = num53;
                }
                num55 = num54;
            }
            if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                num49 = 2.0;
            }
            else {
                num49 = 1.0;
            }
            if (Math.Abs((double)(inClose[i] - inOpen[i])) < ((Globals.candleSettings[2].factor * num55) / num49)) {
                double num41;
                double num47;
                double num48;
                if (inClose[i] >= inOpen[i]) {
                    num48 = inClose[i];
                }
                else {
                    num48 = inOpen[i];
                }
                if (Globals.candleSettings[4].avgPeriod != 0.0) {
                    num47 = ShadowLongPeriodTotal / ((double)Globals.candleSettings[4].avgPeriod);
                }
                else {
                    double num46;
                    if (Globals.candleSettings[4].rangeType == RangeType.RealBody) {
                        num46 = Math.Abs((double)(inClose[i] - inOpen[i]));
                    }
                    else {
                        double num45;
                        if (Globals.candleSettings[4].rangeType == RangeType.HighLow) {
                            num45 = inHigh[i] - inLow[i];
                        }
                        else {
                            double num42;
                            if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                                double num43;
                                double num44;
                                if (inClose[i] >= inOpen[i]) {
                                    num44 = inClose[i];
                                }
                                else {
                                    num44 = inOpen[i];
                                }
                                if (inClose[i] >= inOpen[i]) {
                                    num43 = inOpen[i];
                                }
                                else {
                                    num43 = inClose[i];
                                }
                                num42 = (inHigh[i] - num44) + (num43 - inLow[i]);
                            }
                            else {
                                num42 = 0.0;
                            }
                            num45 = num42;
                        }
                        num46 = num45;
                    }
                    num47 = num46;
                }
                if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                    num41 = 2.0;
                }
                else {
                    num41 = 1.0;
                }
                if ((inHigh[i] - num48) > ((Globals.candleSettings[4].factor * num47) / num41)) {
                    double num33;
                    double num39;
                    double num40;
                    if (inClose[i] >= inOpen[i]) {
                        num40 = inOpen[i];
                    }
                    else {
                        num40 = inClose[i];
                    }
                    if (Globals.candleSettings[7].avgPeriod != 0.0) {
                        num39 = ShadowVeryShortPeriodTotal / ((double)Globals.candleSettings[7].avgPeriod);
                    }
                    else {
                        double num38;
                        if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                            num38 = Math.Abs((double)(inClose[i] - inOpen[i]));
                        }
                        else {
                            double num37;
                            if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                                num37 = inHigh[i] - inLow[i];
                            }
                            else {
                                double num34;
                                if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                    double num35;
                                    double num36;
                                    if (inClose[i] >= inOpen[i]) {
                                        num36 = inClose[i];
                                    }
                                    else {
                                        num36 = inOpen[i];
                                    }
                                    if (inClose[i] >= inOpen[i]) {
                                        num35 = inOpen[i];
                                    }
                                    else {
                                        num35 = inClose[i];
                                    }
                                    num34 = (inHigh[i] - num36) + (num35 - inLow[i]);
                                }
                                else {
                                    num34 = 0.0;
                                }
                                num37 = num34;
                            }
                            num38 = num37;
                        }
                        num39 = num38;
                    }
                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                        num33 = 2.0;
                    }
                    else {
                        num33 = 1.0;
                    }
                    if ((num40 - inLow[i]) < ((Globals.candleSettings[7].factor * num39) / num33)) {
                        double num31;
                        double num32;
                        if (inOpen[i] < inClose[i]) {
                            num32 = inOpen[i];
                        }
                        else {
                            num32 = inClose[i];
                        }
                        if (inOpen[i - 1] > inClose[i - 1]) {
                            num31 = inOpen[i - 1];
                        }
                        else {
                            num31 = inClose[i - 1];
                        }
                        if (num32 > num31) {
                            outInteger[outIdx] = -100;
                            outIdx++;
                            goto Label_073E;
                        }
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_073E:
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num30 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num29;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num29 = inHigh[i] - inLow[i];
                }
                else {
                    double num26;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num27;
                        double num28;
                        if (inClose[i] >= inOpen[i]) {
                            num28 = inClose[i];
                        }
                        else {
                            num28 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num27 = inOpen[i];
                        }
                        else {
                            num27 = inClose[i];
                        }
                        num26 = (inHigh[i] - num28) + (num27 - inLow[i]);
                    }
                    else {
                        num26 = 0.0;
                    }
                    num29 = num26;
                }
                num30 = num29;
            }
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num25 = Math.Abs((double)(inClose[BodyTrailingIdx] - inOpen[BodyTrailingIdx]));
            }
            else {
                double num24;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num24 = inHigh[BodyTrailingIdx] - inLow[BodyTrailingIdx];
                }
                else {
                    double num21;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num22;
                        double num23;
                        if (inClose[BodyTrailingIdx] >= inOpen[BodyTrailingIdx]) {
                            num23 = inClose[BodyTrailingIdx];
                        }
                        else {
                            num23 = inOpen[BodyTrailingIdx];
                        }
                        if (inClose[BodyTrailingIdx] >= inOpen[BodyTrailingIdx]) {
                            num22 = inOpen[BodyTrailingIdx];
                        }
                        else {
                            num22 = inClose[BodyTrailingIdx];
                        }
                        num21 = (inHigh[BodyTrailingIdx] - num23) + (num22 - inLow[BodyTrailingIdx]);
                    }
                    else {
                        num21 = 0.0;
                    }
                    num24 = num21;
                }
                num25 = num24;
            }
            BodyPeriodTotal += num30 - num25;
            if (Globals.candleSettings[4].rangeType == RangeType.RealBody) {
                num20 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num19;
                if (Globals.candleSettings[4].rangeType == RangeType.HighLow) {
                    num19 = inHigh[i] - inLow[i];
                }
                else {
                    double num16;
                    if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                        double num17;
                        double num18;
                        if (inClose[i] >= inOpen[i]) {
                            num18 = inClose[i];
                        }
                        else {
                            num18 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num17 = inOpen[i];
                        }
                        else {
                            num17 = inClose[i];
                        }
                        num16 = (inHigh[i] - num18) + (num17 - inLow[i]);
                    }
                    else {
                        num16 = 0.0;
                    }
                    num19 = num16;
                }
                num20 = num19;
            }
            if (Globals.candleSettings[4].rangeType == RangeType.RealBody) {
                num15 = Math.Abs((double)(inClose[ShadowLongTrailingIdx] - inOpen[ShadowLongTrailingIdx]));
            }
            else {
                double num14;
                if (Globals.candleSettings[4].rangeType == RangeType.HighLow) {
                    num14 = inHigh[ShadowLongTrailingIdx] - inLow[ShadowLongTrailingIdx];
                }
                else {
                    double num11;
                    if (Globals.candleSettings[4].rangeType == RangeType.Shadows) {
                        double num12;
                        double num13;
                        if (inClose[ShadowLongTrailingIdx] >= inOpen[ShadowLongTrailingIdx]) {
                            num13 = inClose[ShadowLongTrailingIdx];
                        }
                        else {
                            num13 = inOpen[ShadowLongTrailingIdx];
                        }
                        if (inClose[ShadowLongTrailingIdx] >= inOpen[ShadowLongTrailingIdx]) {
                            num12 = inOpen[ShadowLongTrailingIdx];
                        }
                        else {
                            num12 = inClose[ShadowLongTrailingIdx];
                        }
                        num11 = (inHigh[ShadowLongTrailingIdx] - num13) + (num12 - inLow[ShadowLongTrailingIdx]);
                    }
                    else {
                        num11 = 0.0;
                    }
                    num14 = num11;
                }
                num15 = num14;
            }
            ShadowLongPeriodTotal += num20 - num15;
            if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num9;
                if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i] - inLow[i];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i] >= inOpen[i]) {
                            num8 = inClose[i];
                        }
                        else {
                            num8 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num7 = inOpen[i];
                        }
                        else {
                            num7 = inClose[i];
                        }
                        num6 = (inHigh[i] - num8) + (num7 - inLow[i]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[ShadowVeryShortTrailingIdx] - inOpen[ShadowVeryShortTrailingIdx]));
            }
            else {
                double num4;
                if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                    num4 = inHigh[ShadowVeryShortTrailingIdx] - inLow[ShadowVeryShortTrailingIdx];
                }
                else {
                    double num;
                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[ShadowVeryShortTrailingIdx] >= inOpen[ShadowVeryShortTrailingIdx]) {
                            num3 = inClose[ShadowVeryShortTrailingIdx];
                        }
                        else {
                            num3 = inOpen[ShadowVeryShortTrailingIdx];
                        }
                        if (inClose[ShadowVeryShortTrailingIdx] >= inOpen[ShadowVeryShortTrailingIdx]) {
                            num2 = inOpen[ShadowVeryShortTrailingIdx];
                        }
                        else {
                            num2 = inClose[ShadowVeryShortTrailingIdx];
                        }
                        num = (inHigh[ShadowVeryShortTrailingIdx] - num3) + (num2 - inLow[ShadowVeryShortTrailingIdx]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            ShadowVeryShortPeriodTotal += num10 - num5;
            i++;
            BodyTrailingIdx++;
            ShadowLongTrailingIdx++;
            ShadowVeryShortTrailingIdx++;
            if (i <= endIdx) {
                goto Label_0313;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlShortLine(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            double num15;
            double num20;
            double num38;
            double num44;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlShortLineLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double BodyPeriodTotal = 0.0;
            int BodyTrailingIdx = startIdx - Globals.candleSettings[2].avgPeriod;
            double ShadowPeriodTotal = 0.0;
            int ShadowTrailingIdx = startIdx - Globals.candleSettings[6].avgPeriod;
            int i = BodyTrailingIdx;
            while (true) {
                double num54;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                    num54 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num53;
                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                        num53 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num50;
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            double num51;
                            double num52;
                            if (inClose[i] >= inOpen[i]) {
                                num52 = inClose[i];
                            }
                            else {
                                num52 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num51 = inOpen[i];
                            }
                            else {
                                num51 = inClose[i];
                            }
                            num50 = (inHigh[i] - num52) + (num51 - inLow[i]);
                        }
                        else {
                            num50 = 0.0;
                        }
                        num53 = num50;
                    }
                    num54 = num53;
                }
                BodyPeriodTotal += num54;
                i++;
            }
            i = ShadowTrailingIdx;
            while (true) {
                double num49;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[6].rangeType == RangeType.RealBody) {
                    num49 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num48;
                    if (Globals.candleSettings[6].rangeType == RangeType.HighLow) {
                        num48 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num45;
                        if (Globals.candleSettings[6].rangeType == RangeType.Shadows) {
                            double num46;
                            double num47;
                            if (inClose[i] >= inOpen[i]) {
                                num47 = inClose[i];
                            }
                            else {
                                num47 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num46 = inOpen[i];
                            }
                            else {
                                num46 = inClose[i];
                            }
                            num45 = (inHigh[i] - num47) + (num46 - inLow[i]);
                        }
                        else {
                            num45 = 0.0;
                        }
                        num48 = num45;
                    }
                    num49 = num48;
                }
                ShadowPeriodTotal += num49;
                i++;
            }
            int outIdx = 0;
            Label_022E:
            if (Globals.candleSettings[2].avgPeriod != 0.0) {
                num44 = BodyPeriodTotal / ((double)Globals.candleSettings[2].avgPeriod);
            }
            else {
                double num43;
                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                    num43 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num42;
                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                        num42 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num39;
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            double num40;
                            double num41;
                            if (inClose[i] >= inOpen[i]) {
                                num41 = inClose[i];
                            }
                            else {
                                num41 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num40 = inOpen[i];
                            }
                            else {
                                num40 = inClose[i];
                            }
                            num39 = (inHigh[i] - num41) + (num40 - inLow[i]);
                        }
                        else {
                            num39 = 0.0;
                        }
                        num42 = num39;
                    }
                    num43 = num42;
                }
                num44 = num43;
            }
            if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                num38 = 2.0;
            }
            else {
                num38 = 1.0;
            }
            if (Math.Abs((double)(inClose[i] - inOpen[i])) < ((Globals.candleSettings[2].factor * num44) / num38)) {
                double num30;
                double num36;
                double num37;
                if (inClose[i] >= inOpen[i]) {
                    num37 = inClose[i];
                }
                else {
                    num37 = inOpen[i];
                }
                if (Globals.candleSettings[6].avgPeriod != 0.0) {
                    num36 = ShadowPeriodTotal / ((double)Globals.candleSettings[6].avgPeriod);
                }
                else {
                    double num35;
                    if (Globals.candleSettings[6].rangeType == RangeType.RealBody) {
                        num35 = Math.Abs((double)(inClose[i] - inOpen[i]));
                    }
                    else {
                        double num34;
                        if (Globals.candleSettings[6].rangeType == RangeType.HighLow) {
                            num34 = inHigh[i] - inLow[i];
                        }
                        else {
                            double num31;
                            if (Globals.candleSettings[6].rangeType == RangeType.Shadows) {
                                double num32;
                                double num33;
                                if (inClose[i] >= inOpen[i]) {
                                    num33 = inClose[i];
                                }
                                else {
                                    num33 = inOpen[i];
                                }
                                if (inClose[i] >= inOpen[i]) {
                                    num32 = inOpen[i];
                                }
                                else {
                                    num32 = inClose[i];
                                }
                                num31 = (inHigh[i] - num33) + (num32 - inLow[i]);
                            }
                            else {
                                num31 = 0.0;
                            }
                            num34 = num31;
                        }
                        num35 = num34;
                    }
                    num36 = num35;
                }
                if (Globals.candleSettings[6].rangeType == RangeType.Shadows) {
                    num30 = 2.0;
                }
                else {
                    num30 = 1.0;
                }
                if ((inHigh[i] - num37) < ((Globals.candleSettings[6].factor * num36) / num30)) {
                    double num22;
                    double num28;
                    double num29;
                    if (inClose[i] >= inOpen[i]) {
                        num29 = inOpen[i];
                    }
                    else {
                        num29 = inClose[i];
                    }
                    if (Globals.candleSettings[6].avgPeriod != 0.0) {
                        num28 = ShadowPeriodTotal / ((double)Globals.candleSettings[6].avgPeriod);
                    }
                    else {
                        double num27;
                        if (Globals.candleSettings[6].rangeType == RangeType.RealBody) {
                            num27 = Math.Abs((double)(inClose[i] - inOpen[i]));
                        }
                        else {
                            double num26;
                            if (Globals.candleSettings[6].rangeType == RangeType.HighLow) {
                                num26 = inHigh[i] - inLow[i];
                            }
                            else {
                                double num23;
                                if (Globals.candleSettings[6].rangeType == RangeType.Shadows) {
                                    double num24;
                                    double num25;
                                    if (inClose[i] >= inOpen[i]) {
                                        num25 = inClose[i];
                                    }
                                    else {
                                        num25 = inOpen[i];
                                    }
                                    if (inClose[i] >= inOpen[i]) {
                                        num24 = inOpen[i];
                                    }
                                    else {
                                        num24 = inClose[i];
                                    }
                                    num23 = (inHigh[i] - num25) + (num24 - inLow[i]);
                                }
                                else {
                                    num23 = 0.0;
                                }
                                num26 = num23;
                            }
                            num27 = num26;
                        }
                        num28 = num27;
                    }
                    if (Globals.candleSettings[6].rangeType == RangeType.Shadows) {
                        num22 = 2.0;
                    }
                    else {
                        num22 = 1.0;
                    }
                    if ((num29 - inLow[i]) < ((Globals.candleSettings[6].factor * num28) / num22)) {
                        int num21;
                        if (inClose[i] >= inOpen[i]) {
                            num21 = 1;
                        }
                        else {
                            num21 = -1;
                        }
                        outInteger[outIdx] = num21 * 100;
                        outIdx++;
                        goto Label_062D;
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_062D:
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num20 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num19;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num19 = inHigh[i] - inLow[i];
                }
                else {
                    double num16;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num17;
                        double num18;
                        if (inClose[i] >= inOpen[i]) {
                            num18 = inClose[i];
                        }
                        else {
                            num18 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num17 = inOpen[i];
                        }
                        else {
                            num17 = inClose[i];
                        }
                        num16 = (inHigh[i] - num18) + (num17 - inLow[i]);
                    }
                    else {
                        num16 = 0.0;
                    }
                    num19 = num16;
                }
                num20 = num19;
            }
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num15 = Math.Abs((double)(inClose[BodyTrailingIdx] - inOpen[BodyTrailingIdx]));
            }
            else {
                double num14;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num14 = inHigh[BodyTrailingIdx] - inLow[BodyTrailingIdx];
                }
                else {
                    double num11;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num12;
                        double num13;
                        if (inClose[BodyTrailingIdx] >= inOpen[BodyTrailingIdx]) {
                            num13 = inClose[BodyTrailingIdx];
                        }
                        else {
                            num13 = inOpen[BodyTrailingIdx];
                        }
                        if (inClose[BodyTrailingIdx] >= inOpen[BodyTrailingIdx]) {
                            num12 = inOpen[BodyTrailingIdx];
                        }
                        else {
                            num12 = inClose[BodyTrailingIdx];
                        }
                        num11 = (inHigh[BodyTrailingIdx] - num13) + (num12 - inLow[BodyTrailingIdx]);
                    }
                    else {
                        num11 = 0.0;
                    }
                    num14 = num11;
                }
                num15 = num14;
            }
            BodyPeriodTotal += num20 - num15;
            if (Globals.candleSettings[6].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num9;
                if (Globals.candleSettings[6].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i] - inLow[i];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[6].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i] >= inOpen[i]) {
                            num8 = inClose[i];
                        }
                        else {
                            num8 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num7 = inOpen[i];
                        }
                        else {
                            num7 = inClose[i];
                        }
                        num6 = (inHigh[i] - num8) + (num7 - inLow[i]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[6].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[ShadowTrailingIdx] - inOpen[ShadowTrailingIdx]));
            }
            else {
                double num4;
                if (Globals.candleSettings[6].rangeType == RangeType.HighLow) {
                    num4 = inHigh[ShadowTrailingIdx] - inLow[ShadowTrailingIdx];
                }
                else {
                    double num;
                    if (Globals.candleSettings[6].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[ShadowTrailingIdx] >= inOpen[ShadowTrailingIdx]) {
                            num3 = inClose[ShadowTrailingIdx];
                        }
                        else {
                            num3 = inOpen[ShadowTrailingIdx];
                        }
                        if (inClose[ShadowTrailingIdx] >= inOpen[ShadowTrailingIdx]) {
                            num2 = inOpen[ShadowTrailingIdx];
                        }
                        else {
                            num2 = inClose[ShadowTrailingIdx];
                        }
                        num = (inHigh[ShadowTrailingIdx] - num3) + (num2 - inLow[ShadowTrailingIdx]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            ShadowPeriodTotal += num10 - num5;
            i++;
            BodyTrailingIdx++;
            ShadowTrailingIdx++;
            if (i <= endIdx) {
                goto Label_022E;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlSpinningTop(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            double num14;
            double num20;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlSpinningTopLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double BodyPeriodTotal = 0.0;
            int BodyTrailingIdx = startIdx - Globals.candleSettings[2].avgPeriod;
            int i = BodyTrailingIdx;
            while (true) {
                double num25;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                    num25 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num24;
                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                        num24 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num21;
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            double num22;
                            double num23;
                            if (inClose[i] >= inOpen[i]) {
                                num23 = inClose[i];
                            }
                            else {
                                num23 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num22 = inOpen[i];
                            }
                            else {
                                num22 = inClose[i];
                            }
                            num21 = (inHigh[i] - num23) + (num22 - inLow[i]);
                        }
                        else {
                            num21 = 0.0;
                        }
                        num24 = num21;
                    }
                    num25 = num24;
                }
                BodyPeriodTotal += num25;
                i++;
            }
            int outIdx = 0;
            Label_0147:
            if (Globals.candleSettings[2].avgPeriod != 0.0) {
                num20 = BodyPeriodTotal / ((double)Globals.candleSettings[2].avgPeriod);
            }
            else {
                double num19;
                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                    num19 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num18;
                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                        num18 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num15;
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            double num16;
                            double num17;
                            if (inClose[i] >= inOpen[i]) {
                                num17 = inClose[i];
                            }
                            else {
                                num17 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num16 = inOpen[i];
                            }
                            else {
                                num16 = inClose[i];
                            }
                            num15 = (inHigh[i] - num17) + (num16 - inLow[i]);
                        }
                        else {
                            num15 = 0.0;
                        }
                        num18 = num15;
                    }
                    num19 = num18;
                }
                num20 = num19;
            }
            if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                num14 = 2.0;
            }
            else {
                num14 = 1.0;
            }
            if (Math.Abs((double)(inClose[i] - inOpen[i])) < ((Globals.candleSettings[2].factor * num20) / num14)) {
                double num13;
                if (inClose[i] >= inOpen[i]) {
                    num13 = inClose[i];
                }
                else {
                    num13 = inOpen[i];
                }
                if ((inHigh[i] - num13) > Math.Abs((double)(inClose[i] - inOpen[i]))) {
                    double num12;
                    if (inClose[i] >= inOpen[i]) {
                        num12 = inOpen[i];
                    }
                    else {
                        num12 = inClose[i];
                    }
                    if ((num12 - inLow[i]) > Math.Abs((double)(inClose[i] - inOpen[i]))) {
                        int num11;
                        if (inClose[i] >= inOpen[i]) {
                            num11 = 1;
                        }
                        else {
                            num11 = -1;
                        }
                        outInteger[outIdx] = num11 * 100;
                        outIdx++;
                        goto Label_0304;
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_0304:
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num9;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i] - inLow[i];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i] >= inOpen[i]) {
                            num8 = inClose[i];
                        }
                        else {
                            num8 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num7 = inOpen[i];
                        }
                        else {
                            num7 = inClose[i];
                        }
                        num6 = (inHigh[i] - num8) + (num7 - inLow[i]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[BodyTrailingIdx] - inOpen[BodyTrailingIdx]));
            }
            else {
                double num4;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num4 = inHigh[BodyTrailingIdx] - inLow[BodyTrailingIdx];
                }
                else {
                    double num;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[BodyTrailingIdx] >= inOpen[BodyTrailingIdx]) {
                            num3 = inClose[BodyTrailingIdx];
                        }
                        else {
                            num3 = inOpen[BodyTrailingIdx];
                        }
                        if (inClose[BodyTrailingIdx] >= inOpen[BodyTrailingIdx]) {
                            num2 = inOpen[BodyTrailingIdx];
                        }
                        else {
                            num2 = inClose[BodyTrailingIdx];
                        }
                        num = (inHigh[BodyTrailingIdx] - num3) + (num2 - inLow[BodyTrailingIdx]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            BodyPeriodTotal += num10 - num5;
            i++;
            BodyTrailingIdx++;
            if (i <= endIdx) {
                goto Label_0147;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlStalledPattern(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            int totIdx;
            double num5;
            double num10;
            double num15;
            double num20;
            double[] BodyLongPeriodTotal = new double[3];
            double[] NearPeriodTotal = new double[3];
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlStalledPatternLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            BodyLongPeriodTotal[2] = 0.0;
            BodyLongPeriodTotal[1] = 0.0;
            BodyLongPeriodTotal[0] = 0.0;
            int BodyLongTrailingIdx = startIdx - Globals.candleSettings[0].avgPeriod;
            double BodyShortPeriodTotal = 0.0;
            int BodyShortTrailingIdx = startIdx - Globals.candleSettings[2].avgPeriod;
            double ShadowVeryShortPeriodTotal = 0.0;
            int ShadowVeryShortTrailingIdx = startIdx - Globals.candleSettings[7].avgPeriod;
            NearPeriodTotal[2] = 0.0;
            NearPeriodTotal[1] = 0.0;
            NearPeriodTotal[0] = 0.0;
            int NearTrailingIdx = startIdx - Globals.candleSettings[8].avgPeriod;
            int i = BodyLongTrailingIdx;
            while (true) {
                double num108;
                double num113;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num113 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                }
                else {
                    double num112;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num112 = inHigh[i - 2] - inLow[i - 2];
                    }
                    else {
                        double num109;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num110;
                            double num111;
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num111 = inClose[i - 2];
                            }
                            else {
                                num111 = inOpen[i - 2];
                            }
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num110 = inOpen[i - 2];
                            }
                            else {
                                num110 = inClose[i - 2];
                            }
                            num109 = (inHigh[i - 2] - num111) + (num110 - inLow[i - 2]);
                        }
                        else {
                            num109 = 0.0;
                        }
                        num112 = num109;
                    }
                    num113 = num112;
                }
                BodyLongPeriodTotal[2] += num113;
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num108 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num107;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num107 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num104;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num105;
                            double num106;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num106 = inClose[i - 1];
                            }
                            else {
                                num106 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num105 = inOpen[i - 1];
                            }
                            else {
                                num105 = inClose[i - 1];
                            }
                            num104 = (inHigh[i - 1] - num106) + (num105 - inLow[i - 1]);
                        }
                        else {
                            num104 = 0.0;
                        }
                        num107 = num104;
                    }
                    num108 = num107;
                }
                BodyLongPeriodTotal[1] += num108;
                i++;
            }
            i = BodyShortTrailingIdx;
            while (true) {
                double num103;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                    num103 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num102;
                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                        num102 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num99;
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            double num100;
                            double num101;
                            if (inClose[i] >= inOpen[i]) {
                                num101 = inClose[i];
                            }
                            else {
                                num101 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num100 = inOpen[i];
                            }
                            else {
                                num100 = inClose[i];
                            }
                            num99 = (inHigh[i] - num101) + (num100 - inLow[i]);
                        }
                        else {
                            num99 = 0.0;
                        }
                        num102 = num99;
                    }
                    num103 = num102;
                }
                BodyShortPeriodTotal += num103;
                i++;
            }
            i = ShadowVeryShortTrailingIdx;
            while (true) {
                double num98;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num98 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num97;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num97 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num94;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num95;
                            double num96;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num96 = inClose[i - 1];
                            }
                            else {
                                num96 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num95 = inOpen[i - 1];
                            }
                            else {
                                num95 = inClose[i - 1];
                            }
                            num94 = (inHigh[i - 1] - num96) + (num95 - inLow[i - 1]);
                        }
                        else {
                            num94 = 0.0;
                        }
                        num97 = num94;
                    }
                    num98 = num97;
                }
                ShadowVeryShortPeriodTotal += num98;
                i++;
            }
            i = NearTrailingIdx;
            while (true) {
                double num88;
                double num93;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                    num93 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                }
                else {
                    double num92;
                    if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                        num92 = inHigh[i - 2] - inLow[i - 2];
                    }
                    else {
                        double num89;
                        if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                            double num90;
                            double num91;
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num91 = inClose[i - 2];
                            }
                            else {
                                num91 = inOpen[i - 2];
                            }
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num90 = inOpen[i - 2];
                            }
                            else {
                                num90 = inClose[i - 2];
                            }
                            num89 = (inHigh[i - 2] - num91) + (num90 - inLow[i - 2]);
                        }
                        else {
                            num89 = 0.0;
                        }
                        num92 = num89;
                    }
                    num93 = num92;
                }
                NearPeriodTotal[2] += num93;
                if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                    num88 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num87;
                    if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                        num87 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num84;
                        if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                            double num85;
                            double num86;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num86 = inClose[i - 1];
                            }
                            else {
                                num86 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num85 = inOpen[i - 1];
                            }
                            else {
                                num85 = inClose[i - 1];
                            }
                            num84 = (inHigh[i - 1] - num86) + (num85 - inLow[i - 1]);
                        }
                        else {
                            num84 = 0.0;
                        }
                        num87 = num84;
                    }
                    num88 = num87;
                }
                NearPeriodTotal[1] += num88;
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            Label_0656:
            if ((((inClose[i - 2] >= inOpen[i - 2]) && (inClose[i - 1] >= inOpen[i - 1])) && (inClose[i] >= inOpen[i])) && ((inClose[i] > inClose[i - 1]) && (inClose[i - 1] > inClose[i - 2]))) {
                double num77;
                double num83;
                if (Globals.candleSettings[0].avgPeriod != 0.0) {
                    num83 = BodyLongPeriodTotal[2] / ((double)Globals.candleSettings[0].avgPeriod);
                }
                else {
                    double num82;
                    if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                        num82 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                    }
                    else {
                        double num81;
                        if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                            num81 = inHigh[i - 2] - inLow[i - 2];
                        }
                        else {
                            double num78;
                            if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                                double num79;
                                double num80;
                                if (inClose[i - 2] >= inOpen[i - 2]) {
                                    num80 = inClose[i - 2];
                                }
                                else {
                                    num80 = inOpen[i - 2];
                                }
                                if (inClose[i - 2] >= inOpen[i - 2]) {
                                    num79 = inOpen[i - 2];
                                }
                                else {
                                    num79 = inClose[i - 2];
                                }
                                num78 = (inHigh[i - 2] - num80) + (num79 - inLow[i - 2]);
                            }
                            else {
                                num78 = 0.0;
                            }
                            num81 = num78;
                        }
                        num82 = num81;
                    }
                    num83 = num82;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                    num77 = 2.0;
                }
                else {
                    num77 = 1.0;
                }
                if (Math.Abs((double)(inClose[i - 2] - inOpen[i - 2])) > ((Globals.candleSettings[0].factor * num83) / num77)) {
                    double num70;
                    double num76;
                    if (Globals.candleSettings[0].avgPeriod != 0.0) {
                        num76 = BodyLongPeriodTotal[1] / ((double)Globals.candleSettings[0].avgPeriod);
                    }
                    else {
                        double num75;
                        if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                            num75 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                        }
                        else {
                            double num74;
                            if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                                num74 = inHigh[i - 1] - inLow[i - 1];
                            }
                            else {
                                double num71;
                                if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                                    double num72;
                                    double num73;
                                    if (inClose[i - 1] >= inOpen[i - 1]) {
                                        num73 = inClose[i - 1];
                                    }
                                    else {
                                        num73 = inOpen[i - 1];
                                    }
                                    if (inClose[i - 1] >= inOpen[i - 1]) {
                                        num72 = inOpen[i - 1];
                                    }
                                    else {
                                        num72 = inClose[i - 1];
                                    }
                                    num71 = (inHigh[i - 1] - num73) + (num72 - inLow[i - 1]);
                                }
                                else {
                                    num71 = 0.0;
                                }
                                num74 = num71;
                            }
                            num75 = num74;
                        }
                        num76 = num75;
                    }
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        num70 = 2.0;
                    }
                    else {
                        num70 = 1.0;
                    }
                    if (Math.Abs((double)(inClose[i - 1] - inOpen[i - 1])) > ((Globals.candleSettings[0].factor * num76) / num70)) {
                        double num62;
                        double num68;
                        double num69;
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num69 = inClose[i - 1];
                        }
                        else {
                            num69 = inOpen[i - 1];
                        }
                        if (Globals.candleSettings[7].avgPeriod != 0.0) {
                            num68 = ShadowVeryShortPeriodTotal / ((double)Globals.candleSettings[7].avgPeriod);
                        }
                        else {
                            double num67;
                            if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                                num67 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                            }
                            else {
                                double num66;
                                if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                                    num66 = inHigh[i - 1] - inLow[i - 1];
                                }
                                else {
                                    double num63;
                                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                        double num64;
                                        double num65;
                                        if (inClose[i - 1] >= inOpen[i - 1]) {
                                            num65 = inClose[i - 1];
                                        }
                                        else {
                                            num65 = inOpen[i - 1];
                                        }
                                        if (inClose[i - 1] >= inOpen[i - 1]) {
                                            num64 = inOpen[i - 1];
                                        }
                                        else {
                                            num64 = inClose[i - 1];
                                        }
                                        num63 = (inHigh[i - 1] - num65) + (num64 - inLow[i - 1]);
                                    }
                                    else {
                                        num63 = 0.0;
                                    }
                                    num66 = num63;
                                }
                                num67 = num66;
                            }
                            num68 = num67;
                        }
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            num62 = 2.0;
                        }
                        else {
                            num62 = 1.0;
                        }
                        if (((inHigh[i - 1] - num69) < ((Globals.candleSettings[7].factor * num68) / num62)) && (inOpen[i - 1] > inOpen[i - 2])) {
                            double num55;
                            double num61;
                            if (Globals.candleSettings[8].avgPeriod != 0.0) {
                                num61 = NearPeriodTotal[2] / ((double)Globals.candleSettings[8].avgPeriod);
                            }
                            else {
                                double num60;
                                if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                                    num60 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                                }
                                else {
                                    double num59;
                                    if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                                        num59 = inHigh[i - 2] - inLow[i - 2];
                                    }
                                    else {
                                        double num56;
                                        if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                                            double num57;
                                            double num58;
                                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                                num58 = inClose[i - 2];
                                            }
                                            else {
                                                num58 = inOpen[i - 2];
                                            }
                                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                                num57 = inOpen[i - 2];
                                            }
                                            else {
                                                num57 = inClose[i - 2];
                                            }
                                            num56 = (inHigh[i - 2] - num58) + (num57 - inLow[i - 2]);
                                        }
                                        else {
                                            num56 = 0.0;
                                        }
                                        num59 = num56;
                                    }
                                    num60 = num59;
                                }
                                num61 = num60;
                            }
                            if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                                num55 = 2.0;
                            }
                            else {
                                num55 = 1.0;
                            }
                            if (inOpen[i - 1] <= (inClose[i - 2] + ((Globals.candleSettings[8].factor * num61) / num55))) {
                                double num48;
                                double num54;
                                if (Globals.candleSettings[2].avgPeriod != 0.0) {
                                    num54 = BodyShortPeriodTotal / ((double)Globals.candleSettings[2].avgPeriod);
                                }
                                else {
                                    double num53;
                                    if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                                        num53 = Math.Abs((double)(inClose[i] - inOpen[i]));
                                    }
                                    else {
                                        double num52;
                                        if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                                            num52 = inHigh[i] - inLow[i];
                                        }
                                        else {
                                            double num49;
                                            if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                                                double num50;
                                                double num51;
                                                if (inClose[i] >= inOpen[i]) {
                                                    num51 = inClose[i];
                                                }
                                                else {
                                                    num51 = inOpen[i];
                                                }
                                                if (inClose[i] >= inOpen[i]) {
                                                    num50 = inOpen[i];
                                                }
                                                else {
                                                    num50 = inClose[i];
                                                }
                                                num49 = (inHigh[i] - num51) + (num50 - inLow[i]);
                                            }
                                            else {
                                                num49 = 0.0;
                                            }
                                            num52 = num49;
                                        }
                                        num53 = num52;
                                    }
                                    num54 = num53;
                                }
                                if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                                    num48 = 2.0;
                                }
                                else {
                                    num48 = 1.0;
                                }
                                if (Math.Abs((double)(inClose[i] - inOpen[i])) < ((Globals.candleSettings[2].factor * num54) / num48)) {
                                    double num41;
                                    double num47;
                                    if (Globals.candleSettings[8].avgPeriod != 0.0) {
                                        num47 = NearPeriodTotal[1] / ((double)Globals.candleSettings[8].avgPeriod);
                                    }
                                    else {
                                        double num46;
                                        if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                                            num46 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                                        }
                                        else {
                                            double num45;
                                            if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                                                num45 = inHigh[i - 1] - inLow[i - 1];
                                            }
                                            else {
                                                double num42;
                                                if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                                                    double num43;
                                                    double num44;
                                                    if (inClose[i - 1] >= inOpen[i - 1]) {
                                                        num44 = inClose[i - 1];
                                                    }
                                                    else {
                                                        num44 = inOpen[i - 1];
                                                    }
                                                    if (inClose[i - 1] >= inOpen[i - 1]) {
                                                        num43 = inOpen[i - 1];
                                                    }
                                                    else {
                                                        num43 = inClose[i - 1];
                                                    }
                                                    num42 = (inHigh[i - 1] - num44) + (num43 - inLow[i - 1]);
                                                }
                                                else {
                                                    num42 = 0.0;
                                                }
                                                num45 = num42;
                                            }
                                            num46 = num45;
                                        }
                                        num47 = num46;
                                    }
                                    if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                                        num41 = 2.0;
                                    }
                                    else {
                                        num41 = 1.0;
                                    }
                                    if (inOpen[i] >= ((inClose[i - 1] - Math.Abs((double)(inClose[i] - inOpen[i]))) - ((Globals.candleSettings[8].factor * num47) / num41))) {
                                        outInteger[outIdx] = -100;
                                        outIdx++;
                                        goto Label_0F20;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_0F20:
            totIdx = 2;
            while (totIdx >= 1) {
                double num25;
                double num30;
                double num35;
                double num40;
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num40 = Math.Abs((double)(inClose[i - totIdx] - inOpen[i - totIdx]));
                }
                else {
                    double num39;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num39 = inHigh[i - totIdx] - inLow[i - totIdx];
                    }
                    else {
                        double num36;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num37;
                            double num38;
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num38 = inClose[i - totIdx];
                            }
                            else {
                                num38 = inOpen[i - totIdx];
                            }
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num37 = inOpen[i - totIdx];
                            }
                            else {
                                num37 = inClose[i - totIdx];
                            }
                            num36 = (inHigh[i - totIdx] - num38) + (num37 - inLow[i - totIdx]);
                        }
                        else {
                            num36 = 0.0;
                        }
                        num39 = num36;
                    }
                    num40 = num39;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num35 = Math.Abs((double)(inClose[BodyLongTrailingIdx - totIdx] - inOpen[BodyLongTrailingIdx - totIdx]));
                }
                else {
                    double num34;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num34 = inHigh[BodyLongTrailingIdx - totIdx] - inLow[BodyLongTrailingIdx - totIdx];
                    }
                    else {
                        double num31;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num32;
                            double num33;
                            if (inClose[BodyLongTrailingIdx - totIdx] >= inOpen[BodyLongTrailingIdx - totIdx]) {
                                num33 = inClose[BodyLongTrailingIdx - totIdx];
                            }
                            else {
                                num33 = inOpen[BodyLongTrailingIdx - totIdx];
                            }
                            if (inClose[BodyLongTrailingIdx - totIdx] >= inOpen[BodyLongTrailingIdx - totIdx]) {
                                num32 = inOpen[BodyLongTrailingIdx - totIdx];
                            }
                            else {
                                num32 = inClose[BodyLongTrailingIdx - totIdx];
                            }
                            num31 = (inHigh[BodyLongTrailingIdx - totIdx] - num33) + (num32 - inLow[BodyLongTrailingIdx - totIdx]);
                        }
                        else {
                            num31 = 0.0;
                        }
                        num34 = num31;
                    }
                    num35 = num34;
                }
                BodyLongPeriodTotal[totIdx] += num40 - num35;
                if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                    num30 = Math.Abs((double)(inClose[i - totIdx] - inOpen[i - totIdx]));
                }
                else {
                    double num29;
                    if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                        num29 = inHigh[i - totIdx] - inLow[i - totIdx];
                    }
                    else {
                        double num26;
                        if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                            double num27;
                            double num28;
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num28 = inClose[i - totIdx];
                            }
                            else {
                                num28 = inOpen[i - totIdx];
                            }
                            if (inClose[i - totIdx] >= inOpen[i - totIdx]) {
                                num27 = inOpen[i - totIdx];
                            }
                            else {
                                num27 = inClose[i - totIdx];
                            }
                            num26 = (inHigh[i - totIdx] - num28) + (num27 - inLow[i - totIdx]);
                        }
                        else {
                            num26 = 0.0;
                        }
                        num29 = num26;
                    }
                    num30 = num29;
                }
                if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                    num25 = Math.Abs((double)(inClose[NearTrailingIdx - totIdx] - inOpen[NearTrailingIdx - totIdx]));
                }
                else {
                    double num24;
                    if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                        num24 = inHigh[NearTrailingIdx - totIdx] - inLow[NearTrailingIdx - totIdx];
                    }
                    else {
                        double num21;
                        if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                            double num22;
                            double num23;
                            if (inClose[NearTrailingIdx - totIdx] >= inOpen[NearTrailingIdx - totIdx]) {
                                num23 = inClose[NearTrailingIdx - totIdx];
                            }
                            else {
                                num23 = inOpen[NearTrailingIdx - totIdx];
                            }
                            if (inClose[NearTrailingIdx - totIdx] >= inOpen[NearTrailingIdx - totIdx]) {
                                num22 = inOpen[NearTrailingIdx - totIdx];
                            }
                            else {
                                num22 = inClose[NearTrailingIdx - totIdx];
                            }
                            num21 = (inHigh[NearTrailingIdx - totIdx] - num23) + (num22 - inLow[NearTrailingIdx - totIdx]);
                        }
                        else {
                            num21 = 0.0;
                        }
                        num24 = num21;
                    }
                    num25 = num24;
                }
                NearPeriodTotal[totIdx] += num30 - num25;
                totIdx--;
            }
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num20 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num19;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num19 = inHigh[i] - inLow[i];
                }
                else {
                    double num16;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num17;
                        double num18;
                        if (inClose[i] >= inOpen[i]) {
                            num18 = inClose[i];
                        }
                        else {
                            num18 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num17 = inOpen[i];
                        }
                        else {
                            num17 = inClose[i];
                        }
                        num16 = (inHigh[i] - num18) + (num17 - inLow[i]);
                    }
                    else {
                        num16 = 0.0;
                    }
                    num19 = num16;
                }
                num20 = num19;
            }
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num15 = Math.Abs((double)(inClose[BodyShortTrailingIdx] - inOpen[BodyShortTrailingIdx]));
            }
            else {
                double num14;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num14 = inHigh[BodyShortTrailingIdx] - inLow[BodyShortTrailingIdx];
                }
                else {
                    double num11;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num12;
                        double num13;
                        if (inClose[BodyShortTrailingIdx] >= inOpen[BodyShortTrailingIdx]) {
                            num13 = inClose[BodyShortTrailingIdx];
                        }
                        else {
                            num13 = inOpen[BodyShortTrailingIdx];
                        }
                        if (inClose[BodyShortTrailingIdx] >= inOpen[BodyShortTrailingIdx]) {
                            num12 = inOpen[BodyShortTrailingIdx];
                        }
                        else {
                            num12 = inClose[BodyShortTrailingIdx];
                        }
                        num11 = (inHigh[BodyShortTrailingIdx] - num13) + (num12 - inLow[BodyShortTrailingIdx]);
                    }
                    else {
                        num11 = 0.0;
                    }
                    num14 = num11;
                }
                num15 = num14;
            }
            BodyShortPeriodTotal += num20 - num15;
            if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
            }
            else {
                double num9;
                if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i - 1] - inLow[i - 1];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num8 = inClose[i - 1];
                        }
                        else {
                            num8 = inOpen[i - 1];
                        }
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num7 = inOpen[i - 1];
                        }
                        else {
                            num7 = inClose[i - 1];
                        }
                        num6 = (inHigh[i - 1] - num8) + (num7 - inLow[i - 1]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[ShadowVeryShortTrailingIdx - 1] - inOpen[ShadowVeryShortTrailingIdx - 1]));
            }
            else {
                double num4;
                if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                    num4 = inHigh[ShadowVeryShortTrailingIdx - 1] - inLow[ShadowVeryShortTrailingIdx - 1];
                }
                else {
                    double num;
                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[ShadowVeryShortTrailingIdx - 1] >= inOpen[ShadowVeryShortTrailingIdx - 1]) {
                            num3 = inClose[ShadowVeryShortTrailingIdx - 1];
                        }
                        else {
                            num3 = inOpen[ShadowVeryShortTrailingIdx - 1];
                        }
                        if (inClose[ShadowVeryShortTrailingIdx - 1] >= inOpen[ShadowVeryShortTrailingIdx - 1]) {
                            num2 = inOpen[ShadowVeryShortTrailingIdx - 1];
                        }
                        else {
                            num2 = inClose[ShadowVeryShortTrailingIdx - 1];
                        }
                        num = (inHigh[ShadowVeryShortTrailingIdx - 1] - num3) + (num2 - inLow[ShadowVeryShortTrailingIdx - 1]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            ShadowVeryShortPeriodTotal += num10 - num5;
            i++;
            BodyLongTrailingIdx++;
            BodyShortTrailingIdx++;
            ShadowVeryShortTrailingIdx++;
            NearTrailingIdx++;
            if (i <= endIdx) {
                goto Label_0656;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlStickSandwhich(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlStickSandwhichLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double EqualPeriodTotal = 0.0;
            int EqualTrailingIdx = startIdx - Globals.candleSettings[10].avgPeriod;
            int i = EqualTrailingIdx;
            while (true) {
                double num29;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                    num29 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                }
                else {
                    double num28;
                    if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                        num28 = inHigh[i - 2] - inLow[i - 2];
                    }
                    else {
                        double num25;
                        if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                            double num26;
                            double num27;
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num27 = inClose[i - 2];
                            }
                            else {
                                num27 = inOpen[i - 2];
                            }
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num26 = inOpen[i - 2];
                            }
                            else {
                                num26 = inClose[i - 2];
                            }
                            num25 = (inHigh[i - 2] - num27) + (num26 - inLow[i - 2]);
                        }
                        else {
                            num25 = 0.0;
                        }
                        num28 = num25;
                    }
                    num29 = num28;
                }
                EqualPeriodTotal += num29;
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            Label_016C:
            if ((((((inClose[i - 2] < inOpen[i - 2]) ? -1 : 1) == -1) && (inClose[i - 1] >= inOpen[i - 1])) && (((inClose[i] < inOpen[i]) ? -1 : 1) == -1)) && (inLow[i - 1] > inClose[i - 2])) {
                double num18;
                double num24;
                if (Globals.candleSettings[10].avgPeriod != 0.0) {
                    num24 = EqualPeriodTotal / ((double)Globals.candleSettings[10].avgPeriod);
                }
                else {
                    double num23;
                    if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                        num23 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                    }
                    else {
                        double num22;
                        if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                            num22 = inHigh[i - 2] - inLow[i - 2];
                        }
                        else {
                            double num19;
                            if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                                double num20;
                                double num21;
                                if (inClose[i - 2] >= inOpen[i - 2]) {
                                    num21 = inClose[i - 2];
                                }
                                else {
                                    num21 = inOpen[i - 2];
                                }
                                if (inClose[i - 2] >= inOpen[i - 2]) {
                                    num20 = inOpen[i - 2];
                                }
                                else {
                                    num20 = inClose[i - 2];
                                }
                                num19 = (inHigh[i - 2] - num21) + (num20 - inLow[i - 2]);
                            }
                            else {
                                num19 = 0.0;
                            }
                            num22 = num19;
                        }
                        num23 = num22;
                    }
                    num24 = num23;
                }
                if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                    num18 = 2.0;
                }
                else {
                    num18 = 1.0;
                }
                if (inClose[i] <= (inClose[i - 2] + ((Globals.candleSettings[10].factor * num24) / num18))) {
                    double num11;
                    double num17;
                    if (Globals.candleSettings[10].avgPeriod != 0.0) {
                        num17 = EqualPeriodTotal / ((double)Globals.candleSettings[10].avgPeriod);
                    }
                    else {
                        double num16;
                        if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                            num16 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                        }
                        else {
                            double num15;
                            if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                                num15 = inHigh[i - 2] - inLow[i - 2];
                            }
                            else {
                                double num12;
                                if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                                    double num13;
                                    double num14;
                                    if (inClose[i - 2] >= inOpen[i - 2]) {
                                        num14 = inClose[i - 2];
                                    }
                                    else {
                                        num14 = inOpen[i - 2];
                                    }
                                    if (inClose[i - 2] >= inOpen[i - 2]) {
                                        num13 = inOpen[i - 2];
                                    }
                                    else {
                                        num13 = inClose[i - 2];
                                    }
                                    num12 = (inHigh[i - 2] - num14) + (num13 - inLow[i - 2]);
                                }
                                else {
                                    num12 = 0.0;
                                }
                                num15 = num12;
                            }
                            num16 = num15;
                        }
                        num17 = num16;
                    }
                    if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                        num11 = 2.0;
                    }
                    else {
                        num11 = 1.0;
                    }
                    if (inClose[i] >= (inClose[i - 2] - ((Globals.candleSettings[10].factor * num17) / num11))) {
                        outInteger[outIdx] = 100;
                        outIdx++;
                        goto Label_0492;
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_0492:
            if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
            }
            else {
                double num9;
                if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i - 2] - inLow[i - 2];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i - 2] >= inOpen[i - 2]) {
                            num8 = inClose[i - 2];
                        }
                        else {
                            num8 = inOpen[i - 2];
                        }
                        if (inClose[i - 2] >= inOpen[i - 2]) {
                            num7 = inOpen[i - 2];
                        }
                        else {
                            num7 = inClose[i - 2];
                        }
                        num6 = (inHigh[i - 2] - num8) + (num7 - inLow[i - 2]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[EqualTrailingIdx - 2] - inOpen[EqualTrailingIdx - 2]));
            }
            else {
                double num4;
                if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                    num4 = inHigh[EqualTrailingIdx - 2] - inLow[EqualTrailingIdx - 2];
                }
                else {
                    double num;
                    if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[EqualTrailingIdx - 2] >= inOpen[EqualTrailingIdx - 2]) {
                            num3 = inClose[EqualTrailingIdx - 2];
                        }
                        else {
                            num3 = inOpen[EqualTrailingIdx - 2];
                        }
                        if (inClose[EqualTrailingIdx - 2] >= inOpen[EqualTrailingIdx - 2]) {
                            num2 = inOpen[EqualTrailingIdx - 2];
                        }
                        else {
                            num2 = inClose[EqualTrailingIdx - 2];
                        }
                        num = (inHigh[EqualTrailingIdx - 2] - num3) + (num2 - inLow[EqualTrailingIdx - 2]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            EqualPeriodTotal += num10 - num5;
            i++;
            EqualTrailingIdx++;
            if (i <= endIdx) {
                goto Label_016C;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlTakuri(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            double num15;
            double num20;
            double num25;
            double num30;
            double num47;
            double num53;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlTakuriLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double BodyDojiPeriodTotal = 0.0;
            int BodyDojiTrailingIdx = startIdx - Globals.candleSettings[3].avgPeriod;
            double ShadowVeryShortPeriodTotal = 0.0;
            int ShadowVeryShortTrailingIdx = startIdx - Globals.candleSettings[7].avgPeriod;
            double ShadowVeryLongPeriodTotal = 0.0;
            int ShadowVeryLongTrailingIdx = startIdx - Globals.candleSettings[5].avgPeriod;
            int i = BodyDojiTrailingIdx;
            while (true) {
                double num68;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                    num68 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num67;
                    if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                        num67 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num64;
                        if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                            double num65;
                            double num66;
                            if (inClose[i] >= inOpen[i]) {
                                num66 = inClose[i];
                            }
                            else {
                                num66 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num65 = inOpen[i];
                            }
                            else {
                                num65 = inClose[i];
                            }
                            num64 = (inHigh[i] - num66) + (num65 - inLow[i]);
                        }
                        else {
                            num64 = 0.0;
                        }
                        num67 = num64;
                    }
                    num68 = num67;
                }
                BodyDojiPeriodTotal += num68;
                i++;
            }
            i = ShadowVeryShortTrailingIdx;
            while (true) {
                double num63;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                    num63 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num62;
                    if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                        num62 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num59;
                        if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                            double num60;
                            double num61;
                            if (inClose[i] >= inOpen[i]) {
                                num61 = inClose[i];
                            }
                            else {
                                num61 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num60 = inOpen[i];
                            }
                            else {
                                num60 = inClose[i];
                            }
                            num59 = (inHigh[i] - num61) + (num60 - inLow[i]);
                        }
                        else {
                            num59 = 0.0;
                        }
                        num62 = num59;
                    }
                    num63 = num62;
                }
                ShadowVeryShortPeriodTotal += num63;
                i++;
            }
            i = ShadowVeryLongTrailingIdx;
            while (true) {
                double num58;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[5].rangeType == RangeType.RealBody) {
                    num58 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num57;
                    if (Globals.candleSettings[5].rangeType == RangeType.HighLow) {
                        num57 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num54;
                        if (Globals.candleSettings[5].rangeType == RangeType.Shadows) {
                            double num55;
                            double num56;
                            if (inClose[i] >= inOpen[i]) {
                                num56 = inClose[i];
                            }
                            else {
                                num56 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num55 = inOpen[i];
                            }
                            else {
                                num55 = inClose[i];
                            }
                            num54 = (inHigh[i] - num56) + (num55 - inLow[i]);
                        }
                        else {
                            num54 = 0.0;
                        }
                        num57 = num54;
                    }
                    num58 = num57;
                }
                ShadowVeryLongPeriodTotal += num58;
                i++;
            }
            int outIdx = 0;
            Label_0313:
            if (Globals.candleSettings[3].avgPeriod != 0.0) {
                num53 = BodyDojiPeriodTotal / ((double)Globals.candleSettings[3].avgPeriod);
            }
            else {
                double num52;
                if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                    num52 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num51;
                    if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                        num51 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num48;
                        if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                            double num49;
                            double num50;
                            if (inClose[i] >= inOpen[i]) {
                                num50 = inClose[i];
                            }
                            else {
                                num50 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num49 = inOpen[i];
                            }
                            else {
                                num49 = inClose[i];
                            }
                            num48 = (inHigh[i] - num50) + (num49 - inLow[i]);
                        }
                        else {
                            num48 = 0.0;
                        }
                        num51 = num48;
                    }
                    num52 = num51;
                }
                num53 = num52;
            }
            if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                num47 = 2.0;
            }
            else {
                num47 = 1.0;
            }
            if (Math.Abs((double)(inClose[i] - inOpen[i])) <= ((Globals.candleSettings[3].factor * num53) / num47)) {
                double num39;
                double num45;
                double num46;
                if (inClose[i] >= inOpen[i]) {
                    num46 = inClose[i];
                }
                else {
                    num46 = inOpen[i];
                }
                if (Globals.candleSettings[7].avgPeriod != 0.0) {
                    num45 = ShadowVeryShortPeriodTotal / ((double)Globals.candleSettings[7].avgPeriod);
                }
                else {
                    double num44;
                    if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                        num44 = Math.Abs((double)(inClose[i] - inOpen[i]));
                    }
                    else {
                        double num43;
                        if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                            num43 = inHigh[i] - inLow[i];
                        }
                        else {
                            double num40;
                            if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                                double num41;
                                double num42;
                                if (inClose[i] >= inOpen[i]) {
                                    num42 = inClose[i];
                                }
                                else {
                                    num42 = inOpen[i];
                                }
                                if (inClose[i] >= inOpen[i]) {
                                    num41 = inOpen[i];
                                }
                                else {
                                    num41 = inClose[i];
                                }
                                num40 = (inHigh[i] - num42) + (num41 - inLow[i]);
                            }
                            else {
                                num40 = 0.0;
                            }
                            num43 = num40;
                        }
                        num44 = num43;
                    }
                    num45 = num44;
                }
                if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                    num39 = 2.0;
                }
                else {
                    num39 = 1.0;
                }
                if ((inHigh[i] - num46) < ((Globals.candleSettings[7].factor * num45) / num39)) {
                    double num31;
                    double num37;
                    double num38;
                    if (inClose[i] >= inOpen[i]) {
                        num38 = inOpen[i];
                    }
                    else {
                        num38 = inClose[i];
                    }
                    if (Globals.candleSettings[5].avgPeriod != 0.0) {
                        num37 = ShadowVeryLongPeriodTotal / ((double)Globals.candleSettings[5].avgPeriod);
                    }
                    else {
                        double num36;
                        if (Globals.candleSettings[5].rangeType == RangeType.RealBody) {
                            num36 = Math.Abs((double)(inClose[i] - inOpen[i]));
                        }
                        else {
                            double num35;
                            if (Globals.candleSettings[5].rangeType == RangeType.HighLow) {
                                num35 = inHigh[i] - inLow[i];
                            }
                            else {
                                double num32;
                                if (Globals.candleSettings[5].rangeType == RangeType.Shadows) {
                                    double num33;
                                    double num34;
                                    if (inClose[i] >= inOpen[i]) {
                                        num34 = inClose[i];
                                    }
                                    else {
                                        num34 = inOpen[i];
                                    }
                                    if (inClose[i] >= inOpen[i]) {
                                        num33 = inOpen[i];
                                    }
                                    else {
                                        num33 = inClose[i];
                                    }
                                    num32 = (inHigh[i] - num34) + (num33 - inLow[i]);
                                }
                                else {
                                    num32 = 0.0;
                                }
                                num35 = num32;
                            }
                            num36 = num35;
                        }
                        num37 = num36;
                    }
                    if (Globals.candleSettings[5].rangeType == RangeType.Shadows) {
                        num31 = 2.0;
                    }
                    else {
                        num31 = 1.0;
                    }
                    if ((num38 - inLow[i]) > ((Globals.candleSettings[5].factor * num37) / num31)) {
                        outInteger[outIdx] = 100;
                        outIdx++;
                        goto Label_0704;
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_0704:
            if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                num30 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num29;
                if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                    num29 = inHigh[i] - inLow[i];
                }
                else {
                    double num26;
                    if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                        double num27;
                        double num28;
                        if (inClose[i] >= inOpen[i]) {
                            num28 = inClose[i];
                        }
                        else {
                            num28 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num27 = inOpen[i];
                        }
                        else {
                            num27 = inClose[i];
                        }
                        num26 = (inHigh[i] - num28) + (num27 - inLow[i]);
                    }
                    else {
                        num26 = 0.0;
                    }
                    num29 = num26;
                }
                num30 = num29;
            }
            if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                num25 = Math.Abs((double)(inClose[BodyDojiTrailingIdx] - inOpen[BodyDojiTrailingIdx]));
            }
            else {
                double num24;
                if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                    num24 = inHigh[BodyDojiTrailingIdx] - inLow[BodyDojiTrailingIdx];
                }
                else {
                    double num21;
                    if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                        double num22;
                        double num23;
                        if (inClose[BodyDojiTrailingIdx] >= inOpen[BodyDojiTrailingIdx]) {
                            num23 = inClose[BodyDojiTrailingIdx];
                        }
                        else {
                            num23 = inOpen[BodyDojiTrailingIdx];
                        }
                        if (inClose[BodyDojiTrailingIdx] >= inOpen[BodyDojiTrailingIdx]) {
                            num22 = inOpen[BodyDojiTrailingIdx];
                        }
                        else {
                            num22 = inClose[BodyDojiTrailingIdx];
                        }
                        num21 = (inHigh[BodyDojiTrailingIdx] - num23) + (num22 - inLow[BodyDojiTrailingIdx]);
                    }
                    else {
                        num21 = 0.0;
                    }
                    num24 = num21;
                }
                num25 = num24;
            }
            BodyDojiPeriodTotal += num30 - num25;
            if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                num20 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num19;
                if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                    num19 = inHigh[i] - inLow[i];
                }
                else {
                    double num16;
                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                        double num17;
                        double num18;
                        if (inClose[i] >= inOpen[i]) {
                            num18 = inClose[i];
                        }
                        else {
                            num18 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num17 = inOpen[i];
                        }
                        else {
                            num17 = inClose[i];
                        }
                        num16 = (inHigh[i] - num18) + (num17 - inLow[i]);
                    }
                    else {
                        num16 = 0.0;
                    }
                    num19 = num16;
                }
                num20 = num19;
            }
            if (Globals.candleSettings[7].rangeType == RangeType.RealBody) {
                num15 = Math.Abs((double)(inClose[ShadowVeryShortTrailingIdx] - inOpen[ShadowVeryShortTrailingIdx]));
            }
            else {
                double num14;
                if (Globals.candleSettings[7].rangeType == RangeType.HighLow) {
                    num14 = inHigh[ShadowVeryShortTrailingIdx] - inLow[ShadowVeryShortTrailingIdx];
                }
                else {
                    double num11;
                    if (Globals.candleSettings[7].rangeType == RangeType.Shadows) {
                        double num12;
                        double num13;
                        if (inClose[ShadowVeryShortTrailingIdx] >= inOpen[ShadowVeryShortTrailingIdx]) {
                            num13 = inClose[ShadowVeryShortTrailingIdx];
                        }
                        else {
                            num13 = inOpen[ShadowVeryShortTrailingIdx];
                        }
                        if (inClose[ShadowVeryShortTrailingIdx] >= inOpen[ShadowVeryShortTrailingIdx]) {
                            num12 = inOpen[ShadowVeryShortTrailingIdx];
                        }
                        else {
                            num12 = inClose[ShadowVeryShortTrailingIdx];
                        }
                        num11 = (inHigh[ShadowVeryShortTrailingIdx] - num13) + (num12 - inLow[ShadowVeryShortTrailingIdx]);
                    }
                    else {
                        num11 = 0.0;
                    }
                    num14 = num11;
                }
                num15 = num14;
            }
            ShadowVeryShortPeriodTotal += num20 - num15;
            if (Globals.candleSettings[5].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num9;
                if (Globals.candleSettings[5].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i] - inLow[i];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[5].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i] >= inOpen[i]) {
                            num8 = inClose[i];
                        }
                        else {
                            num8 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num7 = inOpen[i];
                        }
                        else {
                            num7 = inClose[i];
                        }
                        num6 = (inHigh[i] - num8) + (num7 - inLow[i]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[5].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[ShadowVeryLongTrailingIdx] - inOpen[ShadowVeryLongTrailingIdx]));
            }
            else {
                double num4;
                if (Globals.candleSettings[5].rangeType == RangeType.HighLow) {
                    num4 = inHigh[ShadowVeryLongTrailingIdx] - inLow[ShadowVeryLongTrailingIdx];
                }
                else {
                    double num;
                    if (Globals.candleSettings[5].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[ShadowVeryLongTrailingIdx] >= inOpen[ShadowVeryLongTrailingIdx]) {
                            num3 = inClose[ShadowVeryLongTrailingIdx];
                        }
                        else {
                            num3 = inOpen[ShadowVeryLongTrailingIdx];
                        }
                        if (inClose[ShadowVeryLongTrailingIdx] >= inOpen[ShadowVeryLongTrailingIdx]) {
                            num2 = inOpen[ShadowVeryLongTrailingIdx];
                        }
                        else {
                            num2 = inClose[ShadowVeryLongTrailingIdx];
                        }
                        num = (inHigh[ShadowVeryLongTrailingIdx] - num3) + (num2 - inLow[ShadowVeryLongTrailingIdx]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            ShadowVeryLongPeriodTotal += num10 - num5;
            i++;
            BodyDojiTrailingIdx++;
            ShadowVeryShortTrailingIdx++;
            ShadowVeryLongTrailingIdx++;
            if (i <= endIdx) {
                goto Label_0313;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlTasukiGap(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            int num11;
            double num12;
            double num18;
            double num19;
            double num20;
            double num21;
            double num30;
            double num31;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlTasukiGapLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double NearPeriodTotal = 0.0;
            int NearTrailingIdx = startIdx - Globals.candleSettings[8].avgPeriod;
            int i = NearTrailingIdx;
            while (true) {
                double num36;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                    num36 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num35;
                    if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                        num35 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num32;
                        if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                            double num33;
                            double num34;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num34 = inClose[i - 1];
                            }
                            else {
                                num34 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num33 = inOpen[i - 1];
                            }
                            else {
                                num33 = inClose[i - 1];
                            }
                            num32 = (inHigh[i - 1] - num34) + (num33 - inLow[i - 1]);
                        }
                        else {
                            num32 = 0.0;
                        }
                        num35 = num32;
                    }
                    num36 = num35;
                }
                NearPeriodTotal += num36;
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            Label_0168:
            if (inOpen[i - 1] < inClose[i - 1]) {
                num31 = inOpen[i - 1];
            }
            else {
                num31 = inClose[i - 1];
            }
            if (inOpen[i - 2] > inClose[i - 2]) {
                num30 = inOpen[i - 2];
            }
            else {
                num30 = inClose[i - 2];
            }
            if (((((num31 > num30) && (inClose[i - 1] >= inOpen[i - 1])) && (((inClose[i] < inOpen[i]) ? -1 : 1) == -1)) && ((inOpen[i] < inClose[i - 1]) && (inOpen[i] > inOpen[i - 1]))) && (inClose[i] < inOpen[i - 1])) {
                double num29;
                if (inClose[i - 2] > inOpen[i - 2]) {
                    num29 = inClose[i - 2];
                }
                else {
                    num29 = inOpen[i - 2];
                }
                if (inClose[i] > num29) {
                    double num22;
                    double num28;
                    if (Globals.candleSettings[8].avgPeriod != 0.0) {
                        num28 = NearPeriodTotal / ((double)Globals.candleSettings[8].avgPeriod);
                    }
                    else {
                        double num27;
                        if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                            num27 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                        }
                        else {
                            double num26;
                            if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                                num26 = inHigh[i - 1] - inLow[i - 1];
                            }
                            else {
                                double num23;
                                if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                                    double num24;
                                    double num25;
                                    if (inClose[i - 1] >= inOpen[i - 1]) {
                                        num25 = inClose[i - 1];
                                    }
                                    else {
                                        num25 = inOpen[i - 1];
                                    }
                                    if (inClose[i - 1] >= inOpen[i - 1]) {
                                        num24 = inOpen[i - 1];
                                    }
                                    else {
                                        num24 = inClose[i - 1];
                                    }
                                    num23 = (inHigh[i - 1] - num25) + (num24 - inLow[i - 1]);
                                }
                                else {
                                    num23 = 0.0;
                                }
                                num26 = num23;
                            }
                            num27 = num26;
                        }
                        num28 = num27;
                    }
                    if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                        num22 = 2.0;
                    }
                    else {
                        num22 = 1.0;
                    }
                    if (Math.Abs((double)(Math.Abs((double)(inClose[i - 1] - inOpen[i - 1])) - Math.Abs((double)(inClose[i] - inOpen[i])))) < ((Globals.candleSettings[8].factor * num28) / num22)) {
                        goto Label_05CD;
                    }
                }
            }
            if (inOpen[i - 1] > inClose[i - 1]) {
                num21 = inOpen[i - 1];
            }
            else {
                num21 = inClose[i - 1];
            }
            if (inOpen[i - 2] < inClose[i - 2]) {
                num20 = inOpen[i - 2];
            }
            else {
                num20 = inClose[i - 2];
            }
            if (((((num21 >= num20) || (((inClose[i - 1] < inOpen[i - 1]) ? -1 : 1) != -1)) || (inClose[i] < inOpen[i])) || ((inOpen[i] >= inOpen[i - 1]) || (inOpen[i] <= inClose[i - 1]))) || (inClose[i] <= inOpen[i - 1])) {
                goto Label_05F1;
            }
            if (inClose[i - 2] < inOpen[i - 2]) {
                num19 = inClose[i - 2];
            }
            else {
                num19 = inOpen[i - 2];
            }
            if (inClose[i] >= num19) {
                goto Label_05F1;
            }
            if (Globals.candleSettings[8].avgPeriod != 0.0) {
                num18 = NearPeriodTotal / ((double)Globals.candleSettings[8].avgPeriod);
            }
            else {
                double num17;
                if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                    num17 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num16;
                    if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                        num16 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num13;
                        if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                            double num14;
                            double num15;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num15 = inClose[i - 1];
                            }
                            else {
                                num15 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num14 = inOpen[i - 1];
                            }
                            else {
                                num14 = inClose[i - 1];
                            }
                            num13 = (inHigh[i - 1] - num15) + (num14 - inLow[i - 1]);
                        }
                        else {
                            num13 = 0.0;
                        }
                        num16 = num13;
                    }
                    num17 = num16;
                }
                num18 = num17;
            }
            if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                num12 = 2.0;
            }
            else {
                num12 = 1.0;
            }
            if (Math.Abs((double)(Math.Abs((double)(inClose[i - 1] - inOpen[i - 1])) - Math.Abs((double)(inClose[i] - inOpen[i])))) >= ((Globals.candleSettings[8].factor * num18) / num12)) {
                goto Label_05F1;
            }
            Label_05CD:
            if (inClose[i - 1] >= inOpen[i - 1]) {
                num11 = 1;
            }
            else {
                num11 = -1;
            }
            outInteger[outIdx] = num11 * 100;
            outIdx++;
            goto Label_05FA;
            Label_05F1:
            outInteger[outIdx] = 0;
            outIdx++;
            Label_05FA:
            if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
            }
            else {
                double num9;
                if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i - 1] - inLow[i - 1];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num8 = inClose[i - 1];
                        }
                        else {
                            num8 = inOpen[i - 1];
                        }
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num7 = inOpen[i - 1];
                        }
                        else {
                            num7 = inClose[i - 1];
                        }
                        num6 = (inHigh[i - 1] - num8) + (num7 - inLow[i - 1]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[8].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[NearTrailingIdx - 1] - inOpen[NearTrailingIdx - 1]));
            }
            else {
                double num4;
                if (Globals.candleSettings[8].rangeType == RangeType.HighLow) {
                    num4 = inHigh[NearTrailingIdx - 1] - inLow[NearTrailingIdx - 1];
                }
                else {
                    double num;
                    if (Globals.candleSettings[8].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[NearTrailingIdx - 1] >= inOpen[NearTrailingIdx - 1]) {
                            num3 = inClose[NearTrailingIdx - 1];
                        }
                        else {
                            num3 = inOpen[NearTrailingIdx - 1];
                        }
                        if (inClose[NearTrailingIdx - 1] >= inOpen[NearTrailingIdx - 1]) {
                            num2 = inOpen[NearTrailingIdx - 1];
                        }
                        else {
                            num2 = inClose[NearTrailingIdx - 1];
                        }
                        num = (inHigh[NearTrailingIdx - 1] - num3) + (num2 - inLow[NearTrailingIdx - 1]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            NearPeriodTotal += num10 - num5;
            i++;
            NearTrailingIdx++;
            if (i <= endIdx) {
                goto Label_0168;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlThrusting(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            double num15;
            double num20;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlThrustingLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double EqualPeriodTotal = 0.0;
            int EqualTrailingIdx = startIdx - Globals.candleSettings[10].avgPeriod;
            double BodyLongPeriodTotal = 0.0;
            int BodyLongTrailingIdx = startIdx - Globals.candleSettings[0].avgPeriod;
            int i = EqualTrailingIdx;
            while (true) {
                double num44;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                    num44 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num43;
                    if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                        num43 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num40;
                        if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                            double num41;
                            double num42;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num42 = inClose[i - 1];
                            }
                            else {
                                num42 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num41 = inOpen[i - 1];
                            }
                            else {
                                num41 = inClose[i - 1];
                            }
                            num40 = (inHigh[i - 1] - num42) + (num41 - inLow[i - 1]);
                        }
                        else {
                            num40 = 0.0;
                        }
                        num43 = num40;
                    }
                    num44 = num43;
                }
                EqualPeriodTotal += num44;
                i++;
            }
            i = BodyLongTrailingIdx;
            while (true) {
                double num39;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num39 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                }
                else {
                    double num38;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num38 = inHigh[i - 1] - inLow[i - 1];
                    }
                    else {
                        double num35;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num36;
                            double num37;
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num37 = inClose[i - 1];
                            }
                            else {
                                num37 = inOpen[i - 1];
                            }
                            if (inClose[i - 1] >= inOpen[i - 1]) {
                                num36 = inOpen[i - 1];
                            }
                            else {
                                num36 = inClose[i - 1];
                            }
                            num35 = (inHigh[i - 1] - num37) + (num36 - inLow[i - 1]);
                        }
                        else {
                            num35 = 0.0;
                        }
                        num38 = num35;
                    }
                    num39 = num38;
                }
                BodyLongPeriodTotal += num39;
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            Label_0272:
            if (((inClose[i - 1] < inOpen[i - 1]) ? -1 : 1) == -1) {
                double num28;
                double num34;
                if (Globals.candleSettings[0].avgPeriod != 0.0) {
                    num34 = BodyLongPeriodTotal / ((double)Globals.candleSettings[0].avgPeriod);
                }
                else {
                    double num33;
                    if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                        num33 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                    }
                    else {
                        double num32;
                        if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                            num32 = inHigh[i - 1] - inLow[i - 1];
                        }
                        else {
                            double num29;
                            if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                                double num30;
                                double num31;
                                if (inClose[i - 1] >= inOpen[i - 1]) {
                                    num31 = inClose[i - 1];
                                }
                                else {
                                    num31 = inOpen[i - 1];
                                }
                                if (inClose[i - 1] >= inOpen[i - 1]) {
                                    num30 = inOpen[i - 1];
                                }
                                else {
                                    num30 = inClose[i - 1];
                                }
                                num29 = (inHigh[i - 1] - num31) + (num30 - inLow[i - 1]);
                            }
                            else {
                                num29 = 0.0;
                            }
                            num32 = num29;
                        }
                        num33 = num32;
                    }
                    num34 = num33;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                    num28 = 2.0;
                }
                else {
                    num28 = 1.0;
                }
                if (((Math.Abs((double)(inClose[i - 1] - inOpen[i - 1])) > ((Globals.candleSettings[0].factor * num34) / num28)) && (inClose[i] >= inOpen[i])) && (inOpen[i] < inLow[i - 1])) {
                    double num21;
                    double num27;
                    if (Globals.candleSettings[10].avgPeriod != 0.0) {
                        num27 = EqualPeriodTotal / ((double)Globals.candleSettings[10].avgPeriod);
                    }
                    else {
                        double num26;
                        if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                            num26 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                        }
                        else {
                            double num25;
                            if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                                num25 = inHigh[i - 1] - inLow[i - 1];
                            }
                            else {
                                double num22;
                                if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                                    double num23;
                                    double num24;
                                    if (inClose[i - 1] >= inOpen[i - 1]) {
                                        num24 = inClose[i - 1];
                                    }
                                    else {
                                        num24 = inOpen[i - 1];
                                    }
                                    if (inClose[i - 1] >= inOpen[i - 1]) {
                                        num23 = inOpen[i - 1];
                                    }
                                    else {
                                        num23 = inClose[i - 1];
                                    }
                                    num22 = (inHigh[i - 1] - num24) + (num23 - inLow[i - 1]);
                                }
                                else {
                                    num22 = 0.0;
                                }
                                num25 = num22;
                            }
                            num26 = num25;
                        }
                        num27 = num26;
                    }
                    if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                        num21 = 2.0;
                    }
                    else {
                        num21 = 1.0;
                    }
                    if ((inClose[i] > (inClose[i - 1] + ((Globals.candleSettings[10].factor * num27) / num21))) && (inClose[i] <= (inClose[i - 1] + (Math.Abs((double)(inClose[i - 1] - inOpen[i - 1])) * 0.5)))) {
                        outInteger[outIdx] = -100;
                        outIdx++;
                        goto Label_05A7;
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_05A7:
            if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                num20 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
            }
            else {
                double num19;
                if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                    num19 = inHigh[i - 1] - inLow[i - 1];
                }
                else {
                    double num16;
                    if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                        double num17;
                        double num18;
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num18 = inClose[i - 1];
                        }
                        else {
                            num18 = inOpen[i - 1];
                        }
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num17 = inOpen[i - 1];
                        }
                        else {
                            num17 = inClose[i - 1];
                        }
                        num16 = (inHigh[i - 1] - num18) + (num17 - inLow[i - 1]);
                    }
                    else {
                        num16 = 0.0;
                    }
                    num19 = num16;
                }
                num20 = num19;
            }
            if (Globals.candleSettings[10].rangeType == RangeType.RealBody) {
                num15 = Math.Abs((double)(inClose[EqualTrailingIdx - 1] - inOpen[EqualTrailingIdx - 1]));
            }
            else {
                double num14;
                if (Globals.candleSettings[10].rangeType == RangeType.HighLow) {
                    num14 = inHigh[EqualTrailingIdx - 1] - inLow[EqualTrailingIdx - 1];
                }
                else {
                    double num11;
                    if (Globals.candleSettings[10].rangeType == RangeType.Shadows) {
                        double num12;
                        double num13;
                        if (inClose[EqualTrailingIdx - 1] >= inOpen[EqualTrailingIdx - 1]) {
                            num13 = inClose[EqualTrailingIdx - 1];
                        }
                        else {
                            num13 = inOpen[EqualTrailingIdx - 1];
                        }
                        if (inClose[EqualTrailingIdx - 1] >= inOpen[EqualTrailingIdx - 1]) {
                            num12 = inOpen[EqualTrailingIdx - 1];
                        }
                        else {
                            num12 = inClose[EqualTrailingIdx - 1];
                        }
                        num11 = (inHigh[EqualTrailingIdx - 1] - num13) + (num12 - inLow[EqualTrailingIdx - 1]);
                    }
                    else {
                        num11 = 0.0;
                    }
                    num14 = num11;
                }
                num15 = num14;
            }
            EqualPeriodTotal += num20 - num15;
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
            }
            else {
                double num9;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i - 1] - inLow[i - 1];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num8 = inClose[i - 1];
                        }
                        else {
                            num8 = inOpen[i - 1];
                        }
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num7 = inOpen[i - 1];
                        }
                        else {
                            num7 = inClose[i - 1];
                        }
                        num6 = (inHigh[i - 1] - num8) + (num7 - inLow[i - 1]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[BodyLongTrailingIdx - 1] - inOpen[BodyLongTrailingIdx - 1]));
            }
            else {
                double num4;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num4 = inHigh[BodyLongTrailingIdx - 1] - inLow[BodyLongTrailingIdx - 1];
                }
                else {
                    double num;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[BodyLongTrailingIdx - 1] >= inOpen[BodyLongTrailingIdx - 1]) {
                            num3 = inClose[BodyLongTrailingIdx - 1];
                        }
                        else {
                            num3 = inOpen[BodyLongTrailingIdx - 1];
                        }
                        if (inClose[BodyLongTrailingIdx - 1] >= inOpen[BodyLongTrailingIdx - 1]) {
                            num2 = inOpen[BodyLongTrailingIdx - 1];
                        }
                        else {
                            num2 = inClose[BodyLongTrailingIdx - 1];
                        }
                        num = (inHigh[BodyLongTrailingIdx - 1] - num3) + (num2 - inLow[BodyLongTrailingIdx - 1]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            BodyLongPeriodTotal += num10 - num5;
            i++;
            EqualTrailingIdx++;
            BodyLongTrailingIdx++;
            if (i <= endIdx) {
                goto Label_0272;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlTristar(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            double num33;
            double num39;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlTristarLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double BodyPeriodTotal = 0.0;
            int BodyTrailingIdx = (startIdx - 2) - Globals.candleSettings[3].avgPeriod;
            int i = BodyTrailingIdx;
            while (true) {
                double num44;
                if (i >= (startIdx - 2)) {
                    break;
                }
                if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                    num44 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num43;
                    if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                        num43 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num40;
                        if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                            double num41;
                            double num42;
                            if (inClose[i] >= inOpen[i]) {
                                num42 = inClose[i];
                            }
                            else {
                                num42 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num41 = inOpen[i];
                            }
                            else {
                                num41 = inClose[i];
                            }
                            num40 = (inHigh[i] - num42) + (num41 - inLow[i]);
                        }
                        else {
                            num40 = 0.0;
                        }
                        num43 = num40;
                    }
                    num44 = num43;
                }
                BodyPeriodTotal += num44;
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            Label_014D:
            if (Globals.candleSettings[3].avgPeriod != 0.0) {
                num39 = BodyPeriodTotal / ((double)Globals.candleSettings[3].avgPeriod);
            }
            else {
                double num38;
                if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                    num38 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                }
                else {
                    double num37;
                    if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                        num37 = inHigh[i - 2] - inLow[i - 2];
                    }
                    else {
                        double num34;
                        if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                            double num35;
                            double num36;
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num36 = inClose[i - 2];
                            }
                            else {
                                num36 = inOpen[i - 2];
                            }
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num35 = inOpen[i - 2];
                            }
                            else {
                                num35 = inClose[i - 2];
                            }
                            num34 = (inHigh[i - 2] - num36) + (num35 - inLow[i - 2]);
                        }
                        else {
                            num34 = 0.0;
                        }
                        num37 = num34;
                    }
                    num38 = num37;
                }
                num39 = num38;
            }
            if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                num33 = 2.0;
            }
            else {
                num33 = 1.0;
            }
            if (Math.Abs((double)(inClose[i - 2] - inOpen[i - 2])) <= ((Globals.candleSettings[3].factor * num39) / num33)) {
                double num26;
                double num32;
                if (Globals.candleSettings[3].avgPeriod != 0.0) {
                    num32 = BodyPeriodTotal / ((double)Globals.candleSettings[3].avgPeriod);
                }
                else {
                    double num31;
                    if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                        num31 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                    }
                    else {
                        double num30;
                        if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                            num30 = inHigh[i - 2] - inLow[i - 2];
                        }
                        else {
                            double num27;
                            if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                                double num28;
                                double num29;
                                if (inClose[i - 2] >= inOpen[i - 2]) {
                                    num29 = inClose[i - 2];
                                }
                                else {
                                    num29 = inOpen[i - 2];
                                }
                                if (inClose[i - 2] >= inOpen[i - 2]) {
                                    num28 = inOpen[i - 2];
                                }
                                else {
                                    num28 = inClose[i - 2];
                                }
                                num27 = (inHigh[i - 2] - num29) + (num28 - inLow[i - 2]);
                            }
                            else {
                                num27 = 0.0;
                            }
                            num30 = num27;
                        }
                        num31 = num30;
                    }
                    num32 = num31;
                }
                if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                    num26 = 2.0;
                }
                else {
                    num26 = 1.0;
                }
                if (Math.Abs((double)(inClose[i - 1] - inOpen[i - 1])) <= ((Globals.candleSettings[3].factor * num32) / num26)) {
                    double num19;
                    double num25;
                    if (Globals.candleSettings[3].avgPeriod != 0.0) {
                        num25 = BodyPeriodTotal / ((double)Globals.candleSettings[3].avgPeriod);
                    }
                    else {
                        double num24;
                        if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                            num24 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                        }
                        else {
                            double num23;
                            if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                                num23 = inHigh[i - 2] - inLow[i - 2];
                            }
                            else {
                                double num20;
                                if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                                    double num21;
                                    double num22;
                                    if (inClose[i - 2] >= inOpen[i - 2]) {
                                        num22 = inClose[i - 2];
                                    }
                                    else {
                                        num22 = inOpen[i - 2];
                                    }
                                    if (inClose[i - 2] >= inOpen[i - 2]) {
                                        num21 = inOpen[i - 2];
                                    }
                                    else {
                                        num21 = inClose[i - 2];
                                    }
                                    num20 = (inHigh[i - 2] - num22) + (num21 - inLow[i - 2]);
                                }
                                else {
                                    num20 = 0.0;
                                }
                                num23 = num20;
                            }
                            num24 = num23;
                        }
                        num25 = num24;
                    }
                    if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                        num19 = 2.0;
                    }
                    else {
                        num19 = 1.0;
                    }
                    if (Math.Abs((double)(inClose[i] - inOpen[i])) <= ((Globals.candleSettings[3].factor * num25) / num19)) {
                        double num13;
                        double num14;
                        double num17;
                        double num18;
                        outInteger[outIdx] = 0;
                        if (inOpen[i - 1] < inClose[i - 1]) {
                            num18 = inOpen[i - 1];
                        }
                        else {
                            num18 = inClose[i - 1];
                        }
                        if (inOpen[i - 2] > inClose[i - 2]) {
                            num17 = inOpen[i - 2];
                        }
                        else {
                            num17 = inClose[i - 2];
                        }
                        if (num18 > num17) {
                            double num15;
                            double num16;
                            if (inOpen[i] > inClose[i]) {
                                num16 = inOpen[i];
                            }
                            else {
                                num16 = inClose[i];
                            }
                            if (inOpen[i - 1] > inClose[i - 1]) {
                                num15 = inOpen[i - 1];
                            }
                            else {
                                num15 = inClose[i - 1];
                            }
                            if (num16 < num15) {
                                outInteger[outIdx] = -100;
                            }
                        }
                        if (inOpen[i - 1] > inClose[i - 1]) {
                            num14 = inOpen[i - 1];
                        }
                        else {
                            num14 = inClose[i - 1];
                        }
                        if (inOpen[i - 2] < inClose[i - 2]) {
                            num13 = inOpen[i - 2];
                        }
                        else {
                            num13 = inClose[i - 2];
                        }
                        if (num14 < num13) {
                            double num11;
                            double num12;
                            if (inOpen[i] < inClose[i]) {
                                num12 = inOpen[i];
                            }
                            else {
                                num12 = inClose[i];
                            }
                            if (inOpen[i - 1] < inClose[i - 1]) {
                                num11 = inOpen[i - 1];
                            }
                            else {
                                num11 = inClose[i - 1];
                            }
                            if (num12 > num11) {
                                outInteger[outIdx] = 100;
                            }
                        }
                        outIdx++;
                        goto Label_0681;
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_0681:
            if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
            }
            else {
                double num9;
                if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i - 2] - inLow[i - 2];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i - 2] >= inOpen[i - 2]) {
                            num8 = inClose[i - 2];
                        }
                        else {
                            num8 = inOpen[i - 2];
                        }
                        if (inClose[i - 2] >= inOpen[i - 2]) {
                            num7 = inOpen[i - 2];
                        }
                        else {
                            num7 = inClose[i - 2];
                        }
                        num6 = (inHigh[i - 2] - num8) + (num7 - inLow[i - 2]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[3].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[BodyTrailingIdx] - inOpen[BodyTrailingIdx]));
            }
            else {
                double num4;
                if (Globals.candleSettings[3].rangeType == RangeType.HighLow) {
                    num4 = inHigh[BodyTrailingIdx] - inLow[BodyTrailingIdx];
                }
                else {
                    double num;
                    if (Globals.candleSettings[3].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[BodyTrailingIdx] >= inOpen[BodyTrailingIdx]) {
                            num3 = inClose[BodyTrailingIdx];
                        }
                        else {
                            num3 = inOpen[BodyTrailingIdx];
                        }
                        if (inClose[BodyTrailingIdx] >= inOpen[BodyTrailingIdx]) {
                            num2 = inOpen[BodyTrailingIdx];
                        }
                        else {
                            num2 = inClose[BodyTrailingIdx];
                        }
                        num = (inHigh[BodyTrailingIdx] - num3) + (num2 - inLow[BodyTrailingIdx]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            BodyPeriodTotal += num10 - num5;
            i++;
            BodyTrailingIdx++;
            if (i <= endIdx) {
                goto Label_014D;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlUnique3River(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            double num15;
            double num20;
            double num28;
            double num34;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlUnique3RiverLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double BodyLongPeriodTotal = 0.0;
            double BodyShortPeriodTotal = 0.0;
            int BodyLongTrailingIdx = (startIdx - 2) - Globals.candleSettings[0].avgPeriod;
            int BodyShortTrailingIdx = startIdx - Globals.candleSettings[2].avgPeriod;
            int i = BodyLongTrailingIdx;
            while (true) {
                double num44;
                if (i >= (startIdx - 2)) {
                    break;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num44 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num43;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num43 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num40;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num41;
                            double num42;
                            if (inClose[i] >= inOpen[i]) {
                                num42 = inClose[i];
                            }
                            else {
                                num42 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num41 = inOpen[i];
                            }
                            else {
                                num41 = inClose[i];
                            }
                            num40 = (inHigh[i] - num42) + (num41 - inLow[i]);
                        }
                        else {
                            num40 = 0.0;
                        }
                        num43 = num40;
                    }
                    num44 = num43;
                }
                BodyLongPeriodTotal += num44;
                i++;
            }
            i = BodyShortTrailingIdx;
            while (true) {
                double num39;
                if (i >= startIdx) {
                    break;
                }
                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                    num39 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num38;
                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                        num38 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num35;
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            double num36;
                            double num37;
                            if (inClose[i] >= inOpen[i]) {
                                num37 = inClose[i];
                            }
                            else {
                                num37 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num36 = inOpen[i];
                            }
                            else {
                                num36 = inClose[i];
                            }
                            num35 = (inHigh[i] - num37) + (num36 - inLow[i]);
                        }
                        else {
                            num35 = 0.0;
                        }
                        num38 = num35;
                    }
                    num39 = num38;
                }
                BodyShortPeriodTotal += num39;
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            Label_0234:
            if (Globals.candleSettings[0].avgPeriod != 0.0) {
                num34 = BodyLongPeriodTotal / ((double)Globals.candleSettings[0].avgPeriod);
            }
            else {
                double num33;
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num33 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                }
                else {
                    double num32;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num32 = inHigh[i - 2] - inLow[i - 2];
                    }
                    else {
                        double num29;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num30;
                            double num31;
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num31 = inClose[i - 2];
                            }
                            else {
                                num31 = inOpen[i - 2];
                            }
                            if (inClose[i - 2] >= inOpen[i - 2]) {
                                num30 = inOpen[i - 2];
                            }
                            else {
                                num30 = inClose[i - 2];
                            }
                            num29 = (inHigh[i - 2] - num31) + (num30 - inLow[i - 2]);
                        }
                        else {
                            num29 = 0.0;
                        }
                        num32 = num29;
                    }
                    num33 = num32;
                }
                num34 = num33;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                num28 = 2.0;
            }
            else {
                num28 = 1.0;
            }
            if (((((Math.Abs((double)(inClose[i - 2] - inOpen[i - 2])) > ((Globals.candleSettings[0].factor * num34) / num28)) && (((inClose[i - 2] < inOpen[i - 2]) ? -1 : 1) == -1)) && (((inClose[i - 1] < inOpen[i - 1]) ? -1 : 1) == -1)) && ((inClose[i - 1] > inClose[i - 2]) && (inOpen[i - 1] <= inOpen[i - 2]))) && (inLow[i - 1] < inLow[i - 2])) {
                double num21;
                double num27;
                if (Globals.candleSettings[2].avgPeriod != 0.0) {
                    num27 = BodyShortPeriodTotal / ((double)Globals.candleSettings[2].avgPeriod);
                }
                else {
                    double num26;
                    if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                        num26 = Math.Abs((double)(inClose[i] - inOpen[i]));
                    }
                    else {
                        double num25;
                        if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                            num25 = inHigh[i] - inLow[i];
                        }
                        else {
                            double num22;
                            if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                                double num23;
                                double num24;
                                if (inClose[i] >= inOpen[i]) {
                                    num24 = inClose[i];
                                }
                                else {
                                    num24 = inOpen[i];
                                }
                                if (inClose[i] >= inOpen[i]) {
                                    num23 = inOpen[i];
                                }
                                else {
                                    num23 = inClose[i];
                                }
                                num22 = (inHigh[i] - num24) + (num23 - inLow[i]);
                            }
                            else {
                                num22 = 0.0;
                            }
                            num25 = num22;
                        }
                        num26 = num25;
                    }
                    num27 = num26;
                }
                if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                    num21 = 2.0;
                }
                else {
                    num21 = 1.0;
                }
                if (((Math.Abs((double)(inClose[i] - inOpen[i])) < ((Globals.candleSettings[2].factor * num27) / num21)) && (((inClose[i] < inOpen[i]) ? -1 : 1) == 1)) && (inOpen[i] > inLow[i - 1])) {
                    outInteger[outIdx] = 100;
                    outIdx++;
                    goto Label_055F;
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_055F:
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num20 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
            }
            else {
                double num19;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num19 = inHigh[i - 2] - inLow[i - 2];
                }
                else {
                    double num16;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num17;
                        double num18;
                        if (inClose[i - 2] >= inOpen[i - 2]) {
                            num18 = inClose[i - 2];
                        }
                        else {
                            num18 = inOpen[i - 2];
                        }
                        if (inClose[i - 2] >= inOpen[i - 2]) {
                            num17 = inOpen[i - 2];
                        }
                        else {
                            num17 = inClose[i - 2];
                        }
                        num16 = (inHigh[i - 2] - num18) + (num17 - inLow[i - 2]);
                    }
                    else {
                        num16 = 0.0;
                    }
                    num19 = num16;
                }
                num20 = num19;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num15 = Math.Abs((double)(inClose[BodyLongTrailingIdx] - inOpen[BodyLongTrailingIdx]));
            }
            else {
                double num14;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num14 = inHigh[BodyLongTrailingIdx] - inLow[BodyLongTrailingIdx];
                }
                else {
                    double num11;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num12;
                        double num13;
                        if (inClose[BodyLongTrailingIdx] >= inOpen[BodyLongTrailingIdx]) {
                            num13 = inClose[BodyLongTrailingIdx];
                        }
                        else {
                            num13 = inOpen[BodyLongTrailingIdx];
                        }
                        if (inClose[BodyLongTrailingIdx] >= inOpen[BodyLongTrailingIdx]) {
                            num12 = inOpen[BodyLongTrailingIdx];
                        }
                        else {
                            num12 = inClose[BodyLongTrailingIdx];
                        }
                        num11 = (inHigh[BodyLongTrailingIdx] - num13) + (num12 - inLow[BodyLongTrailingIdx]);
                    }
                    else {
                        num11 = 0.0;
                    }
                    num14 = num11;
                }
                num15 = num14;
            }
            BodyLongPeriodTotal += num20 - num15;
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i] - inOpen[i]));
            }
            else {
                double num9;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i] - inLow[i];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i] >= inOpen[i]) {
                            num8 = inClose[i];
                        }
                        else {
                            num8 = inOpen[i];
                        }
                        if (inClose[i] >= inOpen[i]) {
                            num7 = inOpen[i];
                        }
                        else {
                            num7 = inClose[i];
                        }
                        num6 = (inHigh[i] - num8) + (num7 - inLow[i]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[BodyShortTrailingIdx] - inOpen[BodyShortTrailingIdx]));
            }
            else {
                double num4;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num4 = inHigh[BodyShortTrailingIdx] - inLow[BodyShortTrailingIdx];
                }
                else {
                    double num;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[BodyShortTrailingIdx] >= inOpen[BodyShortTrailingIdx]) {
                            num3 = inClose[BodyShortTrailingIdx];
                        }
                        else {
                            num3 = inOpen[BodyShortTrailingIdx];
                        }
                        if (inClose[BodyShortTrailingIdx] >= inOpen[BodyShortTrailingIdx]) {
                            num2 = inOpen[BodyShortTrailingIdx];
                        }
                        else {
                            num2 = inClose[BodyShortTrailingIdx];
                        }
                        num = (inHigh[BodyShortTrailingIdx] - num3) + (num2 - inLow[BodyShortTrailingIdx]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            BodyShortPeriodTotal += num10 - num5;
            i++;
            BodyLongTrailingIdx++;
            BodyShortTrailingIdx++;
            if (i <= endIdx) {
                goto Label_0234;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlUpsideGap2Crows(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            double num5;
            double num10;
            double num15;
            double num20;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlUpsideGap2CrowsLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double BodyLongPeriodTotal = 0.0;
            double BodyShortPeriodTotal = 0.0;
            int BodyLongTrailingIdx = (startIdx - 2) - Globals.candleSettings[0].avgPeriod;
            int BodyShortTrailingIdx = (startIdx - 1) - Globals.candleSettings[2].avgPeriod;
            int i = BodyLongTrailingIdx;
            while (true) {
                double num46;
                if (i >= (startIdx - 2)) {
                    break;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                    num46 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num45;
                    if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                        num45 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num42;
                        if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                            double num43;
                            double num44;
                            if (inClose[i] >= inOpen[i]) {
                                num44 = inClose[i];
                            }
                            else {
                                num44 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num43 = inOpen[i];
                            }
                            else {
                                num43 = inClose[i];
                            }
                            num42 = (inHigh[i] - num44) + (num43 - inLow[i]);
                        }
                        else {
                            num42 = 0.0;
                        }
                        num45 = num42;
                    }
                    num46 = num45;
                }
                BodyLongPeriodTotal += num46;
                i++;
            }
            i = BodyShortTrailingIdx;
            while (true) {
                double num41;
                if (i >= (startIdx - 1)) {
                    break;
                }
                if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                    num41 = Math.Abs((double)(inClose[i] - inOpen[i]));
                }
                else {
                    double num40;
                    if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                        num40 = inHigh[i] - inLow[i];
                    }
                    else {
                        double num37;
                        if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                            double num38;
                            double num39;
                            if (inClose[i] >= inOpen[i]) {
                                num39 = inClose[i];
                            }
                            else {
                                num39 = inOpen[i];
                            }
                            if (inClose[i] >= inOpen[i]) {
                                num38 = inOpen[i];
                            }
                            else {
                                num38 = inClose[i];
                            }
                            num37 = (inHigh[i] - num39) + (num38 - inLow[i]);
                        }
                        else {
                            num37 = 0.0;
                        }
                        num40 = num37;
                    }
                    num41 = num40;
                }
                BodyShortPeriodTotal += num41;
                i++;
            }
            i = startIdx;
            int outIdx = 0;
            Label_0238:
            if (inClose[i - 2] >= inOpen[i - 2]) {
                double num30;
                double num36;
                if (Globals.candleSettings[0].avgPeriod != 0.0) {
                    num36 = BodyLongPeriodTotal / ((double)Globals.candleSettings[0].avgPeriod);
                }
                else {
                    double num35;
                    if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                        num35 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
                    }
                    else {
                        double num34;
                        if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                            num34 = inHigh[i - 2] - inLow[i - 2];
                        }
                        else {
                            double num31;
                            if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                                double num32;
                                double num33;
                                if (inClose[i - 2] >= inOpen[i - 2]) {
                                    num33 = inClose[i - 2];
                                }
                                else {
                                    num33 = inOpen[i - 2];
                                }
                                if (inClose[i - 2] >= inOpen[i - 2]) {
                                    num32 = inOpen[i - 2];
                                }
                                else {
                                    num32 = inClose[i - 2];
                                }
                                num31 = (inHigh[i - 2] - num33) + (num32 - inLow[i - 2]);
                            }
                            else {
                                num31 = 0.0;
                            }
                            num34 = num31;
                        }
                        num35 = num34;
                    }
                    num36 = num35;
                }
                if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                    num30 = 2.0;
                }
                else {
                    num30 = 1.0;
                }
                if ((Math.Abs((double)(inClose[i - 2] - inOpen[i - 2])) > ((Globals.candleSettings[0].factor * num36) / num30)) && (((inClose[i - 1] < inOpen[i - 1]) ? -1 : 1) == -1)) {
                    double num23;
                    double num29;
                    if (Globals.candleSettings[2].avgPeriod != 0.0) {
                        num29 = BodyShortPeriodTotal / ((double)Globals.candleSettings[2].avgPeriod);
                    }
                    else {
                        double num28;
                        if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                            num28 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
                        }
                        else {
                            double num27;
                            if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                                num27 = inHigh[i - 1] - inLow[i - 1];
                            }
                            else {
                                double num24;
                                if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                                    double num25;
                                    double num26;
                                    if (inClose[i - 1] >= inOpen[i - 1]) {
                                        num26 = inClose[i - 1];
                                    }
                                    else {
                                        num26 = inOpen[i - 1];
                                    }
                                    if (inClose[i - 1] >= inOpen[i - 1]) {
                                        num25 = inOpen[i - 1];
                                    }
                                    else {
                                        num25 = inClose[i - 1];
                                    }
                                    num24 = (inHigh[i - 1] - num26) + (num25 - inLow[i - 1]);
                                }
                                else {
                                    num24 = 0.0;
                                }
                                num27 = num24;
                            }
                            num28 = num27;
                        }
                        num29 = num28;
                    }
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        num23 = 2.0;
                    }
                    else {
                        num23 = 1.0;
                    }
                    if (Math.Abs((double)(inClose[i - 1] - inOpen[i - 1])) <= ((Globals.candleSettings[2].factor * num29) / num23)) {
                        double num21;
                        double num22;
                        if (inOpen[i - 1] < inClose[i - 1]) {
                            num22 = inOpen[i - 1];
                        }
                        else {
                            num22 = inClose[i - 1];
                        }
                        if (inOpen[i - 2] > inClose[i - 2]) {
                            num21 = inOpen[i - 2];
                        }
                        else {
                            num21 = inClose[i - 2];
                        }
                        if ((((num22 > num21) && (((inClose[i] < inOpen[i]) ? -1 : 1) == -1)) && ((inOpen[i] > inOpen[i - 1]) && (inClose[i] < inClose[i - 1]))) && (inClose[i] > inClose[i - 2])) {
                            outInteger[outIdx] = -100;
                            outIdx++;
                            goto Label_05B1;
                        }
                    }
                }
            }
            outInteger[outIdx] = 0;
            outIdx++;
            Label_05B1:
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num20 = Math.Abs((double)(inClose[i - 2] - inOpen[i - 2]));
            }
            else {
                double num19;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num19 = inHigh[i - 2] - inLow[i - 2];
                }
                else {
                    double num16;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num17;
                        double num18;
                        if (inClose[i - 2] >= inOpen[i - 2]) {
                            num18 = inClose[i - 2];
                        }
                        else {
                            num18 = inOpen[i - 2];
                        }
                        if (inClose[i - 2] >= inOpen[i - 2]) {
                            num17 = inOpen[i - 2];
                        }
                        else {
                            num17 = inClose[i - 2];
                        }
                        num16 = (inHigh[i - 2] - num18) + (num17 - inLow[i - 2]);
                    }
                    else {
                        num16 = 0.0;
                    }
                    num19 = num16;
                }
                num20 = num19;
            }
            if (Globals.candleSettings[0].rangeType == RangeType.RealBody) {
                num15 = Math.Abs((double)(inClose[BodyLongTrailingIdx] - inOpen[BodyLongTrailingIdx]));
            }
            else {
                double num14;
                if (Globals.candleSettings[0].rangeType == RangeType.HighLow) {
                    num14 = inHigh[BodyLongTrailingIdx] - inLow[BodyLongTrailingIdx];
                }
                else {
                    double num11;
                    if (Globals.candleSettings[0].rangeType == RangeType.Shadows) {
                        double num12;
                        double num13;
                        if (inClose[BodyLongTrailingIdx] >= inOpen[BodyLongTrailingIdx]) {
                            num13 = inClose[BodyLongTrailingIdx];
                        }
                        else {
                            num13 = inOpen[BodyLongTrailingIdx];
                        }
                        if (inClose[BodyLongTrailingIdx] >= inOpen[BodyLongTrailingIdx]) {
                            num12 = inOpen[BodyLongTrailingIdx];
                        }
                        else {
                            num12 = inClose[BodyLongTrailingIdx];
                        }
                        num11 = (inHigh[BodyLongTrailingIdx] - num13) + (num12 - inLow[BodyLongTrailingIdx]);
                    }
                    else {
                        num11 = 0.0;
                    }
                    num14 = num11;
                }
                num15 = num14;
            }
            BodyLongPeriodTotal += num20 - num15;
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num10 = Math.Abs((double)(inClose[i - 1] - inOpen[i - 1]));
            }
            else {
                double num9;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num9 = inHigh[i - 1] - inLow[i - 1];
                }
                else {
                    double num6;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num7;
                        double num8;
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num8 = inClose[i - 1];
                        }
                        else {
                            num8 = inOpen[i - 1];
                        }
                        if (inClose[i - 1] >= inOpen[i - 1]) {
                            num7 = inOpen[i - 1];
                        }
                        else {
                            num7 = inClose[i - 1];
                        }
                        num6 = (inHigh[i - 1] - num8) + (num7 - inLow[i - 1]);
                    }
                    else {
                        num6 = 0.0;
                    }
                    num9 = num6;
                }
                num10 = num9;
            }
            if (Globals.candleSettings[2].rangeType == RangeType.RealBody) {
                num5 = Math.Abs((double)(inClose[BodyShortTrailingIdx] - inOpen[BodyShortTrailingIdx]));
            }
            else {
                double num4;
                if (Globals.candleSettings[2].rangeType == RangeType.HighLow) {
                    num4 = inHigh[BodyShortTrailingIdx] - inLow[BodyShortTrailingIdx];
                }
                else {
                    double num;
                    if (Globals.candleSettings[2].rangeType == RangeType.Shadows) {
                        double num2;
                        double num3;
                        if (inClose[BodyShortTrailingIdx] >= inOpen[BodyShortTrailingIdx]) {
                            num3 = inClose[BodyShortTrailingIdx];
                        }
                        else {
                            num3 = inOpen[BodyShortTrailingIdx];
                        }
                        if (inClose[BodyShortTrailingIdx] >= inOpen[BodyShortTrailingIdx]) {
                            num2 = inOpen[BodyShortTrailingIdx];
                        }
                        else {
                            num2 = inClose[BodyShortTrailingIdx];
                        }
                        num = (inHigh[BodyShortTrailingIdx] - num3) + (num2 - inLow[BodyShortTrailingIdx]);
                    }
                    else {
                        num = 0.0;
                    }
                    num4 = num;
                }
                num5 = num4;
            }
            BodyShortPeriodTotal += num10 - num5;
            i++;
            BodyLongTrailingIdx++;
            BodyShortTrailingIdx++;
            if (i <= endIdx) {
                goto Label_0238;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode CdlXSideGap3Methods(int startIdx,int endIdx,double[] inOpen,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,int[] outInteger,SmartQuant.ISeries inBar)
        {
            int num;
            double num2;
            double num3;
            double num6;
            double num7;
            double num8;
            double num9;
            int num10;
            int num11;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inOpen == null) || (inHigh == null)) || ((inLow == null) || (inClose == null))) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = CdlXSideGap3MethodsLookback();
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            int i = startIdx;
            int outIdx = 0;
            Label_0063:
            if (inClose[i - 1] >= inOpen[i - 1]) {
                num11 = 1;
            }
            else {
                num11 = -1;
            }
            if (((inClose[i - 2] < inOpen[i - 2]) ? -1 : 1) != num11) {
                goto Label_0229;
            }
            if (inClose[i] >= inOpen[i]) {
                num10 = 1;
            }
            else {
                num10 = -1;
            }
            if (((inClose[i - 1] < inOpen[i - 1]) ? -1 : 1) != -num10) {
                goto Label_0229;
            }
            if (inClose[i - 1] > inOpen[i - 1]) {
                num9 = inClose[i - 1];
            }
            else {
                num9 = inOpen[i - 1];
            }
            if (inOpen[i] >= num9) {
                goto Label_0229;
            }
            if (inClose[i - 1] < inOpen[i - 1]) {
                num8 = inClose[i - 1];
            }
            else {
                num8 = inOpen[i - 1];
            }
            if (inOpen[i] <= num8) {
                goto Label_0229;
            }
            if (inClose[i - 2] > inOpen[i - 2]) {
                num7 = inClose[i - 2];
            }
            else {
                num7 = inOpen[i - 2];
            }
            if (inClose[i] >= num7) {
                goto Label_0229;
            }
            if (inClose[i - 2] < inOpen[i - 2]) {
                num6 = inClose[i - 2];
            }
            else {
                num6 = inOpen[i - 2];
            }
            if (inClose[i] <= num6) {
                goto Label_0229;
            }
            if (inClose[i - 2] >= inOpen[i - 2]) {
                double num4;
                double num5;
                if (inOpen[i - 1] < inClose[i - 1]) {
                    num5 = inOpen[i - 1];
                }
                else {
                    num5 = inClose[i - 1];
                }
                if (inOpen[i - 2] > inClose[i - 2]) {
                    num4 = inOpen[i - 2];
                }
                else {
                    num4 = inClose[i - 2];
                }
                if (num5 > num4) {
                    goto Label_0208;
                }
            }
            if (((inClose[i - 2] < inOpen[i - 2]) ? -1 : 1) != -1) {
                goto Label_0229;
            }
            if (inOpen[i - 1] > inClose[i - 1]) {
                num3 = inOpen[i - 1];
            }
            else {
                num3 = inClose[i - 1];
            }
            if (inOpen[i - 2] < inClose[i - 2]) {
                num2 = inOpen[i - 2];
            }
            else {
                num2 = inClose[i - 2];
            }
            if (num3 >= num2) {
                goto Label_0229;
            }
            Label_0208:
            if (inClose[i - 2] >= inOpen[i - 2]) {
                num = 1;
            }
            else {
                num = -1;
            }
            outInteger[outIdx] = num * 100;
            outIdx++;
            goto Label_0232;
            Label_0229:
            outInteger[outIdx] = 0;
            outIdx++;
            Label_0232:
            i++;
            if (i <= endIdx) {
                goto Label_0063;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode Ceil(int startIdx,int endIdx,SmartQuant.ISeries inReal,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int i = startIdx;
            int outIdx = 0;
            while (i <= endIdx) {
                outReal[outIdx] = Math.Ceiling(inReal[i]);
                i++;
                outIdx++;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode Cmo(int startIdx,int endIdx,SmartQuant.ISeries inReal,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 14;
            }
            else if ((optInTimePeriod < 2) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            outBegIdx = 0;
            outNBElement = 0;
            int lookbackTotal = CmoLookback(optInTimePeriod);
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx <= endIdx) {
                double prevLoss;
                double prevGain;
                double tempValue1;
                double tempValue2;
                int i;
                int outIdx = 0;
                if (optInTimePeriod == 1) {
                    outBegIdx = startIdx;
                    i = (endIdx - startIdx) + 1;
                    outNBElement = i;
                    Array.Copy(inReal, startIdx, outReal, 0, i);
                    return RetCode.Success;
                }
                int today = startIdx - lookbackTotal;
                double prevValue = inReal[today];
                if ((Globals.unstablePeriod[3] == 0) && (Globals.compatibility == Compatibility.Metastock)) {
                    double savePrevValue = prevValue;
                    prevGain = 0.0;
                    prevLoss = 0.0;
                    for (i = optInTimePeriod; i > 0; i--) {
                        tempValue1 = inReal[today];
                        today++;
                        tempValue2 = tempValue1 - prevValue;
                        prevValue = tempValue1;
                        if (tempValue2 < 0.0) {
                            prevLoss -= tempValue2;
                        }
                        else {
                            prevGain += tempValue2;
                        }
                    }
                    tempValue1 = prevLoss / ((double)optInTimePeriod);
                    tempValue2 = prevGain / ((double)optInTimePeriod);
                    double tempValue3 = tempValue2 - tempValue1;
                    double tempValue4 = tempValue1 + tempValue2;
                    if ((-1E-08 >= tempValue4) || (tempValue4 >= 1E-08)) {
                        outReal[outIdx] = 100.0 * (tempValue3 / tempValue4);
                        outIdx++;
                    }
                    else {
                        outReal[outIdx] = 0.0;
                        outIdx++;
                    }
                    if (today > endIdx) {
                        outBegIdx = startIdx;
                        outNBElement = outIdx;
                        return RetCode.Success;
                    }
                    today -= optInTimePeriod;
                    prevValue = savePrevValue;
                }
                prevGain = 0.0;
                prevLoss = 0.0;
                today++;
                for (i = optInTimePeriod; i > 0; i--) {
                    tempValue1 = inReal[today];
                    today++;
                    tempValue2 = tempValue1 - prevValue;
                    prevValue = tempValue1;
                    if (tempValue2 < 0.0) {
                        prevLoss -= tempValue2;
                    }
                    else {
                        prevGain += tempValue2;
                    }
                }
                prevLoss /= (double)optInTimePeriod;
                prevGain /= (double)optInTimePeriod;
                if (today > startIdx) {
                    tempValue1 = prevGain + prevLoss;
                    if ((-1E-08 >= tempValue1) || (tempValue1 >= 1E-08)) {
                        outReal[outIdx] = 100.0 * ((prevGain - prevLoss) / tempValue1);
                        outIdx++;
                    }
                    else {
                        outReal[outIdx] = 0.0;
                        outIdx++;
                    }
                }
                else {
                    while (today < startIdx) {
                        tempValue1 = inReal[today];
                        tempValue2 = tempValue1 - prevValue;
                        prevValue = tempValue1;
                        prevLoss *= optInTimePeriod - 1;
                        prevGain *= optInTimePeriod - 1;
                        if (tempValue2 < 0.0) {
                            prevLoss -= tempValue2;
                        }
                        else {
                            prevGain += tempValue2;
                        }
                        prevLoss /= (double)optInTimePeriod;
                        prevGain /= (double)optInTimePeriod;
                        today++;
                    }
                }
                while (today <= endIdx) {
                    tempValue1 = inReal[today];
                    today++;
                    tempValue2 = tempValue1 - prevValue;
                    prevValue = tempValue1;
                    prevLoss *= optInTimePeriod - 1;
                    prevGain *= optInTimePeriod - 1;
                    if (tempValue2 < 0.0) {
                        prevLoss -= tempValue2;
                    }
                    else {
                        prevGain += tempValue2;
                    }
                    prevLoss /= (double)optInTimePeriod;
                    prevGain /= (double)optInTimePeriod;
                    tempValue1 = prevGain + prevLoss;
                    if ((-1E-08 >= tempValue1) || (tempValue1 >= 1E-08)) {
                        outReal[outIdx] = 100.0 * ((prevGain - prevLoss) / tempValue1);
                        outIdx++;
                    }
                    else {
                        outReal[outIdx] = 0.0;
                        outIdx++;
                    }
                }
                outBegIdx = startIdx;
                outNBElement = outIdx;
            }
            return RetCode.Success;
        }
        public static RetCode Correl(int startIdx,int endIdx,SmartQuant.ISeries inReal0,SmartQuant.ISeries inReal1,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            double y;
            double x;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal0 == null) {
                return RetCode.BadParam;
            }
            if (inReal1 == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 30;
            }
            else if ((optInTimePeriod < 1) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = optInTimePeriod - 1;
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            outBegIdx = startIdx;
            int trailingIdx = startIdx - lookbackTotal;
            double sumY2 = 0.0;
            double sumX2 = sumY2;
            double sumY = sumX2;
            double sumX = sumY;
            double sumXY = sumX;
            int today = trailingIdx;
            while (today <= startIdx) {
                x = inReal0[today];
                sumX += x;
                sumX2 += x * x;
                y = inReal1[today];
                sumXY += x * y;
                sumY += y;
                sumY2 += y * y;
                today++;
            }
            double trailingX = inReal0[trailingIdx];
            double trailingY = inReal1[trailingIdx];
            trailingIdx++;
            double tempReal = (sumX2 - ((sumX * sumX) / ((double)optInTimePeriod))) * (sumY2 - ((sumY * sumY) / ((double)optInTimePeriod)));
            if (tempReal >= 1E-08) {
                outReal[0] = (sumXY - ((sumX * sumY) / ((double)optInTimePeriod))) / Math.Sqrt(tempReal);
            }
            else {
                outReal[0] = 0.0;
            }
            int outIdx = 1;
            while (today <= endIdx) {
                sumX -= trailingX;
                sumX2 -= trailingX * trailingX;
                sumXY -= trailingX * trailingY;
                sumY -= trailingY;
                sumY2 -= trailingY * trailingY;
                x = inReal0[today];
                sumX += x;
                sumX2 += x * x;
                y = inReal1[today];
                today++;
                sumXY += x * y;
                sumY += y;
                sumY2 += y * y;
                trailingX = inReal0[trailingIdx];
                trailingY = inReal1[trailingIdx];
                trailingIdx++;
                tempReal = (sumX2 - ((sumX * sumX) / ((double)optInTimePeriod))) * (sumY2 - ((sumY * sumY) / ((double)optInTimePeriod)));
                if (tempReal >= 1E-08) {
                    outReal[outIdx] = (sumXY - ((sumX * sumY) / ((double)optInTimePeriod))) / Math.Sqrt(tempReal);
                    outIdx++;
                }
                else {
                    outReal[outIdx] = 0.0;
                    outIdx++;
                }
            }
            outNBElement = outIdx;
            return RetCode.Success;
        }
        public static RetCode Cos(int startIdx,int endIdx,SmartQuant.ISeries inReal,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int i = startIdx;
            int outIdx = 0;
            while (i <= endIdx) {
                outReal[outIdx] = Math.Cos(inReal[i]);
                i++;
                outIdx++;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode Cosh(int startIdx,int endIdx,SmartQuant.ISeries inReal,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int i = startIdx;
            int outIdx = 0;
            while (i <= endIdx) {
                outReal[outIdx] = Math.Cosh(inReal[i]);
                i++;
                outIdx++;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode Dema(int startIdx,int endIdx,SmartQuant.ISeries inReal,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 30;
            }
            else if ((optInTimePeriod < 2) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            outNBElement = 0;
            outBegIdx = 0;
            int lookbackEMA = EmaLookback(optInTimePeriod);
            int lookbackTotal = lookbackEMA * 2;
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx <= endIdx) {
                double[] firstEMA;
                int firstEMANbElement = 0;
                int secondEMANbElement = 0;
                int secondEMABegIdx = 0;
                int firstEMABegIdx = 0;
                if (inReal == outReal) {
                    firstEMA = outReal;
                }
                else {
                    int tempInt = (lookbackTotal + (endIdx - startIdx)) + 1;
                    firstEMA = new double[tempInt];
                    if (firstEMA == null) {
                        return RetCode.AllocErr;
                    }
                }
                double k = 2.0 / ((double)(optInTimePeriod + 1));
                RetCode retCode = TA_INT_EMA(startIdx - lookbackEMA, endIdx, inReal, optInTimePeriod, k, ref firstEMABegIdx, ref firstEMANbElement, firstEMA);
                if ((retCode != RetCode.Success) || (firstEMANbElement == 0)) {
                    return retCode;
                }
                double[] secondEMA = new double[firstEMANbElement];
                if (secondEMA == null) {
                    return RetCode.AllocErr;
                }
                retCode = TA_INT_EMA(0, firstEMANbElement - 1, firstEMA, optInTimePeriod, k, ref secondEMABegIdx, ref secondEMANbElement, secondEMA);
                if ((retCode != RetCode.Success) || (secondEMANbElement == 0)) {
                    return retCode;
                }
                int firstEMAIdx = secondEMABegIdx;
                int outIdx = 0;
                while (true) {
                    if (outIdx >= secondEMANbElement) {
                        break;
                    }
                    outReal[outIdx] = (2.0 * firstEMA[firstEMAIdx]) - secondEMA[outIdx];
                    firstEMAIdx++;
                    outIdx++;
                }
                outBegIdx = firstEMABegIdx + secondEMABegIdx;
                outNBElement = outIdx;
            }
            return RetCode.Success;
        }
        public static RetCode Div(int startIdx,int endIdx,SmartQuant.ISeries inReal0,SmartQuant.ISeries inReal1,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal0 == null) {
                return RetCode.BadParam;
            }
            if (inReal1 == null) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int i = startIdx;
            int outIdx = 0;
            while (i <= endIdx) {
                outReal[outIdx] = inReal0[i] / inReal1[i];
                i++;
                outIdx++;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode Dx(int startIdx,int endIdx,double[] inHigh,double[] inLow,double[] inClose,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outReal,SmartQuant.ISeries inBar)
        {
            double tempReal;
            double tempReal2;
            double diffM;
            double diffP;
            double plusDI;
            double minusDI;
            int lookbackTotal;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inHigh == null) || (inLow == null)) || (inClose == null)) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 14;
            }
            else if ((optInTimePeriod < 2) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod > 1) {
                lookbackTotal = optInTimePeriod + ((int)Globals.unstablePeriod[4]);
            }
            else {
                lookbackTotal = 2;
            }
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            int outIdx = 0;
            int today = startIdx;
            outBegIdx = today;
            double prevMinusDM = 0.0;
            double prevPlusDM = 0.0;
            double prevTR = 0.0;
            today = startIdx - lookbackTotal;
            double prevHigh = inHigh[today];
            double prevLow = inLow[today];
            double prevClose = inClose[today];
            int i = optInTimePeriod - 1;
            while (true) {
                i--;
                if (i <= 0) {
                    break;
                }
                today++;
                tempReal = inHigh[today];
                diffP = tempReal - prevHigh;
                prevHigh = tempReal;
                tempReal = inLow[today];
                diffM = prevLow - tempReal;
                prevLow = tempReal;
                if ((diffM > 0.0) && (diffP < diffM)) {
                    prevMinusDM += diffM;
                }
                else if ((diffP > 0.0) && (diffP > diffM)) {
                    prevPlusDM += diffP;
                }
                tempReal = prevHigh - prevLow;
                tempReal2 = Math.Abs((double)(prevHigh - prevClose));
                if (tempReal2 > tempReal) {
                    tempReal = tempReal2;
                }
                tempReal2 = Math.Abs((double)(prevLow - prevClose));
                if (tempReal2 > tempReal) {
                    tempReal = tempReal2;
                }
                prevTR += tempReal;
                prevClose = inClose[today];
            }
            i = ((int)Globals.unstablePeriod[4]) + 1;
            while (true) {
                i--;
                if (i == 0) {
                    break;
                }
                today++;
                tempReal = inHigh[today];
                diffP = tempReal - prevHigh;
                prevHigh = tempReal;
                tempReal = inLow[today];
                diffM = prevLow - tempReal;
                prevLow = tempReal;
                prevMinusDM -= prevMinusDM / ((double)optInTimePeriod);
                prevPlusDM -= prevPlusDM / ((double)optInTimePeriod);
                if ((diffM > 0.0) && (diffP < diffM)) {
                    prevMinusDM += diffM;
                }
                else if ((diffP > 0.0) && (diffP > diffM)) {
                    prevPlusDM += diffP;
                }
                tempReal = prevHigh - prevLow;
                tempReal2 = Math.Abs((double)(prevHigh - prevClose));
                if (tempReal2 > tempReal) {
                    tempReal = tempReal2;
                }
                tempReal2 = Math.Abs((double)(prevLow - prevClose));
                if (tempReal2 > tempReal) {
                    tempReal = tempReal2;
                }
                prevTR = (prevTR - (prevTR / ((double)optInTimePeriod))) + tempReal;
                prevClose = inClose[today];
            }
            if ((-1E-08 >= prevTR) || (prevTR >= 1E-08)) {
                minusDI = 100.0 * (prevMinusDM / prevTR);
                plusDI = 100.0 * (prevPlusDM / prevTR);
                tempReal = minusDI + plusDI;
                if ((-1E-08 >= tempReal) || (tempReal >= 1E-08)) {
                    outReal[0] = 100.0 * (Math.Abs((double)(minusDI - plusDI)) / tempReal);
                }
                else {
                    outReal[0] = 0.0;
                }
            }
            else {
                outReal[0] = 0.0;
            }
            outIdx = 1;
            while (true) {
                if (today >= endIdx) {
                    break;
                }
                today++;
                tempReal = inHigh[today];
                diffP = tempReal - prevHigh;
                prevHigh = tempReal;
                tempReal = inLow[today];
                diffM = prevLow - tempReal;
                prevLow = tempReal;
                prevMinusDM -= prevMinusDM / ((double)optInTimePeriod);
                prevPlusDM -= prevPlusDM / ((double)optInTimePeriod);
                if ((diffM > 0.0) && (diffP < diffM)) {
                    prevMinusDM += diffM;
                }
                else if ((diffP > 0.0) && (diffP > diffM)) {
                    prevPlusDM += diffP;
                }
                tempReal = prevHigh - prevLow;
                tempReal2 = Math.Abs((double)(prevHigh - prevClose));
                if (tempReal2 > tempReal) {
                    tempReal = tempReal2;
                }
                tempReal2 = Math.Abs((double)(prevLow - prevClose));
                if (tempReal2 > tempReal) {
                    tempReal = tempReal2;
                }
                prevTR = (prevTR - (prevTR / ((double)optInTimePeriod))) + tempReal;
                prevClose = inClose[today];
                if ((-1E-08 >= prevTR) || (prevTR >= 1E-08)) {
                    minusDI = 100.0 * (prevMinusDM / prevTR);
                    plusDI = 100.0 * (prevPlusDM / prevTR);
                    tempReal = minusDI + plusDI;
                    if ((-1E-08 >= tempReal) || (tempReal >= 1E-08)) {
                        outReal[outIdx] = 100.0 * (Math.Abs((double)(minusDI - plusDI)) / tempReal);
                    }
                    else {
                        outReal[outIdx] = outReal[outIdx - 1];
                    }
                }
                else {
                    outReal[outIdx] = outReal[outIdx - 1];
                }
                outIdx++;
            }
            outNBElement = outIdx;
            return RetCode.Success;
        }
        public static RetCode Ema(int startIdx,int endIdx,SmartQuant.ISeries inReal,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 30;
            }
            else if ((optInTimePeriod < 2) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            return TA_INT_EMA(startIdx, endIdx, inReal, optInTimePeriod, 2.0 / ((double)(optInTimePeriod + 1)), ref outBegIdx, ref outNBElement, outReal);
        }
        public static RetCode Exp(int startIdx,int endIdx,SmartQuant.ISeries inReal,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int i = startIdx;
            int outIdx = 0;
            while (i <= endIdx) {
                outReal[outIdx] = Math.Exp(inReal[i]);
                i++;
                outIdx++;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode Floor(int startIdx,int endIdx,SmartQuant.ISeries inReal,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int i = startIdx;
            int outIdx = 0;
            while (i <= endIdx) {
                outReal[outIdx] = Math.Floor(inReal[i]);
                i++;
                outIdx++;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode HtDcPeriod(int startIdx,int endIdx,SmartQuant.ISeries inReal,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            double smoothedValue;
            const double a = 0.0962;
            const double b = 0.5769;
            double[] detrender_Odd = new double[3];
            double[] detrender_Even = new double[3];
            double[] Q1_Odd = new double[3];
            double[] Q1_Even = new double[3];
            double[] jI_Odd = new double[3];
            double[] jI_Even = new double[3];
            double[] jQ_Odd = new double[3];
            double[] jQ_Even = new double[3];
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            double rad2Deg = 180.0 / (4.0 * Math.Atan(1.0));
            int lookbackTotal = ((int)Globals.unstablePeriod[6]) + 0x20;
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            outBegIdx = startIdx;
            int trailingWMAIdx = startIdx - lookbackTotal;
            int today = trailingWMAIdx;
            double tempReal = inReal[today];
            today++;
            double periodWMASub = tempReal;
            double periodWMASum = tempReal;
            tempReal = inReal[today];
            today++;
            periodWMASub += tempReal;
            periodWMASum += tempReal * 2.0;
            tempReal = inReal[today];
            today++;
            periodWMASub += tempReal;
            periodWMASum += tempReal * 3.0;
            double trailingWMAValue = 0.0;
            int i = 9;
            do {
                tempReal = inReal[today];
                today++;
                periodWMASub += tempReal;
                periodWMASub -= trailingWMAValue;
                periodWMASum += tempReal * 4.0;
                trailingWMAValue = inReal[trailingWMAIdx];
                trailingWMAIdx++;
                smoothedValue = periodWMASum * 0.1;
                periodWMASum -= periodWMASub;
                i--;
            }
            while (i != 0);
            int hilbertIdx = 0;
            detrender_Odd[0] = 0.0;
            detrender_Odd[1] = 0.0;
            detrender_Odd[2] = 0.0;
            detrender_Even[0] = 0.0;
            detrender_Even[1] = 0.0;
            detrender_Even[2] = 0.0;
            double detrender = 0.0;
            double prev_detrender_Odd = 0.0;
            double prev_detrender_Even = 0.0;
            double prev_detrender_input_Odd = 0.0;
            double prev_detrender_input_Even = 0.0;
            Q1_Odd[0] = 0.0;
            Q1_Odd[1] = 0.0;
            Q1_Odd[2] = 0.0;
            Q1_Even[0] = 0.0;
            Q1_Even[1] = 0.0;
            Q1_Even[2] = 0.0;
            double Q1 = 0.0;
            double prev_Q1_Odd = 0.0;
            double prev_Q1_Even = 0.0;
            double prev_Q1_input_Odd = 0.0;
            double prev_Q1_input_Even = 0.0;
            jI_Odd[0] = 0.0;
            jI_Odd[1] = 0.0;
            jI_Odd[2] = 0.0;
            jI_Even[0] = 0.0;
            jI_Even[1] = 0.0;
            jI_Even[2] = 0.0;
            double jI = 0.0;
            double prev_jI_Odd = 0.0;
            double prev_jI_Even = 0.0;
            double prev_jI_input_Odd = 0.0;
            double prev_jI_input_Even = 0.0;
            jQ_Odd[0] = 0.0;
            jQ_Odd[1] = 0.0;
            jQ_Odd[2] = 0.0;
            jQ_Even[0] = 0.0;
            jQ_Even[1] = 0.0;
            jQ_Even[2] = 0.0;
            double jQ = 0.0;
            double prev_jQ_Odd = 0.0;
            double prev_jQ_Even = 0.0;
            double prev_jQ_input_Odd = 0.0;
            double prev_jQ_input_Even = 0.0;
            double period = 0.0;
            int outIdx = 0;
            double prevQ2 = 0.0;
            double prevI2 = prevQ2;
            double Im = 0.0;
            double Re = Im;
            double I1ForEvenPrev3 = 0.0;
            double I1ForOddPrev3 = I1ForEvenPrev3;
            double I1ForEvenPrev2 = 0.0;
            double I1ForOddPrev2 = I1ForEvenPrev2;
            double smoothPeriod = 0.0;
            while (true) {
                double hilbertTempReal;
                double I2;
                double Q2;
                if (today > endIdx) {
                    break;
                }
                double adjustedPrevPeriod = (0.075 * period) + 0.54;
                double todayValue = inReal[today];
                periodWMASub += todayValue;
                periodWMASub -= trailingWMAValue;
                periodWMASum += todayValue * 4.0;
                trailingWMAValue = inReal[trailingWMAIdx];
                trailingWMAIdx++;
                smoothedValue = periodWMASum * 0.1;
                periodWMASum -= periodWMASub;
                if ((today % 2) == 0) {
                    hilbertTempReal = a * smoothedValue;
                    detrender = -detrender_Even[hilbertIdx];
                    detrender_Even[hilbertIdx] = hilbertTempReal;
                    detrender += hilbertTempReal;
                    detrender -= prev_detrender_Even;
                    prev_detrender_Even = b * prev_detrender_input_Even;
                    detrender += prev_detrender_Even;
                    prev_detrender_input_Even = smoothedValue;
                    detrender *= adjustedPrevPeriod;
                    hilbertTempReal = a * detrender;
                    Q1 = -Q1_Even[hilbertIdx];
                    Q1_Even[hilbertIdx] = hilbertTempReal;
                    Q1 += hilbertTempReal;
                    Q1 -= prev_Q1_Even;
                    prev_Q1_Even = b * prev_Q1_input_Even;
                    Q1 += prev_Q1_Even;
                    prev_Q1_input_Even = detrender;
                    Q1 *= adjustedPrevPeriod;
                    hilbertTempReal = a * I1ForEvenPrev3;
                    jI = -jI_Even[hilbertIdx];
                    jI_Even[hilbertIdx] = hilbertTempReal;
                    jI += hilbertTempReal;
                    jI -= prev_jI_Even;
                    prev_jI_Even = b * prev_jI_input_Even;
                    jI += prev_jI_Even;
                    prev_jI_input_Even = I1ForEvenPrev3;
                    jI *= adjustedPrevPeriod;
                    hilbertTempReal = a * Q1;
                    jQ = -jQ_Even[hilbertIdx];
                    jQ_Even[hilbertIdx] = hilbertTempReal;
                    jQ += hilbertTempReal;
                    jQ -= prev_jQ_Even;
                    prev_jQ_Even = b * prev_jQ_input_Even;
                    jQ += prev_jQ_Even;
                    prev_jQ_input_Even = Q1;
                    jQ *= adjustedPrevPeriod;
                    hilbertIdx++;
                    if (hilbertIdx == 3) {
                        hilbertIdx = 0;
                    }
                    Q2 = (0.2 * (Q1 + jI)) + (0.8 * prevQ2);
                    I2 = (0.2 * (I1ForEvenPrev3 - jQ)) + (0.8 * prevI2);
                    I1ForOddPrev3 = I1ForOddPrev2;
                    I1ForOddPrev2 = detrender;
                }
                else {
                    hilbertTempReal = a * smoothedValue;
                    detrender = -detrender_Odd[hilbertIdx];
                    detrender_Odd[hilbertIdx] = hilbertTempReal;
                    detrender += hilbertTempReal;
                    detrender -= prev_detrender_Odd;
                    prev_detrender_Odd = b * prev_detrender_input_Odd;
                    detrender += prev_detrender_Odd;
                    prev_detrender_input_Odd = smoothedValue;
                    detrender *= adjustedPrevPeriod;
                    hilbertTempReal = a * detrender;
                    Q1 = -Q1_Odd[hilbertIdx];
                    Q1_Odd[hilbertIdx] = hilbertTempReal;
                    Q1 += hilbertTempReal;
                    Q1 -= prev_Q1_Odd;
                    prev_Q1_Odd = b * prev_Q1_input_Odd;
                    Q1 += prev_Q1_Odd;
                    prev_Q1_input_Odd = detrender;
                    Q1 *= adjustedPrevPeriod;
                    hilbertTempReal = a * I1ForOddPrev3;
                    jI = -jI_Odd[hilbertIdx];
                    jI_Odd[hilbertIdx] = hilbertTempReal;
                    jI += hilbertTempReal;
                    jI -= prev_jI_Odd;
                    prev_jI_Odd = b * prev_jI_input_Odd;
                    jI += prev_jI_Odd;
                    prev_jI_input_Odd = I1ForOddPrev3;
                    jI *= adjustedPrevPeriod;
                    hilbertTempReal = a * Q1;
                    jQ = -jQ_Odd[hilbertIdx];
                    jQ_Odd[hilbertIdx] = hilbertTempReal;
                    jQ += hilbertTempReal;
                    jQ -= prev_jQ_Odd;
                    prev_jQ_Odd = b * prev_jQ_input_Odd;
                    jQ += prev_jQ_Odd;
                    prev_jQ_input_Odd = Q1;
                    jQ *= adjustedPrevPeriod;
                    Q2 = (0.2 * (Q1 + jI)) + (0.8 * prevQ2);
                    I2 = (0.2 * (I1ForOddPrev3 - jQ)) + (0.8 * prevI2);
                    I1ForEvenPrev3 = I1ForEvenPrev2;
                    I1ForEvenPrev2 = detrender;
                }
                Re = (0.2 * ((I2 * prevI2) + (Q2 * prevQ2))) + (0.8 * Re);
                Im = (0.2 * ((I2 * prevQ2) - (Q2 * prevI2))) + (0.8 * Im);
                prevQ2 = Q2;
                prevI2 = I2;
                tempReal = period;
                if ((Im != 0.0) && (Re != 0.0)) {
                    period = 360.0 / (Math.Atan(Im / Re) * rad2Deg);
                }
                double tempReal2 = 1.5 * tempReal;
                if (period > tempReal2) {
                    period = tempReal2;
                }
                tempReal2 = 0.67 * tempReal;
                if (period < tempReal2) {
                    period = tempReal2;
                }
                if (period < 6.0) {
                    period = 6.0;
                }
                else if (period > 50.0) {
                    period = 50.0;
                }
                period = (0.2 * period) + (0.8 * tempReal);
                smoothPeriod = (0.33 * period) + (0.67 * smoothPeriod);
                if (today >= startIdx) {
                    outReal[outIdx] = smoothPeriod;
                    outIdx++;
                }
                today++;
            }
            outNBElement = outIdx;
            return RetCode.Success;
        }
        public static RetCode HtDcPhase(int startIdx,int endIdx,SmartQuant.ISeries inReal,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            double smoothedValue;
            const double a = 0.0962;
            const double b = 0.5769;
            double[] detrender_Odd = new double[3];
            double[] detrender_Even = new double[3];
            double[] Q1_Odd = new double[3];
            double[] Q1_Even = new double[3];
            double[] jI_Odd = new double[3];
            double[] jI_Even = new double[3];
            double[] jQ_Odd = new double[3];
            double[] jQ_Even = new double[3];
            int smoothPrice_Idx = 0;
            int maxIdx_smoothPrice = 0x31;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            double[] smoothPrice = new double[maxIdx_smoothPrice + 1];
            if (smoothPrice == null) {
                return RetCode.AllocErr;
            }
            double tempReal = Math.Atan(1.0);
            double rad2Deg = 45.0 / tempReal;
            double constDeg2RadBy360 = tempReal * 8.0;
            int lookbackTotal = ((int)Globals.unstablePeriod[7]) + 0x3f;
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            outBegIdx = startIdx;
            int trailingWMAIdx = startIdx - lookbackTotal;
            int today = trailingWMAIdx;
            tempReal = inReal[today];
            today++;
            double periodWMASub = tempReal;
            double periodWMASum = tempReal;
            tempReal = inReal[today];
            today++;
            periodWMASub += tempReal;
            periodWMASum += tempReal * 2.0;
            tempReal = inReal[today];
            today++;
            periodWMASub += tempReal;
            periodWMASum += tempReal * 3.0;
            double trailingWMAValue = 0.0;
            int i = 0x22;
            do {
                tempReal = inReal[today];
                today++;
                periodWMASub += tempReal;
                periodWMASub -= trailingWMAValue;
                periodWMASum += tempReal * 4.0;
                trailingWMAValue = inReal[trailingWMAIdx];
                trailingWMAIdx++;
                smoothedValue = periodWMASum * 0.1;
                periodWMASum -= periodWMASub;
                i--;
            }
            while (i != 0);
            int hilbertIdx = 0;
            detrender_Odd[0] = 0.0;
            detrender_Odd[1] = 0.0;
            detrender_Odd[2] = 0.0;
            detrender_Even[0] = 0.0;
            detrender_Even[1] = 0.0;
            detrender_Even[2] = 0.0;
            double detrender = 0.0;
            double prev_detrender_Odd = 0.0;
            double prev_detrender_Even = 0.0;
            double prev_detrender_input_Odd = 0.0;
            double prev_detrender_input_Even = 0.0;
            Q1_Odd[0] = 0.0;
            Q1_Odd[1] = 0.0;
            Q1_Odd[2] = 0.0;
            Q1_Even[0] = 0.0;
            Q1_Even[1] = 0.0;
            Q1_Even[2] = 0.0;
            double Q1 = 0.0;
            double prev_Q1_Odd = 0.0;
            double prev_Q1_Even = 0.0;
            double prev_Q1_input_Odd = 0.0;
            double prev_Q1_input_Even = 0.0;
            jI_Odd[0] = 0.0;
            jI_Odd[1] = 0.0;
            jI_Odd[2] = 0.0;
            jI_Even[0] = 0.0;
            jI_Even[1] = 0.0;
            jI_Even[2] = 0.0;
            double jI = 0.0;
            double prev_jI_Odd = 0.0;
            double prev_jI_Even = 0.0;
            double prev_jI_input_Odd = 0.0;
            double prev_jI_input_Even = 0.0;
            jQ_Odd[0] = 0.0;
            jQ_Odd[1] = 0.0;
            jQ_Odd[2] = 0.0;
            jQ_Even[0] = 0.0;
            jQ_Even[1] = 0.0;
            jQ_Even[2] = 0.0;
            double jQ = 0.0;
            double prev_jQ_Odd = 0.0;
            double prev_jQ_Even = 0.0;
            double prev_jQ_input_Odd = 0.0;
            double prev_jQ_input_Even = 0.0;
            double period = 0.0;
            int outIdx = 0;
            double prevQ2 = 0.0;
            double prevI2 = prevQ2;
            double Im = 0.0;
            double Re = Im;
            double I1ForEvenPrev3 = 0.0;
            double I1ForOddPrev3 = I1ForEvenPrev3;
            double I1ForEvenPrev2 = 0.0;
            double I1ForOddPrev2 = I1ForEvenPrev2;
            double smoothPeriod = 0.0;
            i = 0;
            while (i < 50) {
                smoothPrice[i] = 0.0;
                i++;
            }
            double DCPhase = 0.0;
            while (true) {
                double hilbertTempReal;
                double I2;
                double Q2;
                if (today > endIdx) {
                    outNBElement = outIdx;
                    return RetCode.Success;
                }
                double adjustedPrevPeriod = (0.075 * period) + 0.54;
                double todayValue = inReal[today];
                periodWMASub += todayValue;
                periodWMASub -= trailingWMAValue;
                periodWMASum += todayValue * 4.0;
                trailingWMAValue = inReal[trailingWMAIdx];
                trailingWMAIdx++;
                smoothedValue = periodWMASum * 0.1;
                periodWMASum -= periodWMASub;
                smoothPrice[smoothPrice_Idx] = smoothedValue;
                if ((today % 2) == 0) {
                    hilbertTempReal = a * smoothedValue;
                    detrender = -detrender_Even[hilbertIdx];
                    detrender_Even[hilbertIdx] = hilbertTempReal;
                    detrender += hilbertTempReal;
                    detrender -= prev_detrender_Even;
                    prev_detrender_Even = b * prev_detrender_input_Even;
                    detrender += prev_detrender_Even;
                    prev_detrender_input_Even = smoothedValue;
                    detrender *= adjustedPrevPeriod;
                    hilbertTempReal = a * detrender;
                    Q1 = -Q1_Even[hilbertIdx];
                    Q1_Even[hilbertIdx] = hilbertTempReal;
                    Q1 += hilbertTempReal;
                    Q1 -= prev_Q1_Even;
                    prev_Q1_Even = b * prev_Q1_input_Even;
                    Q1 += prev_Q1_Even;
                    prev_Q1_input_Even = detrender;
                    Q1 *= adjustedPrevPeriod;
                    hilbertTempReal = a * I1ForEvenPrev3;
                    jI = -jI_Even[hilbertIdx];
                    jI_Even[hilbertIdx] = hilbertTempReal;
                    jI += hilbertTempReal;
                    jI -= prev_jI_Even;
                    prev_jI_Even = b * prev_jI_input_Even;
                    jI += prev_jI_Even;
                    prev_jI_input_Even = I1ForEvenPrev3;
                    jI *= adjustedPrevPeriod;
                    hilbertTempReal = a * Q1;
                    jQ = -jQ_Even[hilbertIdx];
                    jQ_Even[hilbertIdx] = hilbertTempReal;
                    jQ += hilbertTempReal;
                    jQ -= prev_jQ_Even;
                    prev_jQ_Even = b * prev_jQ_input_Even;
                    jQ += prev_jQ_Even;
                    prev_jQ_input_Even = Q1;
                    jQ *= adjustedPrevPeriod;
                    hilbertIdx++;
                    if (hilbertIdx == 3) {
                        hilbertIdx = 0;
                    }
                    Q2 = (0.2 * (Q1 + jI)) + (0.8 * prevQ2);
                    I2 = (0.2 * (I1ForEvenPrev3 - jQ)) + (0.8 * prevI2);
                    I1ForOddPrev3 = I1ForOddPrev2;
                    I1ForOddPrev2 = detrender;
                }
                else {
                    hilbertTempReal = a * smoothedValue;
                    detrender = -detrender_Odd[hilbertIdx];
                    detrender_Odd[hilbertIdx] = hilbertTempReal;
                    detrender += hilbertTempReal;
                    detrender -= prev_detrender_Odd;
                    prev_detrender_Odd = b * prev_detrender_input_Odd;
                    detrender += prev_detrender_Odd;
                    prev_detrender_input_Odd = smoothedValue;
                    detrender *= adjustedPrevPeriod;
                    hilbertTempReal = a * detrender;
                    Q1 = -Q1_Odd[hilbertIdx];
                    Q1_Odd[hilbertIdx] = hilbertTempReal;
                    Q1 += hilbertTempReal;
                    Q1 -= prev_Q1_Odd;
                    prev_Q1_Odd = b * prev_Q1_input_Odd;
                    Q1 += prev_Q1_Odd;
                    prev_Q1_input_Odd = detrender;
                    Q1 *= adjustedPrevPeriod;
                    hilbertTempReal = a * I1ForOddPrev3;
                    jI = -jI_Odd[hilbertIdx];
                    jI_Odd[hilbertIdx] = hilbertTempReal;
                    jI += hilbertTempReal;
                    jI -= prev_jI_Odd;
                    prev_jI_Odd = b * prev_jI_input_Odd;
                    jI += prev_jI_Odd;
                    prev_jI_input_Odd = I1ForOddPrev3;
                    jI *= adjustedPrevPeriod;
                    hilbertTempReal = a * Q1;
                    jQ = -jQ_Odd[hilbertIdx];
                    jQ_Odd[hilbertIdx] = hilbertTempReal;
                    jQ += hilbertTempReal;
                    jQ -= prev_jQ_Odd;
                    prev_jQ_Odd = b * prev_jQ_input_Odd;
                    jQ += prev_jQ_Odd;
                    prev_jQ_input_Odd = Q1;
                    jQ *= adjustedPrevPeriod;
                    Q2 = (0.2 * (Q1 + jI)) + (0.8 * prevQ2);
                    I2 = (0.2 * (I1ForOddPrev3 - jQ)) + (0.8 * prevI2);
                    I1ForEvenPrev3 = I1ForEvenPrev2;
                    I1ForEvenPrev2 = detrender;
                }
                Re = (0.2 * ((I2 * prevI2) + (Q2 * prevQ2))) + (0.8 * Re);
                Im = (0.2 * ((I2 * prevQ2) - (Q2 * prevI2))) + (0.8 * Im);
                prevQ2 = Q2;
                prevI2 = I2;
                tempReal = period;
                if ((Im != 0.0) && (Re != 0.0)) {
                    period = 360.0 / (Math.Atan(Im / Re) * rad2Deg);
                }
                double tempReal2 = 1.5 * tempReal;
                if (period > tempReal2) {
                    period = tempReal2;
                }
                tempReal2 = 0.67 * tempReal;
                if (period < tempReal2) {
                    period = tempReal2;
                }
                if (period < 6.0) {
                    period = 6.0;
                }
                else if (period > 50.0) {
                    period = 50.0;
                }
                period = (0.2 * period) + (0.8 * tempReal);
                smoothPeriod = (0.33 * period) + (0.67 * smoothPeriod);
                double DCPeriod = smoothPeriod + 0.5;
                int DCPeriodInt = (int)DCPeriod;
                double realPart = 0.0;
                double imagPart = 0.0;
                int idx = smoothPrice_Idx;
                for (i = 0; i < DCPeriodInt; i++) {
                    tempReal = (i * constDeg2RadBy360) / ((double)DCPeriodInt);
                    tempReal2 = smoothPrice[idx];
                    realPart += Math.Sin(tempReal) * tempReal2;
                    imagPart += Math.Cos(tempReal) * tempReal2;
                    if (idx == 0) {
                        idx = 0x31;
                    }
                    else {
                        idx--;
                    }
                }
                tempReal = Math.Abs(imagPart);
                if (tempReal > 0.0) {
                    DCPhase = Math.Atan(realPart / imagPart) * rad2Deg;
                }
                else if (tempReal <= 0.01) {
                    if (realPart < 0.0) {
                        DCPhase -= 90.0;
                    }
                    else if (realPart > 0.0) {
                        DCPhase += 90.0;
                    }
                }
                DCPhase += 90.0;
                DCPhase += 360.0 / smoothPeriod;
                if (imagPart < 0.0) {
                    DCPhase += 180.0;
                }
                if (DCPhase > 315.0) {
                    DCPhase -= 360.0;
                }
                if (today >= startIdx) {
                    outReal[outIdx] = DCPhase;
                    outIdx++;
                }
                smoothPrice_Idx++;
                if (smoothPrice_Idx > maxIdx_smoothPrice) {
                    smoothPrice_Idx = 0;
                }
                today++;
            }
        }
        public static RetCode HtPhasor(int startIdx,int endIdx,SmartQuant.ISeries inReal,ref int outBegIdx,ref int outNBElement,double[] outInPhase,double[] outQuadrature)
        {
            double smoothedValue;
            const double a = 0.0962;
            const double b = 0.5769;
            double[] detrender_Odd = new double[3];
            double[] detrender_Even = new double[3];
            double[] Q1_Odd = new double[3];
            double[] Q1_Even = new double[3];
            double[] jI_Odd = new double[3];
            double[] jI_Even = new double[3];
            double[] jQ_Odd = new double[3];
            double[] jQ_Even = new double[3];
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (outInPhase == null) {
                return RetCode.BadParam;
            }
            if (outQuadrature == null) {
                return RetCode.BadParam;
            }
            double rad2Deg = 180.0 / (4.0 * Math.Atan(1.0));
            int lookbackTotal = ((int)Globals.unstablePeriod[8]) + 0x20;
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            outBegIdx = startIdx;
            int trailingWMAIdx = startIdx - lookbackTotal;
            int today = trailingWMAIdx;
            double tempReal = inReal[today];
            today++;
            double periodWMASub = tempReal;
            double periodWMASum = tempReal;
            tempReal = inReal[today];
            today++;
            periodWMASub += tempReal;
            periodWMASum += tempReal * 2.0;
            tempReal = inReal[today];
            today++;
            periodWMASub += tempReal;
            periodWMASum += tempReal * 3.0;
            double trailingWMAValue = 0.0;
            int i = 9;
            do {
                tempReal = inReal[today];
                today++;
                periodWMASub += tempReal;
                periodWMASub -= trailingWMAValue;
                periodWMASum += tempReal * 4.0;
                trailingWMAValue = inReal[trailingWMAIdx];
                trailingWMAIdx++;
                smoothedValue = periodWMASum * 0.1;
                periodWMASum -= periodWMASub;
                i--;
            }
            while (i != 0);
            int hilbertIdx = 0;
            detrender_Odd[0] = 0.0;
            detrender_Odd[1] = 0.0;
            detrender_Odd[2] = 0.0;
            detrender_Even[0] = 0.0;
            detrender_Even[1] = 0.0;
            detrender_Even[2] = 0.0;
            double detrender = 0.0;
            double prev_detrender_Odd = 0.0;
            double prev_detrender_Even = 0.0;
            double prev_detrender_input_Odd = 0.0;
            double prev_detrender_input_Even = 0.0;
            Q1_Odd[0] = 0.0;
            Q1_Odd[1] = 0.0;
            Q1_Odd[2] = 0.0;
            Q1_Even[0] = 0.0;
            Q1_Even[1] = 0.0;
            Q1_Even[2] = 0.0;
            double Q1 = 0.0;
            double prev_Q1_Odd = 0.0;
            double prev_Q1_Even = 0.0;
            double prev_Q1_input_Odd = 0.0;
            double prev_Q1_input_Even = 0.0;
            jI_Odd[0] = 0.0;
            jI_Odd[1] = 0.0;
            jI_Odd[2] = 0.0;
            jI_Even[0] = 0.0;
            jI_Even[1] = 0.0;
            jI_Even[2] = 0.0;
            double jI = 0.0;
            double prev_jI_Odd = 0.0;
            double prev_jI_Even = 0.0;
            double prev_jI_input_Odd = 0.0;
            double prev_jI_input_Even = 0.0;
            jQ_Odd[0] = 0.0;
            jQ_Odd[1] = 0.0;
            jQ_Odd[2] = 0.0;
            jQ_Even[0] = 0.0;
            jQ_Even[1] = 0.0;
            jQ_Even[2] = 0.0;
            double jQ = 0.0;
            double prev_jQ_Odd = 0.0;
            double prev_jQ_Even = 0.0;
            double prev_jQ_input_Odd = 0.0;
            double prev_jQ_input_Even = 0.0;
            double period = 0.0;
            int outIdx = 0;
            double prevQ2 = 0.0;
            double prevI2 = prevQ2;
            double Im = 0.0;
            double Re = Im;
            double I1ForEvenPrev3 = 0.0;
            double I1ForOddPrev3 = I1ForEvenPrev3;
            double I1ForEvenPrev2 = 0.0;
            double I1ForOddPrev2 = I1ForEvenPrev2;
            while (true) {
                double hilbertTempReal;
                double I2;
                double Q2;
                if (today > endIdx) {
                    break;
                }
                double adjustedPrevPeriod = (0.075 * period) + 0.54;
                double todayValue = inReal[today];
                periodWMASub += todayValue;
                periodWMASub -= trailingWMAValue;
                periodWMASum += todayValue * 4.0;
                trailingWMAValue = inReal[trailingWMAIdx];
                trailingWMAIdx++;
                smoothedValue = periodWMASum * 0.1;
                periodWMASum -= periodWMASub;
                if ((today % 2) == 0) {
                    hilbertTempReal = a * smoothedValue;
                    detrender = -detrender_Even[hilbertIdx];
                    detrender_Even[hilbertIdx] = hilbertTempReal;
                    detrender += hilbertTempReal;
                    detrender -= prev_detrender_Even;
                    prev_detrender_Even = b * prev_detrender_input_Even;
                    detrender += prev_detrender_Even;
                    prev_detrender_input_Even = smoothedValue;
                    detrender *= adjustedPrevPeriod;
                    hilbertTempReal = a * detrender;
                    Q1 = -Q1_Even[hilbertIdx];
                    Q1_Even[hilbertIdx] = hilbertTempReal;
                    Q1 += hilbertTempReal;
                    Q1 -= prev_Q1_Even;
                    prev_Q1_Even = b * prev_Q1_input_Even;
                    Q1 += prev_Q1_Even;
                    prev_Q1_input_Even = detrender;
                    Q1 *= adjustedPrevPeriod;
                    if (today >= startIdx) {
                        outQuadrature[outIdx] = Q1;
                        outInPhase[outIdx] = I1ForEvenPrev3;
                        outIdx++;
                    }
                    hilbertTempReal = a * I1ForEvenPrev3;
                    jI = -jI_Even[hilbertIdx];
                    jI_Even[hilbertIdx] = hilbertTempReal;
                    jI += hilbertTempReal;
                    jI -= prev_jI_Even;
                    prev_jI_Even = b * prev_jI_input_Even;
                    jI += prev_jI_Even;
                    prev_jI_input_Even = I1ForEvenPrev3;
                    jI *= adjustedPrevPeriod;
                    hilbertTempReal = a * Q1;
                    jQ = -jQ_Even[hilbertIdx];
                    jQ_Even[hilbertIdx] = hilbertTempReal;
                    jQ += hilbertTempReal;
                    jQ -= prev_jQ_Even;
                    prev_jQ_Even = b * prev_jQ_input_Even;
                    jQ += prev_jQ_Even;
                    prev_jQ_input_Even = Q1;
                    jQ *= adjustedPrevPeriod;
                    hilbertIdx++;
                    if (hilbertIdx == 3) {
                        hilbertIdx = 0;
                    }
                    Q2 = (0.2 * (Q1 + jI)) + (0.8 * prevQ2);
                    I2 = (0.2 * (I1ForEvenPrev3 - jQ)) + (0.8 * prevI2);
                    I1ForOddPrev3 = I1ForOddPrev2;
                    I1ForOddPrev2 = detrender;
                }
                else {
                    hilbertTempReal = a * smoothedValue;
                    detrender = -detrender_Odd[hilbertIdx];
                    detrender_Odd[hilbertIdx] = hilbertTempReal;
                    detrender += hilbertTempReal;
                    detrender -= prev_detrender_Odd;
                    prev_detrender_Odd = b * prev_detrender_input_Odd;
                    detrender += prev_detrender_Odd;
                    prev_detrender_input_Odd = smoothedValue;
                    detrender *= adjustedPrevPeriod;
                    hilbertTempReal = a * detrender;
                    Q1 = -Q1_Odd[hilbertIdx];
                    Q1_Odd[hilbertIdx] = hilbertTempReal;
                    Q1 += hilbertTempReal;
                    Q1 -= prev_Q1_Odd;
                    prev_Q1_Odd = b * prev_Q1_input_Odd;
                    Q1 += prev_Q1_Odd;
                    prev_Q1_input_Odd = detrender;
                    Q1 *= adjustedPrevPeriod;
                    if (today >= startIdx) {
                        outQuadrature[outIdx] = Q1;
                        outInPhase[outIdx] = I1ForOddPrev3;
                        outIdx++;
                    }
                    hilbertTempReal = a * I1ForOddPrev3;
                    jI = -jI_Odd[hilbertIdx];
                    jI_Odd[hilbertIdx] = hilbertTempReal;
                    jI += hilbertTempReal;
                    jI -= prev_jI_Odd;
                    prev_jI_Odd = b * prev_jI_input_Odd;
                    jI += prev_jI_Odd;
                    prev_jI_input_Odd = I1ForOddPrev3;
                    jI *= adjustedPrevPeriod;
                    hilbertTempReal = a * Q1;
                    jQ = -jQ_Odd[hilbertIdx];
                    jQ_Odd[hilbertIdx] = hilbertTempReal;
                    jQ += hilbertTempReal;
                    jQ -= prev_jQ_Odd;
                    prev_jQ_Odd = b * prev_jQ_input_Odd;
                    jQ += prev_jQ_Odd;
                    prev_jQ_input_Odd = Q1;
                    jQ *= adjustedPrevPeriod;
                    Q2 = (0.2 * (Q1 + jI)) + (0.8 * prevQ2);
                    I2 = (0.2 * (I1ForOddPrev3 - jQ)) + (0.8 * prevI2);
                    I1ForEvenPrev3 = I1ForEvenPrev2;
                    I1ForEvenPrev2 = detrender;
                }
                Re = (0.2 * ((I2 * prevI2) + (Q2 * prevQ2))) + (0.8 * Re);
                Im = (0.2 * ((I2 * prevQ2) - (Q2 * prevI2))) + (0.8 * Im);
                prevQ2 = Q2;
                prevI2 = I2;
                tempReal = period;
                if ((Im != 0.0) && (Re != 0.0)) {
                    period = 360.0 / (Math.Atan(Im / Re) * rad2Deg);
                }
                double tempReal2 = 1.5 * tempReal;
                if (period > tempReal2) {
                    period = tempReal2;
                }
                tempReal2 = 0.67 * tempReal;
                if (period < tempReal2) {
                    period = tempReal2;
                }
                if (period < 6.0) {
                    period = 6.0;
                }
                else if (period > 50.0) {
                    period = 50.0;
                }
                period = (0.2 * period) + (0.8 * tempReal);
                today++;
            }
            outNBElement = outIdx;
            return RetCode.Success;
        }
        public static RetCode HtSine(int startIdx,int endIdx,SmartQuant.ISeries inReal,ref int outBegIdx,ref int outNBElement,double[] outSine,double[] outLeadSine)
        {
            double smoothedValue;
            const double a = 0.0962;
            const double b = 0.5769;
            double[] detrender_Odd = new double[3];
            double[] detrender_Even = new double[3];
            double[] Q1_Odd = new double[3];
            double[] Q1_Even = new double[3];
            double[] jI_Odd = new double[3];
            double[] jI_Even = new double[3];
            double[] jQ_Odd = new double[3];
            double[] jQ_Even = new double[3];
            int smoothPrice_Idx = 0;
            int maxIdx_smoothPrice = 0x31;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (outSine == null) {
                return RetCode.BadParam;
            }
            if (outLeadSine == null) {
                return RetCode.BadParam;
            }
            double[] smoothPrice = new double[maxIdx_smoothPrice + 1];
            if (smoothPrice == null) {
                return RetCode.AllocErr;
            }
            double tempReal = Math.Atan(1.0);
            double rad2Deg = 45.0 / tempReal;
            double deg2Rad = 1.0 / rad2Deg;
            double constDeg2RadBy360 = tempReal * 8.0;
            int lookbackTotal = ((int)Globals.unstablePeriod[9]) + 0x3f;
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            outBegIdx = startIdx;
            int trailingWMAIdx = startIdx - lookbackTotal;
            int today = trailingWMAIdx;
            tempReal = inReal[today];
            today++;
            double periodWMASub = tempReal;
            double periodWMASum = tempReal;
            tempReal = inReal[today];
            today++;
            periodWMASub += tempReal;
            periodWMASum += tempReal * 2.0;
            tempReal = inReal[today];
            today++;
            periodWMASub += tempReal;
            periodWMASum += tempReal * 3.0;
            double trailingWMAValue = 0.0;
            int i = 0x22;
            do {
                tempReal = inReal[today];
                today++;
                periodWMASub += tempReal;
                periodWMASub -= trailingWMAValue;
                periodWMASum += tempReal * 4.0;
                trailingWMAValue = inReal[trailingWMAIdx];
                trailingWMAIdx++;
                smoothedValue = periodWMASum * 0.1;
                periodWMASum -= periodWMASub;
                i--;
            }
            while (i != 0);
            int hilbertIdx = 0;
            detrender_Odd[0] = 0.0;
            detrender_Odd[1] = 0.0;
            detrender_Odd[2] = 0.0;
            detrender_Even[0] = 0.0;
            detrender_Even[1] = 0.0;
            detrender_Even[2] = 0.0;
            double detrender = 0.0;
            double prev_detrender_Odd = 0.0;
            double prev_detrender_Even = 0.0;
            double prev_detrender_input_Odd = 0.0;
            double prev_detrender_input_Even = 0.0;
            Q1_Odd[0] = 0.0;
            Q1_Odd[1] = 0.0;
            Q1_Odd[2] = 0.0;
            Q1_Even[0] = 0.0;
            Q1_Even[1] = 0.0;
            Q1_Even[2] = 0.0;
            double Q1 = 0.0;
            double prev_Q1_Odd = 0.0;
            double prev_Q1_Even = 0.0;
            double prev_Q1_input_Odd = 0.0;
            double prev_Q1_input_Even = 0.0;
            jI_Odd[0] = 0.0;
            jI_Odd[1] = 0.0;
            jI_Odd[2] = 0.0;
            jI_Even[0] = 0.0;
            jI_Even[1] = 0.0;
            jI_Even[2] = 0.0;
            double jI = 0.0;
            double prev_jI_Odd = 0.0;
            double prev_jI_Even = 0.0;
            double prev_jI_input_Odd = 0.0;
            double prev_jI_input_Even = 0.0;
            jQ_Odd[0] = 0.0;
            jQ_Odd[1] = 0.0;
            jQ_Odd[2] = 0.0;
            jQ_Even[0] = 0.0;
            jQ_Even[1] = 0.0;
            jQ_Even[2] = 0.0;
            double jQ = 0.0;
            double prev_jQ_Odd = 0.0;
            double prev_jQ_Even = 0.0;
            double prev_jQ_input_Odd = 0.0;
            double prev_jQ_input_Even = 0.0;
            double period = 0.0;
            int outIdx = 0;
            double prevQ2 = 0.0;
            double prevI2 = prevQ2;
            double Im = 0.0;
            double Re = Im;
            double I1ForEvenPrev3 = 0.0;
            double I1ForOddPrev3 = I1ForEvenPrev3;
            double I1ForEvenPrev2 = 0.0;
            double I1ForOddPrev2 = I1ForEvenPrev2;
            double smoothPeriod = 0.0;
            i = 0;
            while (i < 50) {
                smoothPrice[i] = 0.0;
                i++;
            }
            double DCPhase = 0.0;
            while (true) {
                double hilbertTempReal;
                double I2;
                double Q2;
                if (today > endIdx) {
                    outNBElement = outIdx;
                    return RetCode.Success;
                }
                double adjustedPrevPeriod = (0.075 * period) + 0.54;
                double todayValue = inReal[today];
                periodWMASub += todayValue;
                periodWMASub -= trailingWMAValue;
                periodWMASum += todayValue * 4.0;
                trailingWMAValue = inReal[trailingWMAIdx];
                trailingWMAIdx++;
                smoothedValue = periodWMASum * 0.1;
                periodWMASum -= periodWMASub;
                smoothPrice[smoothPrice_Idx] = smoothedValue;
                if ((today % 2) == 0) {
                    hilbertTempReal = a * smoothedValue;
                    detrender = -detrender_Even[hilbertIdx];
                    detrender_Even[hilbertIdx] = hilbertTempReal;
                    detrender += hilbertTempReal;
                    detrender -= prev_detrender_Even;
                    prev_detrender_Even = b * prev_detrender_input_Even;
                    detrender += prev_detrender_Even;
                    prev_detrender_input_Even = smoothedValue;
                    detrender *= adjustedPrevPeriod;
                    hilbertTempReal = a * detrender;
                    Q1 = -Q1_Even[hilbertIdx];
                    Q1_Even[hilbertIdx] = hilbertTempReal;
                    Q1 += hilbertTempReal;
                    Q1 -= prev_Q1_Even;
                    prev_Q1_Even = b * prev_Q1_input_Even;
                    Q1 += prev_Q1_Even;
                    prev_Q1_input_Even = detrender;
                    Q1 *= adjustedPrevPeriod;
                    hilbertTempReal = a * I1ForEvenPrev3;
                    jI = -jI_Even[hilbertIdx];
                    jI_Even[hilbertIdx] = hilbertTempReal;
                    jI += hilbertTempReal;
                    jI -= prev_jI_Even;
                    prev_jI_Even = b * prev_jI_input_Even;
                    jI += prev_jI_Even;
                    prev_jI_input_Even = I1ForEvenPrev3;
                    jI *= adjustedPrevPeriod;
                    hilbertTempReal = a * Q1;
                    jQ = -jQ_Even[hilbertIdx];
                    jQ_Even[hilbertIdx] = hilbertTempReal;
                    jQ += hilbertTempReal;
                    jQ -= prev_jQ_Even;
                    prev_jQ_Even = b * prev_jQ_input_Even;
                    jQ += prev_jQ_Even;
                    prev_jQ_input_Even = Q1;
                    jQ *= adjustedPrevPeriod;
                    hilbertIdx++;
                    if (hilbertIdx == 3) {
                        hilbertIdx = 0;
                    }
                    Q2 = (0.2 * (Q1 + jI)) + (0.8 * prevQ2);
                    I2 = (0.2 * (I1ForEvenPrev3 - jQ)) + (0.8 * prevI2);
                    I1ForOddPrev3 = I1ForOddPrev2;
                    I1ForOddPrev2 = detrender;
                }
                else {
                    hilbertTempReal = a * smoothedValue;
                    detrender = -detrender_Odd[hilbertIdx];
                    detrender_Odd[hilbertIdx] = hilbertTempReal;
                    detrender += hilbertTempReal;
                    detrender -= prev_detrender_Odd;
                    prev_detrender_Odd = b * prev_detrender_input_Odd;
                    detrender += prev_detrender_Odd;
                    prev_detrender_input_Odd = smoothedValue;
                    detrender *= adjustedPrevPeriod;
                    hilbertTempReal = a * detrender;
                    Q1 = -Q1_Odd[hilbertIdx];
                    Q1_Odd[hilbertIdx] = hilbertTempReal;
                    Q1 += hilbertTempReal;
                    Q1 -= prev_Q1_Odd;
                    prev_Q1_Odd = b * prev_Q1_input_Odd;
                    Q1 += prev_Q1_Odd;
                    prev_Q1_input_Odd = detrender;
                    Q1 *= adjustedPrevPeriod;
                    hilbertTempReal = a * I1ForOddPrev3;
                    jI = -jI_Odd[hilbertIdx];
                    jI_Odd[hilbertIdx] = hilbertTempReal;
                    jI += hilbertTempReal;
                    jI -= prev_jI_Odd;
                    prev_jI_Odd = b * prev_jI_input_Odd;
                    jI += prev_jI_Odd;
                    prev_jI_input_Odd = I1ForOddPrev3;
                    jI *= adjustedPrevPeriod;
                    hilbertTempReal = a * Q1;
                    jQ = -jQ_Odd[hilbertIdx];
                    jQ_Odd[hilbertIdx] = hilbertTempReal;
                    jQ += hilbertTempReal;
                    jQ -= prev_jQ_Odd;
                    prev_jQ_Odd = b * prev_jQ_input_Odd;
                    jQ += prev_jQ_Odd;
                    prev_jQ_input_Odd = Q1;
                    jQ *= adjustedPrevPeriod;
                    Q2 = (0.2 * (Q1 + jI)) + (0.8 * prevQ2);
                    I2 = (0.2 * (I1ForOddPrev3 - jQ)) + (0.8 * prevI2);
                    I1ForEvenPrev3 = I1ForEvenPrev2;
                    I1ForEvenPrev2 = detrender;
                }
                Re = (0.2 * ((I2 * prevI2) + (Q2 * prevQ2))) + (0.8 * Re);
                Im = (0.2 * ((I2 * prevQ2) - (Q2 * prevI2))) + (0.8 * Im);
                prevQ2 = Q2;
                prevI2 = I2;
                tempReal = period;
                if ((Im != 0.0) && (Re != 0.0)) {
                    period = 360.0 / (Math.Atan(Im / Re) * rad2Deg);
                }
                double tempReal2 = 1.5 * tempReal;
                if (period > tempReal2) {
                    period = tempReal2;
                }
                tempReal2 = 0.67 * tempReal;
                if (period < tempReal2) {
                    period = tempReal2;
                }
                if (period < 6.0) {
                    period = 6.0;
                }
                else if (period > 50.0) {
                    period = 50.0;
                }
                period = (0.2 * period) + (0.8 * tempReal);
                smoothPeriod = (0.33 * period) + (0.67 * smoothPeriod);
                double DCPeriod = smoothPeriod + 0.5;
                int DCPeriodInt = (int)DCPeriod;
                double realPart = 0.0;
                double imagPart = 0.0;
                int idx = smoothPrice_Idx;
                for (i = 0; i < DCPeriodInt; i++) {
                    tempReal = (i * constDeg2RadBy360) / ((double)DCPeriodInt);
                    tempReal2 = smoothPrice[idx];
                    realPart += Math.Sin(tempReal) * tempReal2;
                    imagPart += Math.Cos(tempReal) * tempReal2;
                    if (idx == 0) {
                        idx = 0x31;
                    }
                    else {
                        idx--;
                    }
                }
                tempReal = Math.Abs(imagPart);
                if (tempReal > 0.0) {
                    DCPhase = Math.Atan(realPart / imagPart) * rad2Deg;
                }
                else if (tempReal <= 0.01) {
                    if (realPart < 0.0) {
                        DCPhase -= 90.0;
                    }
                    else if (realPart > 0.0) {
                        DCPhase += 90.0;
                    }
                }
                DCPhase += 90.0;
                DCPhase += 360.0 / smoothPeriod;
                if (imagPart < 0.0) {
                    DCPhase += 180.0;
                }
                if (DCPhase > 315.0) {
                    DCPhase -= 360.0;
                }
                if (today >= startIdx) {
                    outSine[outIdx] = Math.Sin(DCPhase * deg2Rad);
                    outLeadSine[outIdx] = Math.Sin((DCPhase + 45.0) * deg2Rad);
                    outIdx++;
                }
                smoothPrice_Idx++;
                if (smoothPrice_Idx > maxIdx_smoothPrice) {
                    smoothPrice_Idx = 0;
                }
                today++;
            }
        }
        public static RetCode HtTrendline(int startIdx,int endIdx,SmartQuant.ISeries inReal,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            double smoothedValue;
            const double a = 0.0962;
            const double b = 0.5769;
            double[] detrender_Odd = new double[3];
            double[] detrender_Even = new double[3];
            double[] Q1_Odd = new double[3];
            double[] Q1_Even = new double[3];
            double[] jI_Odd = new double[3];
            double[] jI_Even = new double[3];
            double[] jQ_Odd = new double[3];
            double[] jQ_Even = new double[3];
            int smoothPrice_Idx = 0;
            int maxIdx_smoothPrice = 0x31;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            double[] smoothPrice = new double[maxIdx_smoothPrice + 1];
            if (smoothPrice == null) {
                return RetCode.AllocErr;
            }
            double iTrend3 = 0.0;
            double iTrend2 = iTrend3;
            double iTrend1 = iTrend2;
            double tempReal = Math.Atan(1.0);
            double rad2Deg = 45.0 / tempReal;
            int lookbackTotal = ((int)Globals.unstablePeriod[10]) + 0x3f;
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            outBegIdx = startIdx;
            int trailingWMAIdx = startIdx - lookbackTotal;
            int today = trailingWMAIdx;
            tempReal = inReal[today];
            today++;
            double periodWMASub = tempReal;
            double periodWMASum = tempReal;
            tempReal = inReal[today];
            today++;
            periodWMASub += tempReal;
            periodWMASum += tempReal * 2.0;
            tempReal = inReal[today];
            today++;
            periodWMASub += tempReal;
            periodWMASum += tempReal * 3.0;
            double trailingWMAValue = 0.0;
            int i = 0x22;
            do {
                tempReal = inReal[today];
                today++;
                periodWMASub += tempReal;
                periodWMASub -= trailingWMAValue;
                periodWMASum += tempReal * 4.0;
                trailingWMAValue = inReal[trailingWMAIdx];
                trailingWMAIdx++;
                smoothedValue = periodWMASum * 0.1;
                periodWMASum -= periodWMASub;
                i--;
            }
            while (i != 0);
            int hilbertIdx = 0;
            detrender_Odd[0] = 0.0;
            detrender_Odd[1] = 0.0;
            detrender_Odd[2] = 0.0;
            detrender_Even[0] = 0.0;
            detrender_Even[1] = 0.0;
            detrender_Even[2] = 0.0;
            double detrender = 0.0;
            double prev_detrender_Odd = 0.0;
            double prev_detrender_Even = 0.0;
            double prev_detrender_input_Odd = 0.0;
            double prev_detrender_input_Even = 0.0;
            Q1_Odd[0] = 0.0;
            Q1_Odd[1] = 0.0;
            Q1_Odd[2] = 0.0;
            Q1_Even[0] = 0.0;
            Q1_Even[1] = 0.0;
            Q1_Even[2] = 0.0;
            double Q1 = 0.0;
            double prev_Q1_Odd = 0.0;
            double prev_Q1_Even = 0.0;
            double prev_Q1_input_Odd = 0.0;
            double prev_Q1_input_Even = 0.0;
            jI_Odd[0] = 0.0;
            jI_Odd[1] = 0.0;
            jI_Odd[2] = 0.0;
            jI_Even[0] = 0.0;
            jI_Even[1] = 0.0;
            jI_Even[2] = 0.0;
            double jI = 0.0;
            double prev_jI_Odd = 0.0;
            double prev_jI_Even = 0.0;
            double prev_jI_input_Odd = 0.0;
            double prev_jI_input_Even = 0.0;
            jQ_Odd[0] = 0.0;
            jQ_Odd[1] = 0.0;
            jQ_Odd[2] = 0.0;
            jQ_Even[0] = 0.0;
            jQ_Even[1] = 0.0;
            jQ_Even[2] = 0.0;
            double jQ = 0.0;
            double prev_jQ_Odd = 0.0;
            double prev_jQ_Even = 0.0;
            double prev_jQ_input_Odd = 0.0;
            double prev_jQ_input_Even = 0.0;
            double period = 0.0;
            int outIdx = 0;
            double prevQ2 = 0.0;
            double prevI2 = prevQ2;
            double Im = 0.0;
            double Re = Im;
            double I1ForEvenPrev3 = 0.0;
            double I1ForOddPrev3 = I1ForEvenPrev3;
            double I1ForEvenPrev2 = 0.0;
            double I1ForOddPrev2 = I1ForEvenPrev2;
            double smoothPeriod = 0.0;
            i = 0;
            while (i < 50) {
                smoothPrice[i] = 0.0;
                i++;
            }
            while (true) {
                double hilbertTempReal;
                double I2;
                double Q2;
                if (today > endIdx) {
                    outNBElement = outIdx;
                    return RetCode.Success;
                }
                double adjustedPrevPeriod = (0.075 * period) + 0.54;
                double todayValue = inReal[today];
                periodWMASub += todayValue;
                periodWMASub -= trailingWMAValue;
                periodWMASum += todayValue * 4.0;
                trailingWMAValue = inReal[trailingWMAIdx];
                trailingWMAIdx++;
                smoothedValue = periodWMASum * 0.1;
                periodWMASum -= periodWMASub;
                smoothPrice[smoothPrice_Idx] = smoothedValue;
                if ((today % 2) == 0) {
                    hilbertTempReal = a * smoothedValue;
                    detrender = -detrender_Even[hilbertIdx];
                    detrender_Even[hilbertIdx] = hilbertTempReal;
                    detrender += hilbertTempReal;
                    detrender -= prev_detrender_Even;
                    prev_detrender_Even = b * prev_detrender_input_Even;
                    detrender += prev_detrender_Even;
                    prev_detrender_input_Even = smoothedValue;
                    detrender *= adjustedPrevPeriod;
                    hilbertTempReal = a * detrender;
                    Q1 = -Q1_Even[hilbertIdx];
                    Q1_Even[hilbertIdx] = hilbertTempReal;
                    Q1 += hilbertTempReal;
                    Q1 -= prev_Q1_Even;
                    prev_Q1_Even = b * prev_Q1_input_Even;
                    Q1 += prev_Q1_Even;
                    prev_Q1_input_Even = detrender;
                    Q1 *= adjustedPrevPeriod;
                    hilbertTempReal = a * I1ForEvenPrev3;
                    jI = -jI_Even[hilbertIdx];
                    jI_Even[hilbertIdx] = hilbertTempReal;
                    jI += hilbertTempReal;
                    jI -= prev_jI_Even;
                    prev_jI_Even = b * prev_jI_input_Even;
                    jI += prev_jI_Even;
                    prev_jI_input_Even = I1ForEvenPrev3;
                    jI *= adjustedPrevPeriod;
                    hilbertTempReal = a * Q1;
                    jQ = -jQ_Even[hilbertIdx];
                    jQ_Even[hilbertIdx] = hilbertTempReal;
                    jQ += hilbertTempReal;
                    jQ -= prev_jQ_Even;
                    prev_jQ_Even = b * prev_jQ_input_Even;
                    jQ += prev_jQ_Even;
                    prev_jQ_input_Even = Q1;
                    jQ *= adjustedPrevPeriod;
                    hilbertIdx++;
                    if (hilbertIdx == 3) {
                        hilbertIdx = 0;
                    }
                    Q2 = (0.2 * (Q1 + jI)) + (0.8 * prevQ2);
                    I2 = (0.2 * (I1ForEvenPrev3 - jQ)) + (0.8 * prevI2);
                    I1ForOddPrev3 = I1ForOddPrev2;
                    I1ForOddPrev2 = detrender;
                }
                else {
                    hilbertTempReal = a * smoothedValue;
                    detrender = -detrender_Odd[hilbertIdx];
                    detrender_Odd[hilbertIdx] = hilbertTempReal;
                    detrender += hilbertTempReal;
                    detrender -= prev_detrender_Odd;
                    prev_detrender_Odd = b * prev_detrender_input_Odd;
                    detrender += prev_detrender_Odd;
                    prev_detrender_input_Odd = smoothedValue;
                    detrender *= adjustedPrevPeriod;
                    hilbertTempReal = a * detrender;
                    Q1 = -Q1_Odd[hilbertIdx];
                    Q1_Odd[hilbertIdx] = hilbertTempReal;
                    Q1 += hilbertTempReal;
                    Q1 -= prev_Q1_Odd;
                    prev_Q1_Odd = b * prev_Q1_input_Odd;
                    Q1 += prev_Q1_Odd;
                    prev_Q1_input_Odd = detrender;
                    Q1 *= adjustedPrevPeriod;
                    hilbertTempReal = a * I1ForOddPrev3;
                    jI = -jI_Odd[hilbertIdx];
                    jI_Odd[hilbertIdx] = hilbertTempReal;
                    jI += hilbertTempReal;
                    jI -= prev_jI_Odd;
                    prev_jI_Odd = b * prev_jI_input_Odd;
                    jI += prev_jI_Odd;
                    prev_jI_input_Odd = I1ForOddPrev3;
                    jI *= adjustedPrevPeriod;
                    hilbertTempReal = a * Q1;
                    jQ = -jQ_Odd[hilbertIdx];
                    jQ_Odd[hilbertIdx] = hilbertTempReal;
                    jQ += hilbertTempReal;
                    jQ -= prev_jQ_Odd;
                    prev_jQ_Odd = b * prev_jQ_input_Odd;
                    jQ += prev_jQ_Odd;
                    prev_jQ_input_Odd = Q1;
                    jQ *= adjustedPrevPeriod;
                    Q2 = (0.2 * (Q1 + jI)) + (0.8 * prevQ2);
                    I2 = (0.2 * (I1ForOddPrev3 - jQ)) + (0.8 * prevI2);
                    I1ForEvenPrev3 = I1ForEvenPrev2;
                    I1ForEvenPrev2 = detrender;
                }
                Re = (0.2 * ((I2 * prevI2) + (Q2 * prevQ2))) + (0.8 * Re);
                Im = (0.2 * ((I2 * prevQ2) - (Q2 * prevI2))) + (0.8 * Im);
                prevQ2 = Q2;
                prevI2 = I2;
                tempReal = period;
                if ((Im != 0.0) && (Re != 0.0)) {
                    period = 360.0 / (Math.Atan(Im / Re) * rad2Deg);
                }
                double tempReal2 = 1.5 * tempReal;
                if (period > tempReal2) {
                    period = tempReal2;
                }
                tempReal2 = 0.67 * tempReal;
                if (period < tempReal2) {
                    period = tempReal2;
                }
                if (period < 6.0) {
                    period = 6.0;
                }
                else if (period > 50.0) {
                    period = 50.0;
                }
                period = (0.2 * period) + (0.8 * tempReal);
                smoothPeriod = (0.33 * period) + (0.67 * smoothPeriod);
                double DCPeriod = smoothPeriod + 0.5;
                int DCPeriodInt = (int)DCPeriod;
                int idx = today;
                tempReal = 0.0;
                for (i = 0; i < DCPeriodInt; i++) {
                    tempReal += inReal[idx];
                    idx--;
                }
                if (DCPeriodInt > 0) {
                    tempReal /= (double)DCPeriodInt;
                }
                tempReal2 = ((((4.0 * tempReal) + (3.0 * iTrend1)) + (2.0 * iTrend2)) + iTrend3) / 10.0;
                iTrend3 = iTrend2;
                iTrend2 = iTrend1;
                iTrend1 = tempReal;
                if (today >= startIdx) {
                    outReal[outIdx] = tempReal2;
                    outIdx++;
                }
                smoothPrice_Idx++;
                if (smoothPrice_Idx > maxIdx_smoothPrice) {
                    smoothPrice_Idx = 0;
                }
                today++;
            }
        }
        public static RetCode HtTrendMode(int startIdx,int endIdx,SmartQuant.ISeries inReal,ref int outBegIdx,ref int outNBElement,int[] outInteger)
        {
            double smoothedValue;
            const double a = 0.0962;
            const double b = 0.5769;
            double[] detrender_Odd = new double[3];
            double[] detrender_Even = new double[3];
            double[] Q1_Odd = new double[3];
            double[] Q1_Even = new double[3];
            double[] jI_Odd = new double[3];
            double[] jI_Even = new double[3];
            double[] jQ_Odd = new double[3];
            double[] jQ_Even = new double[3];
            int smoothPrice_Idx = 0;
            int maxIdx_smoothPrice = 0x31;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            double[] smoothPrice = new double[maxIdx_smoothPrice + 1];
            if (smoothPrice == null) {
                return RetCode.AllocErr;
            }
            double iTrend3 = 0.0;
            double iTrend2 = iTrend3;
            double iTrend1 = iTrend2;
            int daysInTrend = 0;
            double DCPhase = 0.0;
            double prevDCPhase = DCPhase;
            double sine = 0.0;
            double prevSine = sine;
            double leadSine = 0.0;
            double prevLeadSine = leadSine;
            double tempReal = Math.Atan(1.0);
            double rad2Deg = 45.0 / tempReal;
            double deg2Rad = 1.0 / rad2Deg;
            double constDeg2RadBy360 = tempReal * 8.0;
            int lookbackTotal = ((int)Globals.unstablePeriod[11]) + 0x3f;
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            outBegIdx = startIdx;
            int trailingWMAIdx = startIdx - lookbackTotal;
            int today = trailingWMAIdx;
            tempReal = inReal[today];
            today++;
            double periodWMASub = tempReal;
            double periodWMASum = tempReal;
            tempReal = inReal[today];
            today++;
            periodWMASub += tempReal;
            periodWMASum += tempReal * 2.0;
            tempReal = inReal[today];
            today++;
            periodWMASub += tempReal;
            periodWMASum += tempReal * 3.0;
            double trailingWMAValue = 0.0;
            int i = 0x22;
            do {
                tempReal = inReal[today];
                today++;
                periodWMASub += tempReal;
                periodWMASub -= trailingWMAValue;
                periodWMASum += tempReal * 4.0;
                trailingWMAValue = inReal[trailingWMAIdx];
                trailingWMAIdx++;
                smoothedValue = periodWMASum * 0.1;
                periodWMASum -= periodWMASub;
                i--;
            }
            while (i != 0);
            int hilbertIdx = 0;
            detrender_Odd[0] = 0.0;
            detrender_Odd[1] = 0.0;
            detrender_Odd[2] = 0.0;
            detrender_Even[0] = 0.0;
            detrender_Even[1] = 0.0;
            detrender_Even[2] = 0.0;
            double detrender = 0.0;
            double prev_detrender_Odd = 0.0;
            double prev_detrender_Even = 0.0;
            double prev_detrender_input_Odd = 0.0;
            double prev_detrender_input_Even = 0.0;
            Q1_Odd[0] = 0.0;
            Q1_Odd[1] = 0.0;
            Q1_Odd[2] = 0.0;
            Q1_Even[0] = 0.0;
            Q1_Even[1] = 0.0;
            Q1_Even[2] = 0.0;
            double Q1 = 0.0;
            double prev_Q1_Odd = 0.0;
            double prev_Q1_Even = 0.0;
            double prev_Q1_input_Odd = 0.0;
            double prev_Q1_input_Even = 0.0;
            jI_Odd[0] = 0.0;
            jI_Odd[1] = 0.0;
            jI_Odd[2] = 0.0;
            jI_Even[0] = 0.0;
            jI_Even[1] = 0.0;
            jI_Even[2] = 0.0;
            double jI = 0.0;
            double prev_jI_Odd = 0.0;
            double prev_jI_Even = 0.0;
            double prev_jI_input_Odd = 0.0;
            double prev_jI_input_Even = 0.0;
            jQ_Odd[0] = 0.0;
            jQ_Odd[1] = 0.0;
            jQ_Odd[2] = 0.0;
            jQ_Even[0] = 0.0;
            jQ_Even[1] = 0.0;
            jQ_Even[2] = 0.0;
            double jQ = 0.0;
            double prev_jQ_Odd = 0.0;
            double prev_jQ_Even = 0.0;
            double prev_jQ_input_Odd = 0.0;
            double prev_jQ_input_Even = 0.0;
            double period = 0.0;
            int outIdx = 0;
            double prevQ2 = 0.0;
            double prevI2 = prevQ2;
            double Im = 0.0;
            double Re = Im;
            double I1ForEvenPrev3 = 0.0;
            double I1ForOddPrev3 = I1ForEvenPrev3;
            double I1ForEvenPrev2 = 0.0;
            double I1ForOddPrev2 = I1ForEvenPrev2;
            double smoothPeriod = 0.0;
            i = 0;
            while (i < 50) {
                smoothPrice[i] = 0.0;
                i++;
            }
            DCPhase = 0.0;
            while (true) {
                double hilbertTempReal;
                double I2;
                double Q2;
                if (today > endIdx) {
                    outNBElement = outIdx;
                    return RetCode.Success;
                }
                double adjustedPrevPeriod = (0.075 * period) + 0.54;
                double todayValue = inReal[today];
                periodWMASub += todayValue;
                periodWMASub -= trailingWMAValue;
                periodWMASum += todayValue * 4.0;
                trailingWMAValue = inReal[trailingWMAIdx];
                trailingWMAIdx++;
                smoothedValue = periodWMASum * 0.1;
                periodWMASum -= periodWMASub;
                smoothPrice[smoothPrice_Idx] = smoothedValue;
                if ((today % 2) == 0) {
                    hilbertTempReal = a * smoothedValue;
                    detrender = -detrender_Even[hilbertIdx];
                    detrender_Even[hilbertIdx] = hilbertTempReal;
                    detrender += hilbertTempReal;
                    detrender -= prev_detrender_Even;
                    prev_detrender_Even = b * prev_detrender_input_Even;
                    detrender += prev_detrender_Even;
                    prev_detrender_input_Even = smoothedValue;
                    detrender *= adjustedPrevPeriod;
                    hilbertTempReal = a * detrender;
                    Q1 = -Q1_Even[hilbertIdx];
                    Q1_Even[hilbertIdx] = hilbertTempReal;
                    Q1 += hilbertTempReal;
                    Q1 -= prev_Q1_Even;
                    prev_Q1_Even = b * prev_Q1_input_Even;
                    Q1 += prev_Q1_Even;
                    prev_Q1_input_Even = detrender;
                    Q1 *= adjustedPrevPeriod;
                    hilbertTempReal = a * I1ForEvenPrev3;
                    jI = -jI_Even[hilbertIdx];
                    jI_Even[hilbertIdx] = hilbertTempReal;
                    jI += hilbertTempReal;
                    jI -= prev_jI_Even;
                    prev_jI_Even = b * prev_jI_input_Even;
                    jI += prev_jI_Even;
                    prev_jI_input_Even = I1ForEvenPrev3;
                    jI *= adjustedPrevPeriod;
                    hilbertTempReal = a * Q1;
                    jQ = -jQ_Even[hilbertIdx];
                    jQ_Even[hilbertIdx] = hilbertTempReal;
                    jQ += hilbertTempReal;
                    jQ -= prev_jQ_Even;
                    prev_jQ_Even = b * prev_jQ_input_Even;
                    jQ += prev_jQ_Even;
                    prev_jQ_input_Even = Q1;
                    jQ *= adjustedPrevPeriod;
                    hilbertIdx++;
                    if (hilbertIdx == 3) {
                        hilbertIdx = 0;
                    }
                    Q2 = (0.2 * (Q1 + jI)) + (0.8 * prevQ2);
                    I2 = (0.2 * (I1ForEvenPrev3 - jQ)) + (0.8 * prevI2);
                    I1ForOddPrev3 = I1ForOddPrev2;
                    I1ForOddPrev2 = detrender;
                }
                else {
                    hilbertTempReal = a * smoothedValue;
                    detrender = -detrender_Odd[hilbertIdx];
                    detrender_Odd[hilbertIdx] = hilbertTempReal;
                    detrender += hilbertTempReal;
                    detrender -= prev_detrender_Odd;
                    prev_detrender_Odd = b * prev_detrender_input_Odd;
                    detrender += prev_detrender_Odd;
                    prev_detrender_input_Odd = smoothedValue;
                    detrender *= adjustedPrevPeriod;
                    hilbertTempReal = a * detrender;
                    Q1 = -Q1_Odd[hilbertIdx];
                    Q1_Odd[hilbertIdx] = hilbertTempReal;
                    Q1 += hilbertTempReal;
                    Q1 -= prev_Q1_Odd;
                    prev_Q1_Odd = b * prev_Q1_input_Odd;
                    Q1 += prev_Q1_Odd;
                    prev_Q1_input_Odd = detrender;
                    Q1 *= adjustedPrevPeriod;
                    hilbertTempReal = a * I1ForOddPrev3;
                    jI = -jI_Odd[hilbertIdx];
                    jI_Odd[hilbertIdx] = hilbertTempReal;
                    jI += hilbertTempReal;
                    jI -= prev_jI_Odd;
                    prev_jI_Odd = b * prev_jI_input_Odd;
                    jI += prev_jI_Odd;
                    prev_jI_input_Odd = I1ForOddPrev3;
                    jI *= adjustedPrevPeriod;
                    hilbertTempReal = a * Q1;
                    jQ = -jQ_Odd[hilbertIdx];
                    jQ_Odd[hilbertIdx] = hilbertTempReal;
                    jQ += hilbertTempReal;
                    jQ -= prev_jQ_Odd;
                    prev_jQ_Odd = b * prev_jQ_input_Odd;
                    jQ += prev_jQ_Odd;
                    prev_jQ_input_Odd = Q1;
                    jQ *= adjustedPrevPeriod;
                    Q2 = (0.2 * (Q1 + jI)) + (0.8 * prevQ2);
                    I2 = (0.2 * (I1ForOddPrev3 - jQ)) + (0.8 * prevI2);
                    I1ForEvenPrev3 = I1ForEvenPrev2;
                    I1ForEvenPrev2 = detrender;
                }
                Re = (0.2 * ((I2 * prevI2) + (Q2 * prevQ2))) + (0.8 * Re);
                Im = (0.2 * ((I2 * prevQ2) - (Q2 * prevI2))) + (0.8 * Im);
                prevQ2 = Q2;
                prevI2 = I2;
                tempReal = period;
                if ((Im != 0.0) && (Re != 0.0)) {
                    period = 360.0 / (Math.Atan(Im / Re) * rad2Deg);
                }
                double tempReal2 = 1.5 * tempReal;
                if (period > tempReal2) {
                    period = tempReal2;
                }
                tempReal2 = 0.67 * tempReal;
                if (period < tempReal2) {
                    period = tempReal2;
                }
                if (period < 6.0) {
                    period = 6.0;
                }
                else if (period > 50.0) {
                    period = 50.0;
                }
                period = (0.2 * period) + (0.8 * tempReal);
                smoothPeriod = (0.33 * period) + (0.67 * smoothPeriod);
                prevDCPhase = DCPhase;
                double DCPeriod = smoothPeriod + 0.5;
                int DCPeriodInt = (int)DCPeriod;
                double realPart = 0.0;
                double imagPart = 0.0;
                int idx = smoothPrice_Idx;
                i = 0;
                while (i < DCPeriodInt) {
                    tempReal = (i * constDeg2RadBy360) / ((double)DCPeriodInt);
                    tempReal2 = smoothPrice[idx];
                    realPart += Math.Sin(tempReal) * tempReal2;
                    imagPart += Math.Cos(tempReal) * tempReal2;
                    if (idx == 0) {
                        idx = 0x31;
                    }
                    else {
                        idx--;
                    }
                    i++;
                }
                tempReal = Math.Abs(imagPart);
                if (tempReal > 0.0) {
                    DCPhase = Math.Atan(realPart / imagPart) * rad2Deg;
                }
                else if (tempReal <= 0.01) {
                    if (realPart < 0.0) {
                        DCPhase -= 90.0;
                    }
                    else if (realPart > 0.0) {
                        DCPhase += 90.0;
                    }
                }
                DCPhase += 90.0;
                DCPhase += 360.0 / smoothPeriod;
                if (imagPart < 0.0) {
                    DCPhase += 180.0;
                }
                if (DCPhase > 315.0) {
                    DCPhase -= 360.0;
                }
                prevSine = sine;
                prevLeadSine = leadSine;
                sine = Math.Sin(DCPhase * deg2Rad);
                leadSine = Math.Sin((DCPhase + 45.0) * deg2Rad);
                DCPeriod = smoothPeriod + 0.5;
                DCPeriodInt = (int)DCPeriod;
                idx = today;
                tempReal = 0.0;
                for (i = 0; i < DCPeriodInt; i++) {
                    tempReal += inReal[idx];
                    idx--;
                }
                if (DCPeriodInt > 0) {
                    tempReal /= (double)DCPeriodInt;
                }
                double trendline = ((((4.0 * tempReal) + (3.0 * iTrend1)) + (2.0 * iTrend2)) + iTrend3) / 10.0;
                iTrend3 = iTrend2;
                iTrend2 = iTrend1;
                iTrend1 = tempReal;
                int trend = 1;
                if (((sine > leadSine) && (prevSine <= prevLeadSine)) || ((sine < leadSine) && (prevSine >= prevLeadSine))) {
                    daysInTrend = 0;
                    trend = 0;
                }
                daysInTrend++;
                if (daysInTrend < (0.5 * smoothPeriod)) {
                    trend = 0;
                }
                tempReal = DCPhase - prevDCPhase;
                if (((smoothPeriod != 0.0) && (tempReal > (241.20000000000002 / smoothPeriod))) && (tempReal < (540.0 / smoothPeriod))) {
                    trend = 0;
                }
                tempReal = smoothPrice[smoothPrice_Idx];
                if ((trendline != 0.0) && (Math.Abs((double)((tempReal - trendline) / trendline)) >= 0.015)) {
                    trend = 1;
                }
                if (today >= startIdx) {
                    outInteger[outIdx] = trend;
                    outIdx++;
                }
                smoothPrice_Idx++;
                if (smoothPrice_Idx > maxIdx_smoothPrice) {
                    smoothPrice_Idx = 0;
                }
                today++;
            }
        }
        public static RetCode Kama(int startIdx,int endIdx,SmartQuant.ISeries inReal,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            double tempReal;
            const double constMax = 0.064516129032258063;
            const double constDiff = 0.66666666666666663 - constMax;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 30;
            }
            else if ((optInTimePeriod < 2) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            outBegIdx = 0;
            outNBElement = 0;
            int lookbackTotal = optInTimePeriod + ((int)Globals.unstablePeriod[12]);
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double sumROC1 = 0.0;
            int today = startIdx - lookbackTotal;
            int trailingIdx = today;
            int i = optInTimePeriod;
            while (true) {
                i--;
                if (i <= 0) {
                    break;
                }
                tempReal = inReal[today];
                today++;
                tempReal -= inReal[today];
                sumROC1 += Math.Abs(tempReal);
            }
            double prevKAMA = inReal[today - 1];
            tempReal = inReal[today];
            double tempReal2 = inReal[trailingIdx];
            trailingIdx++;
            double periodROC = tempReal - tempReal2;
            double trailingValue = tempReal2;
            if ((sumROC1 <= periodROC) || ((-1E-08 < sumROC1) && (sumROC1 < 1E-08))) {
                tempReal = 1.0;
            }
            else {
                tempReal = Math.Abs((double)(periodROC / sumROC1));
            }
            tempReal = (tempReal * constDiff) + constMax;
            tempReal *= tempReal;
            prevKAMA = ((inReal[today] - prevKAMA) * tempReal) + prevKAMA;
            today++;
            while (true) {
                if (today > startIdx) {
                    break;
                }
                tempReal = inReal[today];
                tempReal2 = inReal[trailingIdx];
                trailingIdx++;
                periodROC = tempReal - tempReal2;
                sumROC1 -= Math.Abs((double)(trailingValue - tempReal2));
                sumROC1 += Math.Abs((double)(tempReal - inReal[today - 1]));
                trailingValue = tempReal2;
                if ((sumROC1 <= periodROC) || ((-1E-08 < sumROC1) && (sumROC1 < 1E-08))) {
                    tempReal = 1.0;
                }
                else {
                    tempReal = Math.Abs((double)(periodROC / sumROC1));
                }
                tempReal = (tempReal * constDiff) + constMax;
                tempReal *= tempReal;
                prevKAMA = ((inReal[today] - prevKAMA) * tempReal) + prevKAMA;
                today++;
            }
            outReal[0] = prevKAMA;
            int outIdx = 1;
            outBegIdx = today - 1;
            while (true) {
                if (today > endIdx) {
                    break;
                }
                tempReal = inReal[today];
                tempReal2 = inReal[trailingIdx];
                trailingIdx++;
                periodROC = tempReal - tempReal2;
                sumROC1 -= Math.Abs((double)(trailingValue - tempReal2));
                sumROC1 += Math.Abs((double)(tempReal - inReal[today - 1]));
                trailingValue = tempReal2;
                if ((sumROC1 <= periodROC) || ((-1E-08 < sumROC1) && (sumROC1 < 1E-08))) {
                    tempReal = 1.0;
                }
                else {
                    tempReal = Math.Abs((double)(periodROC / sumROC1));
                }
                tempReal = (tempReal * constDiff) + constMax;
                tempReal *= tempReal;
                prevKAMA = ((inReal[today] - prevKAMA) * tempReal) + prevKAMA;
                today++;
                outReal[outIdx] = prevKAMA;
                outIdx++;
            }
            outNBElement = outIdx;
            return RetCode.Success;
        }
        public static RetCode LinearReg(int startIdx,int endIdx,SmartQuant.ISeries inReal,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 14;
            }
            else if ((optInTimePeriod < 2) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = LinearRegLookback(optInTimePeriod);
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            int outIdx = 0;
            int today = startIdx;
            double SumX = (optInTimePeriod * (optInTimePeriod - 1)) * 0.5;
            double SumXSqr = ((optInTimePeriod * (optInTimePeriod - 1)) * ((optInTimePeriod * 2) - 1)) / 6;
            double Divisor = (SumX * SumX) - (optInTimePeriod * SumXSqr);
            while (true) {
                if (today > endIdx) {
                    outBegIdx = startIdx;
                    outNBElement = outIdx;
                    return RetCode.Success;
                }
                double SumXY = 0.0;
                double SumY = 0.0;
                int i = optInTimePeriod;
                while (true) {
                    i--;
                    if (i == 0) {
                        break;
                    }
                    double tempValue1 = inReal[today - i];
                    SumY += tempValue1;
                    SumXY += i * tempValue1;
                }
                double m = ((optInTimePeriod * SumXY) - (SumX * SumY)) / Divisor;
                double b = (SumY - (m * SumX)) / ((double)optInTimePeriod);
                outReal[outIdx] = b + (m * (optInTimePeriod - 1));
                outIdx++;
                today++;
            }
        }
        public static RetCode LinearRegAngle(int startIdx,int endIdx,SmartQuant.ISeries inReal,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 14;
            }
            else if ((optInTimePeriod < 2) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = LinearRegAngleLookback(optInTimePeriod);
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            int outIdx = 0;
            int today = startIdx;
            double SumX = (optInTimePeriod * (optInTimePeriod - 1)) * 0.5;
            double SumXSqr = ((optInTimePeriod * (optInTimePeriod - 1)) * ((optInTimePeriod * 2) - 1)) / 6;
            double Divisor = (SumX * SumX) - (optInTimePeriod * SumXSqr);
            while (true) {
                if (today > endIdx) {
                    outBegIdx = startIdx;
                    outNBElement = outIdx;
                    return RetCode.Success;
                }
                double SumXY = 0.0;
                double SumY = 0.0;
                int i = optInTimePeriod;
                while (true) {
                    i--;
                    if (i == 0) {
                        break;
                    }
                    double tempValue1 = inReal[today - i];
                    SumY += tempValue1;
                    SumXY += i * tempValue1;
                }
                double m = ((optInTimePeriod * SumXY) - (SumX * SumY)) / Divisor;
                outReal[outIdx] = Math.Atan(m) * 57.295779513082323;
                outIdx++;
                today++;
            }
        }
        public static RetCode LinearRegIntercept(int startIdx,int endIdx,SmartQuant.ISeries inReal,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 14;
            }
            else if ((optInTimePeriod < 2) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = LinearRegInterceptLookback(optInTimePeriod);
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            int outIdx = 0;
            int today = startIdx;
            double SumX = (optInTimePeriod * (optInTimePeriod - 1)) * 0.5;
            double SumXSqr = ((optInTimePeriod * (optInTimePeriod - 1)) * ((optInTimePeriod * 2) - 1)) / 6;
            double Divisor = (SumX * SumX) - (optInTimePeriod * SumXSqr);
            while (true) {
                if (today > endIdx) {
                    outBegIdx = startIdx;
                    outNBElement = outIdx;
                    return RetCode.Success;
                }
                double SumXY = 0.0;
                double SumY = 0.0;
                int i = optInTimePeriod;
                while (true) {
                    i--;
                    if (i == 0) {
                        break;
                    }
                    double tempValue1 = inReal[today - i];
                    SumY += tempValue1;
                    SumXY += i * tempValue1;
                }
                double m = ((optInTimePeriod * SumXY) - (SumX * SumY)) / Divisor;
                outReal[outIdx] = (SumY - (m * SumX)) / ((double)optInTimePeriod);
                outIdx++;
                today++;
            }
        }
        public static RetCode LinearRegSlope(int startIdx,int endIdx,SmartQuant.ISeries inReal,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 14;
            }
            else if ((optInTimePeriod < 2) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = LinearRegSlopeLookback(optInTimePeriod);
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            int outIdx = 0;
            int today = startIdx;
            double SumX = (optInTimePeriod * (optInTimePeriod - 1)) * 0.5;
            double SumXSqr = ((optInTimePeriod * (optInTimePeriod - 1)) * ((optInTimePeriod * 2) - 1)) / 6;
            double Divisor = (SumX * SumX) - (optInTimePeriod * SumXSqr);
            while (true) {
                if (today > endIdx) {
                    outBegIdx = startIdx;
                    outNBElement = outIdx;
                    return RetCode.Success;
                }
                double SumXY = 0.0;
                double SumY = 0.0;
                int i = optInTimePeriod;
                while (true) {
                    i--;
                    if (i == 0) {
                        break;
                    }
                    double tempValue1 = inReal[today - i];
                    SumY += tempValue1;
                    SumXY += i * tempValue1;
                }
                outReal[outIdx] = ((optInTimePeriod * SumXY) - (SumX * SumY)) / Divisor;
                outIdx++;
                today++;
            }
        }
        public static RetCode Ln(int startIdx,int endIdx,SmartQuant.ISeries inReal,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int i = startIdx;
            int outIdx = 0;
            while (i <= endIdx) {
                outReal[outIdx] = Math.Log(inReal[i]);
                i++;
                outIdx++;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode Log10(int startIdx,int endIdx,SmartQuant.ISeries inReal,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int i = startIdx;
            int outIdx = 0;
            while (i <= endIdx) {
                outReal[outIdx] = Math.Log10(inReal[i]);
                i++;
                outIdx++;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode Macd(int startIdx,int endIdx,SmartQuant.ISeries inReal,int optInFastPeriod,int optInSlowPeriod,int optInSignalPeriod,ref int outBegIdx,ref int outNBElement,double[] outMACD,double[] outMACDSignal,double[] outMACDHist)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (optInFastPeriod == -2147483648) {
                optInFastPeriod = 12;
            }
            else if ((optInFastPeriod < 2) || (optInFastPeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (optInSlowPeriod == -2147483648) {
                optInSlowPeriod = 0x1a;
            }
            else if ((optInSlowPeriod < 2) || (optInSlowPeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (optInSignalPeriod == -2147483648) {
                optInSignalPeriod = 9;
            }
            else if ((optInSignalPeriod < 1) || (optInSignalPeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outMACD == null) {
                return RetCode.BadParam;
            }
            if (outMACDSignal == null) {
                return RetCode.BadParam;
            }
            if (outMACDHist == null) {
                return RetCode.BadParam;
            }
            return TA_INT_MACD(startIdx, endIdx, inReal, optInFastPeriod, optInSlowPeriod, optInSignalPeriod, ref outBegIdx, ref outNBElement, outMACD, outMACDSignal, outMACDHist);
        }
        public static RetCode MacdExt(int startIdx,int endIdx,SmartQuant.ISeries inReal,int optInFastPeriod,MAType optInFastMAType,int optInSlowPeriod,MAType optInSlowMAType,int optInSignalPeriod,MAType optInSignalMAType,ref int outBegIdx,ref int outNBElement,double[] outMACD,double[] outMACDSignal,double[] outMACDHist)
        {
            int i;
            int tempInteger = 0;
            int outNbElement1 = 0;
            int outNbElement2 = 0;
            int outBegIdx2 = 0;
            int outBegIdx1 = 0;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (optInFastPeriod == -2147483648) {
                optInFastPeriod = 12;
            }
            else if ((optInFastPeriod < 2) || (optInFastPeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (optInSlowPeriod == -2147483648) {
                optInSlowPeriod = 0x1a;
            }
            else if ((optInSlowPeriod < 2) || (optInSlowPeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (optInSignalPeriod == -2147483648) {
                optInSignalPeriod = 9;
            }
            else if ((optInSignalPeriod < 1) || (optInSignalPeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outMACD == null) {
                return RetCode.BadParam;
            }
            if (outMACDSignal == null) {
                return RetCode.BadParam;
            }
            if (outMACDHist == null) {
                return RetCode.BadParam;
            }
            if (optInSlowPeriod < optInFastPeriod) {
                tempInteger = optInSlowPeriod;
                optInSlowPeriod = optInFastPeriod;
                optInFastPeriod = tempInteger;
                MAType tempMAType = optInSlowMAType;
                optInSlowMAType = optInFastMAType;
                optInFastMAType = tempMAType;
            }
            int lookbackLargest = MovingAverageLookback(optInFastPeriod, optInFastMAType);
            tempInteger = MovingAverageLookback(optInSlowPeriod, optInSlowMAType);
            if (tempInteger > lookbackLargest) {
                lookbackLargest = tempInteger;
            }
            int lookbackSignal = MovingAverageLookback(optInSignalPeriod, optInSignalMAType);
            int lookbackTotal = lookbackSignal + lookbackLargest;
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            tempInteger = ((endIdx - startIdx) + 1) + lookbackSignal;
            double[] fastMABuffer = new double[tempInteger];
            if (fastMABuffer == null) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.AllocErr;
            }
            double[] slowMABuffer = new double[tempInteger];
            if (slowMABuffer == null) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.AllocErr;
            }
            tempInteger = startIdx - lookbackSignal;
            RetCode retCode = MovingAverage(tempInteger, endIdx, inReal, optInSlowPeriod, optInSlowMAType, ref outBegIdx1, ref outNbElement1, slowMABuffer);
            if (retCode != RetCode.Success) {
                outBegIdx = 0;
                outNBElement = 0;
                return retCode;
            }
            retCode = MovingAverage(tempInteger, endIdx, inReal, optInFastPeriod, optInFastMAType, ref outBegIdx2, ref outNbElement2, fastMABuffer);
            if (retCode != RetCode.Success) {
                outBegIdx = 0;
                outNBElement = 0;
                return retCode;
            }
            if (((outBegIdx1 != tempInteger) || (outBegIdx2 != tempInteger)) || ((outNbElement1 != outNbElement2) || (outNbElement1 != (((endIdx - startIdx) + 1) + lookbackSignal)))) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.InternalError;
            }
            for (i = 0; i < outNbElement1; i++) {
                fastMABuffer[i] -= slowMABuffer[i];
            }
            Array.Copy(fastMABuffer, lookbackSignal, outMACD, 0, (endIdx - startIdx) + 1);
            retCode = MovingAverage(0, outNbElement1 - 1, fastMABuffer, optInSignalPeriod, optInSignalMAType, ref outBegIdx2, ref outNbElement2, outMACDSignal);
            if (retCode != RetCode.Success) {
                outBegIdx = 0;
                outNBElement = 0;
                return retCode;
            }
            for (i = 0; i < outNbElement2; i++) {
                outMACDHist[i] = outMACD[i] - outMACDSignal[i];
            }
            outBegIdx = startIdx;
            outNBElement = outNbElement2;
            return RetCode.Success;
        }
        public static RetCode MacdFix(int startIdx,int endIdx,SmartQuant.ISeries inReal,int optInSignalPeriod,ref int outBegIdx,ref int outNBElement,double[] outMACD,double[] outMACDSignal,double[] outMACDHist)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (optInSignalPeriod == -2147483648) {
                optInSignalPeriod = 9;
            }
            else if ((optInSignalPeriod < 1) || (optInSignalPeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outMACD == null) {
                return RetCode.BadParam;
            }
            if (outMACDSignal == null) {
                return RetCode.BadParam;
            }
            if (outMACDHist == null) {
                return RetCode.BadParam;
            }
            return TA_INT_MACD(startIdx, endIdx, inReal, 0, 0, optInSignalPeriod, ref outBegIdx, ref outNBElement, outMACD, outMACDSignal, outMACDHist);
        }
        public static RetCode Mama(int startIdx,int endIdx,SmartQuant.ISeries inReal,double optInFastLimit,double optInSlowLimit,ref int outBegIdx,ref int outNBElement,double[] outMAMA,double[] outFAMA)
        {
            double smoothedValue;
            const double a = 0.0962;
            const double b = 0.5769;
            double[] detrender_Odd = new double[3];
            double[] detrender_Even = new double[3];
            double[] Q1_Odd = new double[3];
            double[] Q1_Even = new double[3];
            double[] jI_Odd = new double[3];
            double[] jI_Even = new double[3];
            double[] jQ_Odd = new double[3];
            double[] jQ_Even = new double[3];
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (optInFastLimit == -4E+37) {
                optInFastLimit = 0.5;
            }
            else if ((optInFastLimit < 0.01) || (optInFastLimit > 0.99)) {
                return RetCode.BadParam;
            }
            if (optInSlowLimit == -4E+37) {
                optInSlowLimit = 0.05;
            }
            else if ((optInSlowLimit < 0.01) || (optInSlowLimit > 0.99)) {
                return RetCode.BadParam;
            }
            if (outMAMA == null) {
                return RetCode.BadParam;
            }
            if (outFAMA == null) {
                return RetCode.BadParam;
            }
            double rad2Deg = 180.0 / (4.0 * Math.Atan(1.0));
            int lookbackTotal = ((int)Globals.unstablePeriod[13]) + 0x20;
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            outBegIdx = startIdx;
            int trailingWMAIdx = startIdx - lookbackTotal;
            int today = trailingWMAIdx;
            double tempReal = inReal[today];
            today++;
            double periodWMASub = tempReal;
            double periodWMASum = tempReal;
            tempReal = inReal[today];
            today++;
            periodWMASub += tempReal;
            periodWMASum += tempReal * 2.0;
            tempReal = inReal[today];
            today++;
            periodWMASub += tempReal;
            periodWMASum += tempReal * 3.0;
            double trailingWMAValue = 0.0;
            int i = 9;
            do {
                tempReal = inReal[today];
                today++;
                periodWMASub += tempReal;
                periodWMASub -= trailingWMAValue;
                periodWMASum += tempReal * 4.0;
                trailingWMAValue = inReal[trailingWMAIdx];
                trailingWMAIdx++;
                smoothedValue = periodWMASum * 0.1;
                periodWMASum -= periodWMASub;
                i--;
            }
            while (i != 0);
            int hilbertIdx = 0;
            detrender_Odd[0] = 0.0;
            detrender_Odd[1] = 0.0;
            detrender_Odd[2] = 0.0;
            detrender_Even[0] = 0.0;
            detrender_Even[1] = 0.0;
            detrender_Even[2] = 0.0;
            double detrender = 0.0;
            double prev_detrender_Odd = 0.0;
            double prev_detrender_Even = 0.0;
            double prev_detrender_input_Odd = 0.0;
            double prev_detrender_input_Even = 0.0;
            Q1_Odd[0] = 0.0;
            Q1_Odd[1] = 0.0;
            Q1_Odd[2] = 0.0;
            Q1_Even[0] = 0.0;
            Q1_Even[1] = 0.0;
            Q1_Even[2] = 0.0;
            double Q1 = 0.0;
            double prev_Q1_Odd = 0.0;
            double prev_Q1_Even = 0.0;
            double prev_Q1_input_Odd = 0.0;
            double prev_Q1_input_Even = 0.0;
            jI_Odd[0] = 0.0;
            jI_Odd[1] = 0.0;
            jI_Odd[2] = 0.0;
            jI_Even[0] = 0.0;
            jI_Even[1] = 0.0;
            jI_Even[2] = 0.0;
            double jI = 0.0;
            double prev_jI_Odd = 0.0;
            double prev_jI_Even = 0.0;
            double prev_jI_input_Odd = 0.0;
            double prev_jI_input_Even = 0.0;
            jQ_Odd[0] = 0.0;
            jQ_Odd[1] = 0.0;
            jQ_Odd[2] = 0.0;
            jQ_Even[0] = 0.0;
            jQ_Even[1] = 0.0;
            jQ_Even[2] = 0.0;
            double jQ = 0.0;
            double prev_jQ_Odd = 0.0;
            double prev_jQ_Even = 0.0;
            double prev_jQ_input_Odd = 0.0;
            double prev_jQ_input_Even = 0.0;
            double period = 0.0;
            int outIdx = 0;
            double prevQ2 = 0.0;
            double prevI2 = prevQ2;
            double Im = 0.0;
            double Re = Im;
            double fama = 0.0;
            double mama = fama;
            double I1ForEvenPrev3 = 0.0;
            double I1ForOddPrev3 = I1ForEvenPrev3;
            double I1ForEvenPrev2 = 0.0;
            double I1ForOddPrev2 = I1ForEvenPrev2;
            double prevPhase = 0.0;
            while (true) {
                double hilbertTempReal;
                double tempReal2;
                double I2;
                double Q2;
                if (today > endIdx) {
                    break;
                }
                double adjustedPrevPeriod = (0.075 * period) + 0.54;
                double todayValue = inReal[today];
                periodWMASub += todayValue;
                periodWMASub -= trailingWMAValue;
                periodWMASum += todayValue * 4.0;
                trailingWMAValue = inReal[trailingWMAIdx];
                trailingWMAIdx++;
                smoothedValue = periodWMASum * 0.1;
                periodWMASum -= periodWMASub;
                if ((today % 2) == 0) {
                    hilbertTempReal = a * smoothedValue;
                    detrender = -detrender_Even[hilbertIdx];
                    detrender_Even[hilbertIdx] = hilbertTempReal;
                    detrender += hilbertTempReal;
                    detrender -= prev_detrender_Even;
                    prev_detrender_Even = b * prev_detrender_input_Even;
                    detrender += prev_detrender_Even;
                    prev_detrender_input_Even = smoothedValue;
                    detrender *= adjustedPrevPeriod;
                    hilbertTempReal = a * detrender;
                    Q1 = -Q1_Even[hilbertIdx];
                    Q1_Even[hilbertIdx] = hilbertTempReal;
                    Q1 += hilbertTempReal;
                    Q1 -= prev_Q1_Even;
                    prev_Q1_Even = b * prev_Q1_input_Even;
                    Q1 += prev_Q1_Even;
                    prev_Q1_input_Even = detrender;
                    Q1 *= adjustedPrevPeriod;
                    hilbertTempReal = a * I1ForEvenPrev3;
                    jI = -jI_Even[hilbertIdx];
                    jI_Even[hilbertIdx] = hilbertTempReal;
                    jI += hilbertTempReal;
                    jI -= prev_jI_Even;
                    prev_jI_Even = b * prev_jI_input_Even;
                    jI += prev_jI_Even;
                    prev_jI_input_Even = I1ForEvenPrev3;
                    jI *= adjustedPrevPeriod;
                    hilbertTempReal = a * Q1;
                    jQ = -jQ_Even[hilbertIdx];
                    jQ_Even[hilbertIdx] = hilbertTempReal;
                    jQ += hilbertTempReal;
                    jQ -= prev_jQ_Even;
                    prev_jQ_Even = b * prev_jQ_input_Even;
                    jQ += prev_jQ_Even;
                    prev_jQ_input_Even = Q1;
                    jQ *= adjustedPrevPeriod;
                    hilbertIdx++;
                    if (hilbertIdx == 3) {
                        hilbertIdx = 0;
                    }
                    Q2 = (0.2 * (Q1 + jI)) + (0.8 * prevQ2);
                    I2 = (0.2 * (I1ForEvenPrev3 - jQ)) + (0.8 * prevI2);
                    I1ForOddPrev3 = I1ForOddPrev2;
                    I1ForOddPrev2 = detrender;
                    if (I1ForEvenPrev3 != 0.0) {
                        tempReal2 = Math.Atan(Q1 / I1ForEvenPrev3) * rad2Deg;
                    }
                    else {
                        tempReal2 = 0.0;
                    }
                }
                else {
                    hilbertTempReal = a * smoothedValue;
                    detrender = -detrender_Odd[hilbertIdx];
                    detrender_Odd[hilbertIdx] = hilbertTempReal;
                    detrender += hilbertTempReal;
                    detrender -= prev_detrender_Odd;
                    prev_detrender_Odd = b * prev_detrender_input_Odd;
                    detrender += prev_detrender_Odd;
                    prev_detrender_input_Odd = smoothedValue;
                    detrender *= adjustedPrevPeriod;
                    hilbertTempReal = a * detrender;
                    Q1 = -Q1_Odd[hilbertIdx];
                    Q1_Odd[hilbertIdx] = hilbertTempReal;
                    Q1 += hilbertTempReal;
                    Q1 -= prev_Q1_Odd;
                    prev_Q1_Odd = b * prev_Q1_input_Odd;
                    Q1 += prev_Q1_Odd;
                    prev_Q1_input_Odd = detrender;
                    Q1 *= adjustedPrevPeriod;
                    hilbertTempReal = a * I1ForOddPrev3;
                    jI = -jI_Odd[hilbertIdx];
                    jI_Odd[hilbertIdx] = hilbertTempReal;
                    jI += hilbertTempReal;
                    jI -= prev_jI_Odd;
                    prev_jI_Odd = b * prev_jI_input_Odd;
                    jI += prev_jI_Odd;
                    prev_jI_input_Odd = I1ForOddPrev3;
                    jI *= adjustedPrevPeriod;
                    hilbertTempReal = a * Q1;
                    jQ = -jQ_Odd[hilbertIdx];
                    jQ_Odd[hilbertIdx] = hilbertTempReal;
                    jQ += hilbertTempReal;
                    jQ -= prev_jQ_Odd;
                    prev_jQ_Odd = b * prev_jQ_input_Odd;
                    jQ += prev_jQ_Odd;
                    prev_jQ_input_Odd = Q1;
                    jQ *= adjustedPrevPeriod;
                    Q2 = (0.2 * (Q1 + jI)) + (0.8 * prevQ2);
                    I2 = (0.2 * (I1ForOddPrev3 - jQ)) + (0.8 * prevI2);
                    I1ForEvenPrev3 = I1ForEvenPrev2;
                    I1ForEvenPrev2 = detrender;
                    if (I1ForOddPrev3 != 0.0) {
                        tempReal2 = Math.Atan(Q1 / I1ForOddPrev3) * rad2Deg;
                    }
                    else {
                        tempReal2 = 0.0;
                    }
                }
                tempReal = prevPhase - tempReal2;
                prevPhase = tempReal2;
                if (tempReal < 1.0) {
                    tempReal = 1.0;
                }
                if (tempReal > 1.0) {
                    tempReal = optInFastLimit / tempReal;
                    if (tempReal < optInSlowLimit) {
                        tempReal = optInSlowLimit;
                    }
                }
                else {
                    tempReal = optInFastLimit;
                }
                mama = (tempReal * todayValue) + ((1.0 - tempReal) * mama);
                tempReal *= 0.5;
                fama = (tempReal * mama) + ((1.0 - tempReal) * fama);
                if (today >= startIdx) {
                    outMAMA[outIdx] = mama;
                    outFAMA[outIdx] = fama;
                    outIdx++;
                }
                Re = (0.2 * ((I2 * prevI2) + (Q2 * prevQ2))) + (0.8 * Re);
                Im = (0.2 * ((I2 * prevQ2) - (Q2 * prevI2))) + (0.8 * Im);
                prevQ2 = Q2;
                prevI2 = I2;
                tempReal = period;
                if ((Im != 0.0) && (Re != 0.0)) {
                    period = 360.0 / (Math.Atan(Im / Re) * rad2Deg);
                }
                tempReal2 = 1.5 * tempReal;
                if (period > tempReal2) {
                    period = tempReal2;
                }
                tempReal2 = 0.67 * tempReal;
                if (period < tempReal2) {
                    period = tempReal2;
                }
                if (period < 6.0) {
                    period = 6.0;
                }
                else if (period > 50.0) {
                    period = 50.0;
                }
                period = (0.2 * period) + (0.8 * tempReal);
                today++;
            }
            outNBElement = outIdx;
            return RetCode.Success;
        }
        public static RetCode Max(int startIdx,int endIdx,SmartQuant.ISeries inReal,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 30;
            }
            else if ((optInTimePeriod < 2) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int nbInitialElementNeeded = optInTimePeriod - 1;
            if (startIdx < nbInitialElementNeeded) {
                startIdx = nbInitialElementNeeded;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            int outIdx = 0;
            int today = startIdx;
            int trailingIdx = startIdx - nbInitialElementNeeded;
            int highestIdx = -1;
            double highest = 0.0;
            Label_008A:
            if (today > endIdx) {
                outBegIdx = startIdx;
                outNBElement = outIdx;
                return RetCode.Success;
            }
            double tmp = inReal[today];
            if (highestIdx < trailingIdx) {
                highestIdx = trailingIdx;
                highest = inReal[highestIdx];
                int i = highestIdx;
                while (true) {
                    i++;
                    if (i > today) {
                        goto Label_00CC;
                    }
                    tmp = inReal[i];
                    if (tmp > highest) {
                        highestIdx = i;
                        highest = tmp;
                    }
                }
            }
            if (tmp >= highest) {
                highestIdx = today;
                highest = tmp;
            }
            Label_00CC:
            outReal[outIdx] = highest;
            outIdx++;
            trailingIdx++;
            today++;
            goto Label_008A;
        }
        public static RetCode MaxIndex(int startIdx,int endIdx,SmartQuant.ISeries inReal,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,int[] outInteger)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 30;
            }
            else if ((optInTimePeriod < 2) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int nbInitialElementNeeded = optInTimePeriod - 1;
            if (startIdx < nbInitialElementNeeded) {
                startIdx = nbInitialElementNeeded;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            int outIdx = 0;
            int today = startIdx;
            int trailingIdx = startIdx - nbInitialElementNeeded;
            int highestIdx = -1;
            double highest = 0.0;
            Label_008B:
            if (today > endIdx) {
                outBegIdx = startIdx;
                outNBElement = outIdx;
                return RetCode.Success;
            }
            double tmp = inReal[today];
            if (highestIdx < trailingIdx) {
                highestIdx = trailingIdx;
                highest = inReal[highestIdx];
                int i = highestIdx;
                while (true) {
                    i++;
                    if (i > today) {
                        goto Label_00CC;
                    }
                    tmp = inReal[i];
                    if (tmp > highest) {
                        highestIdx = i;
                        highest = tmp;
                    }
                }
            }
            if (tmp >= highest) {
                highestIdx = today;
                highest = tmp;
            }
            Label_00CC:
            outInteger[outIdx] = highestIdx;
            outIdx++;
            trailingIdx++;
            today++;
            goto Label_008B;
        }
        public static RetCode MedPrice(int startIdx,int endIdx,double[] inHigh,double[] inLow,ref int outBegIdx,ref int outNBElement,double[] outReal,SmartQuant.ISeries inBar)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if ((inHigh == null) || (inLow == null)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int outIdx = 0;
            for (int i = startIdx; i <= endIdx; i++) {
                outReal[outIdx] = (inHigh[i] + inLow[i]) / 2.0;
                outIdx++;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode Mfi(int startIdx,int endIdx,double[] inHigh,double[] inLow,double[] inClose,double[] inVolume,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outReal,SmartQuant.ISeries inBar)
        {
            int mflow_Idx = 0;
            int maxIdx_mflow = 0x31;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inHigh == null) || (inLow == null)) || ((inClose == null) || (inVolume == null))) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 14;
            }
            else if ((optInTimePeriod < 2) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod <= 0) {
                return RetCode.AllocErr;
            }
            MoneyFlow[] mflow = new MoneyFlow[optInTimePeriod];
            for (int _mflow_index = 0; _mflow_index < mflow.Length; _mflow_index++) {
                mflow[_mflow_index] = new MoneyFlow();
            }
            if (mflow == null) {
                return RetCode.AllocErr;
            }
            maxIdx_mflow = optInTimePeriod - 1;
            outBegIdx = 0;
            outNBElement = 0;
            int lookbackTotal = optInTimePeriod + ((int)Globals.unstablePeriod[14]);
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx <= endIdx) {
                double tempValue1;
                double tempValue2;
                int outIdx = 0;
                int today = startIdx - lookbackTotal;
                double prevValue = ((inHigh[today] + inLow[today]) + inClose[today]) / 3.0;
                double posSumMF = 0.0;
                double negSumMF = 0.0;
                today++;
                for (int i = optInTimePeriod; i > 0; i--) {
                    tempValue1 = ((inHigh[today] + inLow[today]) + inClose[today]) / 3.0;
                    tempValue2 = tempValue1 - prevValue;
                    prevValue = tempValue1;
                    tempValue1 *= inVolume[today];
                    today++;
                    if (tempValue2 < 0.0) {
                        mflow[mflow_Idx].negative = tempValue1;
                        negSumMF += tempValue1;
                        mflow[mflow_Idx].positive = 0.0;
                    }
                    else if (tempValue2 > 0.0) {
                        mflow[mflow_Idx].positive = tempValue1;
                        posSumMF += tempValue1;
                        mflow[mflow_Idx].negative = 0.0;
                    }
                    else {
                        mflow[mflow_Idx].positive = 0.0;
                        mflow[mflow_Idx].negative = 0.0;
                    }
                    mflow_Idx++;
                    if (mflow_Idx > maxIdx_mflow) {
                        mflow_Idx = 0;
                    }
                }
                if (today > startIdx) {
                    tempValue1 = posSumMF + negSumMF;
                    if (tempValue1 < 1.0) {
                        outReal[outIdx] = 0.0;
                        outIdx++;
                    }
                    else {
                        outReal[outIdx] = 100.0 * (posSumMF / tempValue1);
                        outIdx++;
                    }
                }
                else {
                    while (today < startIdx) {
                        posSumMF -= mflow[mflow_Idx].positive;
                        negSumMF -= mflow[mflow_Idx].negative;
                        tempValue1 = ((inHigh[today] + inLow[today]) + inClose[today]) / 3.0;
                        tempValue2 = tempValue1 - prevValue;
                        prevValue = tempValue1;
                        tempValue1 *= inVolume[today];
                        today++;
                        if (tempValue2 < 0.0) {
                            mflow[mflow_Idx].negative = tempValue1;
                            negSumMF += tempValue1;
                            mflow[mflow_Idx].positive = 0.0;
                        }
                        else if (tempValue2 > 0.0) {
                            mflow[mflow_Idx].positive = tempValue1;
                            posSumMF += tempValue1;
                            mflow[mflow_Idx].negative = 0.0;
                        }
                        else {
                            mflow[mflow_Idx].positive = 0.0;
                            mflow[mflow_Idx].negative = 0.0;
                        }
                        mflow_Idx++;
                        if (mflow_Idx > maxIdx_mflow) {
                            mflow_Idx = 0;
                        }
                    }
                }
                while (today <= endIdx) {
                    posSumMF -= mflow[mflow_Idx].positive;
                    negSumMF -= mflow[mflow_Idx].negative;
                    tempValue1 = ((inHigh[today] + inLow[today]) + inClose[today]) / 3.0;
                    tempValue2 = tempValue1 - prevValue;
                    prevValue = tempValue1;
                    tempValue1 *= inVolume[today];
                    today++;
                    if (tempValue2 < 0.0) {
                        mflow[mflow_Idx].negative = tempValue1;
                        negSumMF += tempValue1;
                        mflow[mflow_Idx].positive = 0.0;
                    }
                    else if (tempValue2 > 0.0) {
                        mflow[mflow_Idx].positive = tempValue1;
                        posSumMF += tempValue1;
                        mflow[mflow_Idx].negative = 0.0;
                    }
                    else {
                        mflow[mflow_Idx].positive = 0.0;
                        mflow[mflow_Idx].negative = 0.0;
                    }
                    tempValue1 = posSumMF + negSumMF;
                    if (tempValue1 < 1.0) {
                        outReal[outIdx] = 0.0;
                        outIdx++;
                    }
                    else {
                        outReal[outIdx] = 100.0 * (posSumMF / tempValue1);
                        outIdx++;
                    }
                    mflow_Idx++;
                    if (mflow_Idx > maxIdx_mflow) {
                        mflow_Idx = 0;
                    }
                }
                outBegIdx = startIdx;
                outNBElement = outIdx;
            }
            return RetCode.Success;
        }
        public static RetCode MidPoint(int startIdx,int endIdx,SmartQuant.ISeries inReal,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 14;
            }
            else if ((optInTimePeriod < 2) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int nbInitialElementNeeded = optInTimePeriod - 1;
            if (startIdx < nbInitialElementNeeded) {
                startIdx = nbInitialElementNeeded;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            int outIdx = 0;
            int today = startIdx;
            int trailingIdx = startIdx - nbInitialElementNeeded;
            while (true) {
                if (today > endIdx) {
                    outBegIdx = startIdx;
                    outNBElement = outIdx;
                    return RetCode.Success;
                }
                double lowest = inReal[trailingIdx];
                trailingIdx++;
                double highest = lowest;
                for (int i = trailingIdx; i <= today; i++) {
                    double tmp = inReal[i];
                    if (tmp < lowest) {
                        lowest = tmp;
                    }
                    else if (tmp > highest) {
                        highest = tmp;
                    }
                }
                outReal[outIdx] = (highest + lowest) / 2.0;
                outIdx++;
                today++;
            }
        }
        public static RetCode MidPrice(int startIdx,int endIdx,double[] inHigh,double[] inLow,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outReal,SmartQuant.ISeries inBar)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if ((inHigh == null) || (inLow == null)) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 14;
            }
            else if ((optInTimePeriod < 2) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int nbInitialElementNeeded = optInTimePeriod - 1;
            if (startIdx < nbInitialElementNeeded) {
                startIdx = nbInitialElementNeeded;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            int outIdx = 0;
            int today = startIdx;
            int trailingIdx = startIdx - nbInitialElementNeeded;
            while (true) {
                if (today > endIdx) {
                    outBegIdx = startIdx;
                    outNBElement = outIdx;
                    return RetCode.Success;
                }
                double lowest = inLow[trailingIdx];
                double highest = inHigh[trailingIdx];
                trailingIdx++;
                for (int i = trailingIdx; i <= today; i++) {
                    double tmp = inLow[i];
                    if (tmp < lowest) {
                        lowest = tmp;
                    }
                    tmp = inHigh[i];
                    if (tmp > highest) {
                        highest = tmp;
                    }
                }
                outReal[outIdx] = (highest + lowest) / 2.0;
                outIdx++;
                today++;
            }
        }
        public static RetCode Min(int startIdx,int endIdx,SmartQuant.ISeries inReal,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 30;
            }
            else if ((optInTimePeriod < 2) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int nbInitialElementNeeded = optInTimePeriod - 1;
            if (startIdx < nbInitialElementNeeded) {
                startIdx = nbInitialElementNeeded;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            int outIdx = 0;
            int today = startIdx;
            int trailingIdx = startIdx - nbInitialElementNeeded;
            int lowestIdx = -1;
            double lowest = 0.0;
            Label_008A:
            if (today > endIdx) {
                outBegIdx = startIdx;
                outNBElement = outIdx;
                return RetCode.Success;
            }
            double tmp = inReal[today];
            if (lowestIdx < trailingIdx) {
                lowestIdx = trailingIdx;
                lowest = inReal[lowestIdx];
                int i = lowestIdx;
                while (true) {
                    i++;
                    if (i > today) {
                        goto Label_00CC;
                    }
                    tmp = inReal[i];
                    if (tmp < lowest) {
                        lowestIdx = i;
                        lowest = tmp;
                    }
                }
            }
            if (tmp <= lowest) {
                lowestIdx = today;
                lowest = tmp;
            }
            Label_00CC:
            outReal[outIdx] = lowest;
            outIdx++;
            trailingIdx++;
            today++;
            goto Label_008A;
        }
        public static RetCode MinIndex(int startIdx,int endIdx,SmartQuant.ISeries inReal,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,int[] outInteger)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 30;
            }
            else if ((optInTimePeriod < 2) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outInteger == null) {
                return RetCode.BadParam;
            }
            int nbInitialElementNeeded = optInTimePeriod - 1;
            if (startIdx < nbInitialElementNeeded) {
                startIdx = nbInitialElementNeeded;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            int outIdx = 0;
            int today = startIdx;
            int trailingIdx = startIdx - nbInitialElementNeeded;
            int lowestIdx = -1;
            double lowest = 0.0;
            Label_008B:
            if (today > endIdx) {
                outBegIdx = startIdx;
                outNBElement = outIdx;
                return RetCode.Success;
            }
            double tmp = inReal[today];
            if (lowestIdx < trailingIdx) {
                lowestIdx = trailingIdx;
                lowest = inReal[lowestIdx];
                int i = lowestIdx;
                while (true) {
                    i++;
                    if (i > today) {
                        goto Label_00CC;
                    }
                    tmp = inReal[i];
                    if (tmp < lowest) {
                        lowestIdx = i;
                        lowest = tmp;
                    }
                }
            }
            if (tmp <= lowest) {
                lowestIdx = today;
                lowest = tmp;
            }
            Label_00CC:
            outInteger[outIdx] = lowestIdx;
            outIdx++;
            trailingIdx++;
            today++;
            goto Label_008B;
        }
        public static RetCode MinMax(int startIdx,int endIdx,SmartQuant.ISeries inReal,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outMin,double[] outMax)
        {
            int i;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 30;
            }
            else if ((optInTimePeriod < 2) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outMin == null) {
                return RetCode.BadParam;
            }
            if (outMax == null) {
                return RetCode.BadParam;
            }
            int nbInitialElementNeeded = optInTimePeriod - 1;
            if (startIdx < nbInitialElementNeeded) {
                startIdx = nbInitialElementNeeded;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            int outIdx = 0;
            int today = startIdx;
            int trailingIdx = startIdx - nbInitialElementNeeded;
            int highestIdx = -1;
            double highest = 0.0;
            int lowestIdx = -1;
            double lowest = 0.0;
            Label_00A5:
            if (today > endIdx) {
                outBegIdx = startIdx;
                outNBElement = outIdx;
                return RetCode.Success;
            }
            double tmpHigh = inReal[today];
            double tmpLow = tmpHigh;
            if (highestIdx < trailingIdx) {
                highestIdx = trailingIdx;
                highest = inReal[highestIdx];
                i = highestIdx;
                while (true) {
                    i++;
                    if (i > today) {
                        goto Label_00EC;
                    }
                    tmpHigh = inReal[i];
                    if (tmpHigh > highest) {
                        highestIdx = i;
                        highest = tmpHigh;
                    }
                }
            }
            if (tmpHigh >= highest) {
                highestIdx = today;
                highest = tmpHigh;
            }
            Label_00EC:
            if (lowestIdx < trailingIdx) {
                lowestIdx = trailingIdx;
                lowest = inReal[lowestIdx];
                i = lowestIdx;
                while (true) {
                    i++;
                    if (i > today) {
                        goto Label_012A;
                    }
                    tmpLow = inReal[i];
                    if (tmpLow < lowest) {
                        lowestIdx = i;
                        lowest = tmpLow;
                    }
                }
            }
            if (tmpLow <= lowest) {
                lowestIdx = today;
                lowest = tmpLow;
            }
            Label_012A:
            outMax[outIdx] = highest;
            outMin[outIdx] = lowest;
            outIdx++;
            trailingIdx++;
            today++;
            goto Label_00A5;
        }
        public static RetCode MinMaxIndex(int startIdx,int endIdx,SmartQuant.ISeries inReal,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,int[] outMinIdx,int[] outMaxIdx)
        {
            int i;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 30;
            }
            else if ((optInTimePeriod < 2) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outMinIdx == null) {
                return RetCode.BadParam;
            }
            if (outMaxIdx == null) {
                return RetCode.BadParam;
            }
            int nbInitialElementNeeded = optInTimePeriod - 1;
            if (startIdx < nbInitialElementNeeded) {
                startIdx = nbInitialElementNeeded;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            int outIdx = 0;
            int today = startIdx;
            int trailingIdx = startIdx - nbInitialElementNeeded;
            int highestIdx = -1;
            double highest = 0.0;
            int lowestIdx = -1;
            double lowest = 0.0;
            Label_00AA:
            if (today > endIdx) {
                outBegIdx = startIdx;
                outNBElement = outIdx;
                return RetCode.Success;
            }
            double tmpHigh = inReal[today];
            double tmpLow = tmpHigh;
            if (highestIdx < trailingIdx) {
                highestIdx = trailingIdx;
                highest = inReal[highestIdx];
                i = highestIdx;
                while (true) {
                    i++;
                    if (i > today) {
                        goto Label_00F2;
                    }
                    tmpHigh = inReal[i];
                    if (tmpHigh > highest) {
                        highestIdx = i;
                        highest = tmpHigh;
                    }
                }
            }
            if (tmpHigh >= highest) {
                highestIdx = today;
                highest = tmpHigh;
            }
            Label_00F2:
            if (lowestIdx < trailingIdx) {
                lowestIdx = trailingIdx;
                lowest = inReal[lowestIdx];
                i = lowestIdx;
                while (true) {
                    i++;
                    if (i > today) {
                        goto Label_012A;
                    }
                    tmpLow = inReal[i];
                    if (tmpLow < lowest) {
                        lowestIdx = i;
                        lowest = tmpLow;
                    }
                }
            }
            if (tmpLow <= lowest) {
                lowestIdx = today;
                lowest = tmpLow;
            }
            Label_012A:
            outMaxIdx[outIdx] = highestIdx;
            outMinIdx[outIdx] = lowestIdx;
            outIdx++;
            trailingIdx++;
            today++;
            goto Label_00AA;
        }
        public static RetCode MinusDI(int startIdx,int endIdx,double[] inHigh,double[] inLow,double[] inClose,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outReal,SmartQuant.ISeries inBar)
        {
            double tempReal;
            int today;
            double tempReal2;
            double prevLow;
            double prevHigh;
            double diffM;
            double prevClose;
            double diffP;
            int lookbackTotal;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inHigh == null) || (inLow == null)) || (inClose == null)) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 14;
            }
            else if ((optInTimePeriod < 1) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod > 1) {
                lookbackTotal = optInTimePeriod + ((int)Globals.unstablePeriod[15]);
            }
            else {
                lookbackTotal = 1;
            }
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            int outIdx = 0;
            if (optInTimePeriod > 1) {
                today = startIdx;
                outBegIdx = today;
                double prevMinusDM = 0.0;
                double prevTR = 0.0;
                today = startIdx - lookbackTotal;
                prevHigh = inHigh[today];
                prevLow = inLow[today];
                prevClose = inClose[today];
                int i = optInTimePeriod - 1;
                while (true) {
                    i--;
                    if (i <= 0) {
                        i = ((int)Globals.unstablePeriod[15]) + 1;
                        while (true) {
                            i--;
                            if (i == 0) {
                                break;
                            }
                            today++;
                            tempReal = inHigh[today];
                            diffP = tempReal - prevHigh;
                            prevHigh = tempReal;
                            tempReal = inLow[today];
                            diffM = prevLow - tempReal;
                            prevLow = tempReal;
                            if ((diffM > 0.0) && (diffP < diffM)) {
                                prevMinusDM = (prevMinusDM - (prevMinusDM / ((double)optInTimePeriod))) + diffM;
                            }
                            else {
                                prevMinusDM -= prevMinusDM / ((double)optInTimePeriod);
                            }
                            tempReal = prevHigh - prevLow;
                            tempReal2 = Math.Abs((double)(prevHigh - prevClose));
                            if (tempReal2 > tempReal) {
                                tempReal = tempReal2;
                            }
                            tempReal2 = Math.Abs((double)(prevLow - prevClose));
                            if (tempReal2 > tempReal) {
                                tempReal = tempReal2;
                            }
                            prevTR = (prevTR - (prevTR / ((double)optInTimePeriod))) + tempReal;
                            prevClose = inClose[today];
                        }
                        if ((-1E-08 >= prevTR) || (prevTR >= 1E-08)) {
                            outReal[0] = 100.0 * (prevMinusDM / prevTR);
                        }
                        else {
                            outReal[0] = 0.0;
                        }
                        outIdx = 1;
                        while (today < endIdx) {
                            today++;
                            tempReal = inHigh[today];
                            diffP = tempReal - prevHigh;
                            prevHigh = tempReal;
                            tempReal = inLow[today];
                            diffM = prevLow - tempReal;
                            prevLow = tempReal;
                            if ((diffM > 0.0) && (diffP < diffM)) {
                                prevMinusDM = (prevMinusDM - (prevMinusDM / ((double)optInTimePeriod))) + diffM;
                            }
                            else {
                                prevMinusDM -= prevMinusDM / ((double)optInTimePeriod);
                            }
                            tempReal = prevHigh - prevLow;
                            tempReal2 = Math.Abs((double)(prevHigh - prevClose));
                            if (tempReal2 > tempReal) {
                                tempReal = tempReal2;
                            }
                            tempReal2 = Math.Abs((double)(prevLow - prevClose));
                            if (tempReal2 > tempReal) {
                                tempReal = tempReal2;
                            }
                            prevTR = (prevTR - (prevTR / ((double)optInTimePeriod))) + tempReal;
                            prevClose = inClose[today];
                            if ((-1E-08 >= prevTR) || (prevTR >= 1E-08)) {
                                outReal[outIdx] = 100.0 * (prevMinusDM / prevTR);
                                outIdx++;
                            }
                            else {
                                outReal[outIdx] = 0.0;
                                outIdx++;
                            }
                        }
                        outNBElement = outIdx;
                        return RetCode.Success;
                    }
                    today++;
                    tempReal = inHigh[today];
                    diffP = tempReal - prevHigh;
                    prevHigh = tempReal;
                    tempReal = inLow[today];
                    diffM = prevLow - tempReal;
                    prevLow = tempReal;
                    if ((diffM > 0.0) && (diffP < diffM)) {
                        prevMinusDM += diffM;
                    }
                    tempReal = prevHigh - prevLow;
                    tempReal2 = Math.Abs((double)(prevHigh - prevClose));
                    if (tempReal2 > tempReal) {
                        tempReal = tempReal2;
                    }
                    tempReal2 = Math.Abs((double)(prevLow - prevClose));
                    if (tempReal2 > tempReal) {
                        tempReal = tempReal2;
                    }
                    prevTR += tempReal;
                    prevClose = inClose[today];
                }
            }
            outBegIdx = startIdx;
            today = startIdx - 1;
            prevHigh = inHigh[today];
            prevLow = inLow[today];
            prevClose = inClose[today];
            while (true) {
                if (today >= endIdx) {
                    break;
                }
                today++;
                tempReal = inHigh[today];
                diffP = tempReal - prevHigh;
                prevHigh = tempReal;
                tempReal = inLow[today];
                diffM = prevLow - tempReal;
                prevLow = tempReal;
                if ((diffM > 0.0) && (diffP < diffM)) {
                    tempReal = prevHigh - prevLow;
                    tempReal2 = Math.Abs((double)(prevHigh - prevClose));
                    if (tempReal2 > tempReal) {
                        tempReal = tempReal2;
                    }
                    tempReal2 = Math.Abs((double)(prevLow - prevClose));
                    if (tempReal2 > tempReal) {
                        tempReal = tempReal2;
                    }
                    if ((-1E-08 < tempReal) && (tempReal < 1E-08)) {
                        outReal[outIdx] = 0.0;
                        outIdx++;
                    }
                    else {
                        outReal[outIdx] = diffM / tempReal;
                        outIdx++;
                    }
                }
                else {
                    outReal[outIdx] = 0.0;
                    outIdx++;
                }
                prevClose = inClose[today];
            }
            outNBElement = outIdx;
            return RetCode.Success;
        }
        public static RetCode MinusDM(int startIdx,int endIdx,double[] inHigh,double[] inLow,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outReal,SmartQuant.ISeries inBar)
        {
            double tempReal;
            int today;
            double diffM;
            double prevLow;
            double prevHigh;
            double diffP;
            int lookbackTotal;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if ((inHigh == null) || (inLow == null)) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 14;
            }
            else if ((optInTimePeriod < 1) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod > 1) {
                lookbackTotal = (optInTimePeriod + ((int)Globals.unstablePeriod[0x10])) - 1;
            }
            else {
                lookbackTotal = 1;
            }
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            int outIdx = 0;
            if (optInTimePeriod <= 1) {
                outBegIdx = startIdx;
                today = startIdx - 1;
                prevHigh = inHigh[today];
                prevLow = inLow[today];
                while (today < endIdx) {
                    today++;
                    tempReal = inHigh[today];
                    diffP = tempReal - prevHigh;
                    prevHigh = tempReal;
                    tempReal = inLow[today];
                    diffM = prevLow - tempReal;
                    prevLow = tempReal;
                    if ((diffM > 0.0) && (diffP < diffM)) {
                        outReal[outIdx] = diffM;
                        outIdx++;
                    }
                    else {
                        outReal[outIdx] = 0.0;
                        outIdx++;
                    }
                }
                outNBElement = outIdx;
                return RetCode.Success;
            }
            outBegIdx = startIdx;
            double prevMinusDM = 0.0;
            today = startIdx - lookbackTotal;
            prevHigh = inHigh[today];
            prevLow = inLow[today];
            int i = optInTimePeriod - 1;
            Label_0138:
            i--;
            if (i > 0) {
                today++;
                tempReal = inHigh[today];
                diffP = tempReal - prevHigh;
                prevHigh = tempReal;
                tempReal = inLow[today];
                diffM = prevLow - tempReal;
                prevLow = tempReal;
                if ((diffM > 0.0) && (diffP < diffM)) {
                    prevMinusDM += diffM;
                }
                goto Label_0138;
            }
            i = (int)Globals.unstablePeriod[0x10];
            Label_0186:
            i--;
            if (i != 0) {
                today++;
                tempReal = inHigh[today];
                diffP = tempReal - prevHigh;
                prevHigh = tempReal;
                tempReal = inLow[today];
                diffM = prevLow - tempReal;
                prevLow = tempReal;
                if ((diffM > 0.0) && (diffP < diffM)) {
                    prevMinusDM = (prevMinusDM - (prevMinusDM / ((double)optInTimePeriod))) + diffM;
                }
                else {
                    prevMinusDM -= prevMinusDM / ((double)optInTimePeriod);
                }
                goto Label_0186;
            }
            outReal[0] = prevMinusDM;
            outIdx = 1;
            while (true) {
                if (today >= endIdx) {
                    break;
                }
                today++;
                tempReal = inHigh[today];
                diffP = tempReal - prevHigh;
                prevHigh = tempReal;
                tempReal = inLow[today];
                diffM = prevLow - tempReal;
                prevLow = tempReal;
                if ((diffM > 0.0) && (diffP < diffM)) {
                    prevMinusDM = (prevMinusDM - (prevMinusDM / ((double)optInTimePeriod))) + diffM;
                }
                else {
                    prevMinusDM -= prevMinusDM / ((double)optInTimePeriod);
                }
                outReal[outIdx] = prevMinusDM;
                outIdx++;
            }
            outNBElement = outIdx;
            return RetCode.Success;
        }
        public static RetCode Mom(int startIdx,int endIdx,SmartQuant.ISeries inReal,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 10;
            }
            else if ((optInTimePeriod < 1) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            if (startIdx < optInTimePeriod) {
                startIdx = optInTimePeriod;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            int outIdx = 0;
            int inIdx = startIdx;
            int trailingIdx = startIdx - optInTimePeriod;
            while (true) {
                if (inIdx > endIdx) {
                    break;
                }
                outReal[outIdx] = inReal[inIdx] - inReal[trailingIdx];
                outIdx++;
                trailingIdx++;
                inIdx++;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode MovingAverage(int startIdx,int endIdx,SmartQuant.ISeries inReal,int optInTimePeriod,MAType optInMAType,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 30;
            }
            else if ((optInTimePeriod < 1) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod != 1) {
                switch (optInMAType) {
                    case MAType.Sma:
                        return Sma(startIdx, endIdx, inReal, optInTimePeriod, ref outBegIdx, ref outNBElement, outReal);

                    case MAType.Ema:
                        return Ema(startIdx, endIdx, inReal, optInTimePeriod, ref outBegIdx, ref outNBElement, outReal);

                    case MAType.Wma:
                        return Wma(startIdx, endIdx, inReal, optInTimePeriod, ref outBegIdx, ref outNBElement, outReal);

                    case MAType.Dema:
                        return Dema(startIdx, endIdx, inReal, optInTimePeriod, ref outBegIdx, ref outNBElement, outReal);

                    case MAType.Tema:
                        return Tema(startIdx, endIdx, inReal, optInTimePeriod, ref outBegIdx, ref outNBElement, outReal);

                    case MAType.Trima:
                        return Trima(startIdx, endIdx, inReal, optInTimePeriod, ref outBegIdx, ref outNBElement, outReal);

                    case MAType.Kama:
                        return Kama(startIdx, endIdx, inReal, optInTimePeriod, ref outBegIdx, ref outNBElement, outReal);

                    case MAType.Mama: {
                            double[] dummyBuffer = new double[(endIdx - startIdx) + 1];
                            if (dummyBuffer != null) {
                                return Mama(startIdx, endIdx, inReal, 0.5, 0.05, ref outBegIdx, ref outNBElement, outReal, dummyBuffer);
                            }
                            return RetCode.AllocErr;
                        }
                    case MAType.T3:
                        return T3(startIdx, endIdx, inReal, optInTimePeriod, 0.7, ref outBegIdx, ref outNBElement, outReal);
                }
                return RetCode.BadParam;
            }
            int nbElement = (endIdx - startIdx) + 1;
            outNBElement = nbElement;
            int todayIdx = startIdx;
            int outIdx = 0;
            while (outIdx < nbElement) {
                outReal[outIdx] = inReal[todayIdx];
                outIdx++;
                todayIdx++;
            }
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode MovingAverageVariablePeriod(int startIdx,int endIdx,SmartQuant.ISeries inReal,double[] inPeriods,int optInMinPeriod,int optInMaxPeriod,MAType optInMAType,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            int i;
            int tempInt = 0;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (inPeriods == null) {
                return RetCode.BadParam;
            }
            if (optInMinPeriod == -2147483648) {
                optInMinPeriod = 2;
            }
            else if ((optInMinPeriod < 2) || (optInMinPeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (optInMaxPeriod == -2147483648) {
                optInMaxPeriod = 30;
            }
            else if ((optInMaxPeriod < 2) || (optInMaxPeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = MovingAverageLookback(optInMaxPeriod, optInMAType);
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            if (lookbackTotal > startIdx) {
                tempInt = lookbackTotal;
            }
            else {
                tempInt = startIdx;
            }
            if (tempInt > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            int outputSize = (endIdx - tempInt) + 1;
            double[] localOutputArray = new double[outputSize];
            int[] localPeriodArray = new int[outputSize];
            for (i = 0; i < outputSize; i++) {
                tempInt = (int)inPeriods[startIdx + i];
                if (tempInt < optInMinPeriod) {
                    tempInt = optInMinPeriod;
                }
                else if (tempInt > optInMaxPeriod) {
                    tempInt = optInMaxPeriod;
                }
                localPeriodArray[i] = tempInt;
            }
            i = 0;
            while (true) {
                if (i >= outputSize) {
                    outBegIdx = startIdx;
                    outNBElement = outputSize;
                    return RetCode.Success;
                }
                int curPeriod = localPeriodArray[i];
                if (curPeriod != 0) {
                    int localNbElement = 0;
                    int localBegIdx = 0;
                    RetCode retCode = MovingAverage(startIdx, endIdx, inReal, curPeriod, optInMAType, ref localBegIdx, ref localNbElement, localOutputArray);
                    if (retCode != RetCode.Success) {
                        outBegIdx = 0;
                        outNBElement = 0;
                        return retCode;
                    }
                    outReal[i] = localOutputArray[i];
                    for (int j = i + 1; j < outputSize; j++) {
                        if (localPeriodArray[j] == curPeriod) {
                            localPeriodArray[j] = 0;
                            outReal[j] = localOutputArray[j];
                        }
                    }
                }
                i++;
            }
        }
        public static RetCode Mult(int startIdx,int endIdx,SmartQuant.ISeries inReal0,SmartQuant.ISeries inReal1,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal0 == null) {
                return RetCode.BadParam;
            }
            if (inReal1 == null) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int i = startIdx;
            int outIdx = 0;
            while (i <= endIdx) {
                outReal[outIdx] = inReal0[i] * inReal1[i];
                i++;
                outIdx++;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode Natr(int startIdx,int endIdx,double[] inHigh,double[] inLow,double[] inClose,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outReal,SmartQuant.ISeries inBar)
        {
            int outNbElement1 = 0;
            int outBegIdx1 = 0;
            double[] prevATRTemp = new double[1];
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inHigh == null) || (inLow == null)) || (inClose == null)) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 14;
            }
            else if ((optInTimePeriod < 1) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            outBegIdx = 0;
            outNBElement = 0;
            int lookbackTotal = NatrLookback(optInTimePeriod);
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                return RetCode.Success;
            }
            if (optInTimePeriod <= 1) {
                return TrueRange(startIdx, endIdx, inHigh, inLow, inClose, ref outBegIdx, ref outNBElement, outReal);
            }
            double[] tempBuffer = new double[(lookbackTotal + (endIdx - startIdx)) + 1];
            RetCode retCode = TrueRange((startIdx - lookbackTotal) + 1, endIdx, inHigh, inLow, inClose, ref outBegIdx1, ref outNbElement1, tempBuffer);
            if (retCode == RetCode.Success) {
                retCode = TA_INT_SMA(optInTimePeriod - 1, optInTimePeriod - 1, tempBuffer, optInTimePeriod, ref outBegIdx1, ref outNbElement1, prevATRTemp);
                if (retCode != RetCode.Success) {
                    return retCode;
                }
                double prevATR = prevATRTemp[0];
                int today = optInTimePeriod;
                int outIdx = (int)Globals.unstablePeriod[0x11];
                while (true) {
                    if (outIdx == 0) {
                        break;
                    }
                    prevATR *= optInTimePeriod - 1;
                    prevATR += tempBuffer[today];
                    today++;
                    prevATR /= (double)optInTimePeriod;
                    outIdx--;
                }
                outIdx = 1;
                double tempValue = inClose[today];
                if ((-1E-08 >= tempValue) || (tempValue >= 1E-08)) {
                    outReal[0] = (prevATR / tempValue) * 100.0;
                }
                else {
                    outReal[0] = 0.0;
                }
                int nbATR = (endIdx - startIdx) + 1;
                while (true) {
                    nbATR--;
                    if (nbATR == 0) {
                        break;
                    }
                    prevATR *= optInTimePeriod - 1;
                    prevATR += tempBuffer[today];
                    today++;
                    prevATR /= (double)optInTimePeriod;
                    tempValue = inClose[today];
                    if ((-1E-08 >= tempValue) || (tempValue >= 1E-08)) {
                        outReal[outIdx] = (prevATR / tempValue) * 100.0;
                    }
                    else {
                        outReal[0] = 0.0;
                    }
                    outIdx++;
                }
                outBegIdx = startIdx;
                outNBElement = outIdx;
            }
            return retCode;
        }
        public static RetCode Obv(int startIdx,int endIdx,SmartQuant.ISeries inReal,double[] inVolume,ref int outBegIdx,ref int outNBElement,double[] outReal,SmartQuant.ISeries inBar)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (inVolume == null) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            double prevOBV = inVolume[startIdx];
            double prevReal = inReal[startIdx];
            int outIdx = 0;
            for (int i = startIdx; i <= endIdx; i++) {
                double tempReal = inReal[i];
                if (tempReal > prevReal) {
                    prevOBV += inVolume[i];
                }
                else if (tempReal < prevReal) {
                    prevOBV -= inVolume[i];
                }
                outReal[outIdx] = prevOBV;
                outIdx++;
                prevReal = tempReal;
            }
            outBegIdx = startIdx;
            outNBElement = outIdx;
            return RetCode.Success;
        }
        public static RetCode PlusDI(int startIdx,int endIdx,double[] inHigh,double[] inLow,double[] inClose,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outReal,SmartQuant.ISeries inBar)
        {
            double tempReal;
            int today;
            double tempReal2;
            double prevLow;
            double prevHigh;
            double diffP;
            double prevClose;
            double diffM;
            int lookbackTotal;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inHigh == null) || (inLow == null)) || (inClose == null)) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 14;
            }
            else if ((optInTimePeriod < 1) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod > 1) {
                lookbackTotal = optInTimePeriod + ((int)Globals.unstablePeriod[0x12]);
            }
            else {
                lookbackTotal = 1;
            }
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            int outIdx = 0;
            if (optInTimePeriod > 1) {
                today = startIdx;
                outBegIdx = today;
                double prevPlusDM = 0.0;
                double prevTR = 0.0;
                today = startIdx - lookbackTotal;
                prevHigh = inHigh[today];
                prevLow = inLow[today];
                prevClose = inClose[today];
                int i = optInTimePeriod - 1;
                while (true) {
                    i--;
                    if (i <= 0) {
                        i = ((int)Globals.unstablePeriod[0x12]) + 1;
                        while (true) {
                            i--;
                            if (i == 0) {
                                break;
                            }
                            today++;
                            tempReal = inHigh[today];
                            diffP = tempReal - prevHigh;
                            prevHigh = tempReal;
                            tempReal = inLow[today];
                            diffM = prevLow - tempReal;
                            prevLow = tempReal;
                            if ((diffP > 0.0) && (diffP > diffM)) {
                                prevPlusDM = (prevPlusDM - (prevPlusDM / ((double)optInTimePeriod))) + diffP;
                            }
                            else {
                                prevPlusDM -= prevPlusDM / ((double)optInTimePeriod);
                            }
                            tempReal = prevHigh - prevLow;
                            tempReal2 = Math.Abs((double)(prevHigh - prevClose));
                            if (tempReal2 > tempReal) {
                                tempReal = tempReal2;
                            }
                            tempReal2 = Math.Abs((double)(prevLow - prevClose));
                            if (tempReal2 > tempReal) {
                                tempReal = tempReal2;
                            }
                            prevTR = (prevTR - (prevTR / ((double)optInTimePeriod))) + tempReal;
                            prevClose = inClose[today];
                        }
                        if ((-1E-08 >= prevTR) || (prevTR >= 1E-08)) {
                            outReal[0] = 100.0 * (prevPlusDM / prevTR);
                        }
                        else {
                            outReal[0] = 0.0;
                        }
                        outIdx = 1;
                        while (today < endIdx) {
                            today++;
                            tempReal = inHigh[today];
                            diffP = tempReal - prevHigh;
                            prevHigh = tempReal;
                            tempReal = inLow[today];
                            diffM = prevLow - tempReal;
                            prevLow = tempReal;
                            if ((diffP > 0.0) && (diffP > diffM)) {
                                prevPlusDM = (prevPlusDM - (prevPlusDM / ((double)optInTimePeriod))) + diffP;
                            }
                            else {
                                prevPlusDM -= prevPlusDM / ((double)optInTimePeriod);
                            }
                            tempReal = prevHigh - prevLow;
                            tempReal2 = Math.Abs((double)(prevHigh - prevClose));
                            if (tempReal2 > tempReal) {
                                tempReal = tempReal2;
                            }
                            tempReal2 = Math.Abs((double)(prevLow - prevClose));
                            if (tempReal2 > tempReal) {
                                tempReal = tempReal2;
                            }
                            prevTR = (prevTR - (prevTR / ((double)optInTimePeriod))) + tempReal;
                            prevClose = inClose[today];
                            if ((-1E-08 >= prevTR) || (prevTR >= 1E-08)) {
                                outReal[outIdx] = 100.0 * (prevPlusDM / prevTR);
                                outIdx++;
                            }
                            else {
                                outReal[outIdx] = 0.0;
                                outIdx++;
                            }
                        }
                        outNBElement = outIdx;
                        return RetCode.Success;
                    }
                    today++;
                    tempReal = inHigh[today];
                    diffP = tempReal - prevHigh;
                    prevHigh = tempReal;
                    tempReal = inLow[today];
                    diffM = prevLow - tempReal;
                    prevLow = tempReal;
                    if ((diffP > 0.0) && (diffP > diffM)) {
                        prevPlusDM += diffP;
                    }
                    tempReal = prevHigh - prevLow;
                    tempReal2 = Math.Abs((double)(prevHigh - prevClose));
                    if (tempReal2 > tempReal) {
                        tempReal = tempReal2;
                    }
                    tempReal2 = Math.Abs((double)(prevLow - prevClose));
                    if (tempReal2 > tempReal) {
                        tempReal = tempReal2;
                    }
                    prevTR += tempReal;
                    prevClose = inClose[today];
                }
            }
            outBegIdx = startIdx;
            today = startIdx - 1;
            prevHigh = inHigh[today];
            prevLow = inLow[today];
            prevClose = inClose[today];
            while (true) {
                if (today >= endIdx) {
                    break;
                }
                today++;
                tempReal = inHigh[today];
                diffP = tempReal - prevHigh;
                prevHigh = tempReal;
                tempReal = inLow[today];
                diffM = prevLow - tempReal;
                prevLow = tempReal;
                if ((diffP > 0.0) && (diffP > diffM)) {
                    tempReal = prevHigh - prevLow;
                    tempReal2 = Math.Abs((double)(prevHigh - prevClose));
                    if (tempReal2 > tempReal) {
                        tempReal = tempReal2;
                    }
                    tempReal2 = Math.Abs((double)(prevLow - prevClose));
                    if (tempReal2 > tempReal) {
                        tempReal = tempReal2;
                    }
                    if ((-1E-08 < tempReal) && (tempReal < 1E-08)) {
                        outReal[outIdx] = 0.0;
                        outIdx++;
                    }
                    else {
                        outReal[outIdx] = diffP / tempReal;
                        outIdx++;
                    }
                }
                else {
                    outReal[outIdx] = 0.0;
                    outIdx++;
                }
                prevClose = inClose[today];
            }
            outNBElement = outIdx;
            return RetCode.Success;
        }
        public static RetCode PlusDM(int startIdx,int endIdx,double[] inHigh,double[] inLow,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outReal,SmartQuant.ISeries inBar)
        {
            double tempReal;
            int today;
            double diffP;
            double prevLow;
            double prevHigh;
            double diffM;
            int lookbackTotal;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if ((inHigh == null) || (inLow == null)) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 14;
            }
            else if ((optInTimePeriod < 1) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod > 1) {
                lookbackTotal = (optInTimePeriod + ((int)Globals.unstablePeriod[0x13])) - 1;
            }
            else {
                lookbackTotal = 1;
            }
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            int outIdx = 0;
            if (optInTimePeriod <= 1) {
                outBegIdx = startIdx;
                today = startIdx - 1;
                prevHigh = inHigh[today];
                prevLow = inLow[today];
                while (today < endIdx) {
                    today++;
                    tempReal = inHigh[today];
                    diffP = tempReal - prevHigh;
                    prevHigh = tempReal;
                    tempReal = inLow[today];
                    diffM = prevLow - tempReal;
                    prevLow = tempReal;
                    if ((diffP > 0.0) && (diffP > diffM)) {
                        outReal[outIdx] = diffP;
                        outIdx++;
                    }
                    else {
                        outReal[outIdx] = 0.0;
                        outIdx++;
                    }
                }
                outNBElement = outIdx;
                return RetCode.Success;
            }
            outBegIdx = startIdx;
            double prevPlusDM = 0.0;
            today = startIdx - lookbackTotal;
            prevHigh = inHigh[today];
            prevLow = inLow[today];
            int i = optInTimePeriod - 1;
            Label_0138:
            i--;
            if (i > 0) {
                today++;
                tempReal = inHigh[today];
                diffP = tempReal - prevHigh;
                prevHigh = tempReal;
                tempReal = inLow[today];
                diffM = prevLow - tempReal;
                prevLow = tempReal;
                if ((diffP > 0.0) && (diffP > diffM)) {
                    prevPlusDM += diffP;
                }
                goto Label_0138;
            }
            i = (int)Globals.unstablePeriod[0x13];
            Label_0186:
            i--;
            if (i != 0) {
                today++;
                tempReal = inHigh[today];
                diffP = tempReal - prevHigh;
                prevHigh = tempReal;
                tempReal = inLow[today];
                diffM = prevLow - tempReal;
                prevLow = tempReal;
                if ((diffP > 0.0) && (diffP > diffM)) {
                    prevPlusDM = (prevPlusDM - (prevPlusDM / ((double)optInTimePeriod))) + diffP;
                }
                else {
                    prevPlusDM -= prevPlusDM / ((double)optInTimePeriod);
                }
                goto Label_0186;
            }
            outReal[0] = prevPlusDM;
            outIdx = 1;
            while (true) {
                if (today >= endIdx) {
                    break;
                }
                today++;
                tempReal = inHigh[today];
                diffP = tempReal - prevHigh;
                prevHigh = tempReal;
                tempReal = inLow[today];
                diffM = prevLow - tempReal;
                prevLow = tempReal;
                if ((diffP > 0.0) && (diffP > diffM)) {
                    prevPlusDM = (prevPlusDM - (prevPlusDM / ((double)optInTimePeriod))) + diffP;
                }
                else {
                    prevPlusDM -= prevPlusDM / ((double)optInTimePeriod);
                }
                outReal[outIdx] = prevPlusDM;
                outIdx++;
            }
            outNBElement = outIdx;
            return RetCode.Success;
        }
        public static RetCode Ppo(int startIdx,int endIdx,SmartQuant.ISeries inReal,int optInFastPeriod,int optInSlowPeriod,MAType optInMAType,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (optInFastPeriod == -2147483648) {
                optInFastPeriod = 12;
            }
            else if ((optInFastPeriod < 2) || (optInFastPeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (optInSlowPeriod == -2147483648) {
                optInSlowPeriod = 0x1a;
            }
            else if ((optInSlowPeriod < 2) || (optInSlowPeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            double[] tempBuffer = new double[(endIdx - startIdx) + 1];
            if (tempBuffer == null) {
                return RetCode.AllocErr;
            }
            return TA_INT_PO(startIdx, endIdx, inReal, optInFastPeriod, optInSlowPeriod, optInMAType, ref outBegIdx, ref outNBElement, outReal, tempBuffer, 1);
        }
        public static RetCode Roc(int startIdx,int endIdx,SmartQuant.ISeries inReal,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 10;
            }
            else if ((optInTimePeriod < 1) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            if (startIdx < optInTimePeriod) {
                startIdx = optInTimePeriod;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            int outIdx = 0;
            int inIdx = startIdx;
            int trailingIdx = startIdx - optInTimePeriod;
            while (true) {
                if (inIdx > endIdx) {
                    break;
                }
                double tempReal = inReal[trailingIdx];
                trailingIdx++;
                if (tempReal != 0.0) {
                    outReal[outIdx] = ((inReal[inIdx] / tempReal) - 1.0) * 100.0;
                    outIdx++;
                }
                else {
                    outReal[outIdx] = 0.0;
                    outIdx++;
                }
                inIdx++;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode RocP(int startIdx,int endIdx,SmartQuant.ISeries inReal,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 10;
            }
            else if ((optInTimePeriod < 1) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            if (startIdx < optInTimePeriod) {
                startIdx = optInTimePeriod;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            int outIdx = 0;
            int inIdx = startIdx;
            int trailingIdx = startIdx - optInTimePeriod;
            while (true) {
                if (inIdx > endIdx) {
                    break;
                }
                double tempReal = inReal[trailingIdx];
                trailingIdx++;
                if (tempReal != 0.0) {
                    outReal[outIdx] = (inReal[inIdx] - tempReal) / tempReal;
                    outIdx++;
                }
                else {
                    outReal[outIdx] = 0.0;
                    outIdx++;
                }
                inIdx++;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode RocR(int startIdx,int endIdx,SmartQuant.ISeries inReal,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 10;
            }
            else if ((optInTimePeriod < 1) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            if (startIdx < optInTimePeriod) {
                startIdx = optInTimePeriod;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            int outIdx = 0;
            int inIdx = startIdx;
            int trailingIdx = startIdx - optInTimePeriod;
            while (true) {
                if (inIdx > endIdx) {
                    break;
                }
                double tempReal = inReal[trailingIdx];
                trailingIdx++;
                if (tempReal != 0.0) {
                    outReal[outIdx] = inReal[inIdx] / tempReal;
                    outIdx++;
                }
                else {
                    outReal[outIdx] = 0.0;
                    outIdx++;
                }
                inIdx++;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode RocR100(int startIdx,int endIdx,SmartQuant.ISeries inReal,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 10;
            }
            else if ((optInTimePeriod < 1) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            if (startIdx < optInTimePeriod) {
                startIdx = optInTimePeriod;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            int outIdx = 0;
            int inIdx = startIdx;
            int trailingIdx = startIdx - optInTimePeriod;
            while (true) {
                if (inIdx > endIdx) {
                    break;
                }
                double tempReal = inReal[trailingIdx];
                trailingIdx++;
                if (tempReal != 0.0) {
                    outReal[outIdx] = (inReal[inIdx] / tempReal) * 100.0;
                    outIdx++;
                }
                else {
                    outReal[outIdx] = 0.0;
                    outIdx++;
                }
                inIdx++;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode Rsi(int startIdx,int endIdx,SmartQuant.ISeries inReal,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 14;
            }
            else if ((optInTimePeriod < 2) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            outBegIdx = 0;
            outNBElement = 0;
            int lookbackTotal = RsiLookback(optInTimePeriod);
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx <= endIdx) {
                double tempValue1;
                double prevGain;
                double prevLoss;
                double tempValue2;
                int i;
                int outIdx = 0;
                if (optInTimePeriod == 1) {
                    outBegIdx = startIdx;
                    i = (endIdx - startIdx) + 1;
                    outNBElement = i;
                    Array.Copy(inReal, startIdx, outReal, 0, i);
                    return RetCode.Success;
                }
                int today = startIdx - lookbackTotal;
                double prevValue = inReal[today];
                if ((Globals.unstablePeriod[20] == 0) && (Globals.compatibility == Compatibility.Metastock)) {
                    double savePrevValue = prevValue;
                    prevGain = 0.0;
                    prevLoss = 0.0;
                    for (i = optInTimePeriod; i > 0; i--) {
                        tempValue1 = inReal[today];
                        today++;
                        tempValue2 = tempValue1 - prevValue;
                        prevValue = tempValue1;
                        if (tempValue2 < 0.0) {
                            prevLoss -= tempValue2;
                        }
                        else {
                            prevGain += tempValue2;
                        }
                    }
                    tempValue1 = prevLoss / ((double)optInTimePeriod);
                    tempValue2 = prevGain / ((double)optInTimePeriod);
                    tempValue1 = tempValue2 + tempValue1;
                    if ((-1E-08 >= tempValue1) || (tempValue1 >= 1E-08)) {
                        outReal[outIdx] = 100.0 * (tempValue2 / tempValue1);
                        outIdx++;
                    }
                    else {
                        outReal[outIdx] = 0.0;
                        outIdx++;
                    }
                    if (today > endIdx) {
                        outBegIdx = startIdx;
                        outNBElement = outIdx;
                        return RetCode.Success;
                    }
                    today -= optInTimePeriod;
                    prevValue = savePrevValue;
                }
                prevGain = 0.0;
                prevLoss = 0.0;
                today++;
                for (i = optInTimePeriod; i > 0; i--) {
                    tempValue1 = inReal[today];
                    today++;
                    tempValue2 = tempValue1 - prevValue;
                    prevValue = tempValue1;
                    if (tempValue2 < 0.0) {
                        prevLoss -= tempValue2;
                    }
                    else {
                        prevGain += tempValue2;
                    }
                }
                prevLoss /= (double)optInTimePeriod;
                prevGain /= (double)optInTimePeriod;
                if (today > startIdx) {
                    tempValue1 = prevGain + prevLoss;
                    if ((-1E-08 >= tempValue1) || (tempValue1 >= 1E-08)) {
                        outReal[outIdx] = 100.0 * (prevGain / tempValue1);
                        outIdx++;
                    }
                    else {
                        outReal[outIdx] = 0.0;
                        outIdx++;
                    }
                }
                else {
                    while (today < startIdx) {
                        tempValue1 = inReal[today];
                        tempValue2 = tempValue1 - prevValue;
                        prevValue = tempValue1;
                        prevLoss *= optInTimePeriod - 1;
                        prevGain *= optInTimePeriod - 1;
                        if (tempValue2 < 0.0) {
                            prevLoss -= tempValue2;
                        }
                        else {
                            prevGain += tempValue2;
                        }
                        prevLoss /= (double)optInTimePeriod;
                        prevGain /= (double)optInTimePeriod;
                        today++;
                    }
                }
                while (today <= endIdx) {
                    tempValue1 = inReal[today];
                    today++;
                    tempValue2 = tempValue1 - prevValue;
                    prevValue = tempValue1;
                    prevLoss *= optInTimePeriod - 1;
                    prevGain *= optInTimePeriod - 1;
                    if (tempValue2 < 0.0) {
                        prevLoss -= tempValue2;
                    }
                    else {
                        prevGain += tempValue2;
                    }
                    prevLoss /= (double)optInTimePeriod;
                    prevGain /= (double)optInTimePeriod;
                    tempValue1 = prevGain + prevLoss;
                    if ((-1E-08 >= tempValue1) || (tempValue1 >= 1E-08)) {
                        outReal[outIdx] = 100.0 * (prevGain / tempValue1);
                        outIdx++;
                    }
                    else {
                        outReal[outIdx] = 0.0;
                        outIdx++;
                    }
                }
                outBegIdx = startIdx;
                outNBElement = outIdx;
            }
            return RetCode.Success;
        }
        public static RetCode Sar(int startIdx,int endIdx,double[] inHigh,double[] inLow,double optInAcceleration,double optInMaximum,ref int outBegIdx,ref int outNBElement,double[] outReal,SmartQuant.ISeries inBar)
        {
            double sar;
            double ep;
            int isLong;
            int tempInt = 0;
            double[] ep_temp = new double[1];
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if ((inHigh == null) || (inLow == null)) {
                return RetCode.BadParam;
            }
            if (optInAcceleration == -4E+37) {
                optInAcceleration = 0.02;
            }
            else if ((optInAcceleration < 0.0) || (optInAcceleration > 3E+37)) {
                return RetCode.BadParam;
            }
            if (optInMaximum == -4E+37) {
                optInMaximum = 0.2;
            }
            else if ((optInMaximum < 0.0) || (optInMaximum > 3E+37)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            if (startIdx < 1) {
                startIdx = 1;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double af = optInAcceleration;
            if (af > optInMaximum) {
                optInAcceleration = optInMaximum;
                af = optInAcceleration;
            }
            RetCode retCode = MinusDM(startIdx, startIdx, inHigh, inLow, 1, ref tempInt, ref tempInt, ep_temp);
            if (ep_temp[0] > 0.0) {
                isLong = 0;
            }
            else {
                isLong = 1;
            }
            if (retCode != RetCode.Success) {
                outBegIdx = 0;
                outNBElement = 0;
                return retCode;
            }
            outBegIdx = startIdx;
            int outIdx = 0;
            int todayIdx = startIdx;
            double newHigh = inHigh[todayIdx - 1];
            double newLow = inLow[todayIdx - 1];
            if (isLong == 1) {
                ep = inHigh[todayIdx];
                sar = newLow;
            }
            else {
                ep = inLow[todayIdx];
                sar = newHigh;
            }
            newLow = inLow[todayIdx];
            newHigh = inHigh[todayIdx];
            while (todayIdx <= endIdx) {
                double prevLow = newLow;
                double prevHigh = newHigh;
                newLow = inLow[todayIdx];
                newHigh = inHigh[todayIdx];
                todayIdx++;
                if (isLong == 1) {
                    if (newLow <= sar) {
                        isLong = 0;
                        sar = ep;
                        if (sar < prevHigh) {
                            sar = prevHigh;
                        }
                        if (sar < newHigh) {
                            sar = newHigh;
                        }
                        outReal[outIdx] = sar;
                        outIdx++;
                        af = optInAcceleration;
                        ep = newLow;
                        sar += af * (ep - sar);
                        if (sar < prevHigh) {
                            sar = prevHigh;
                        }
                        if (sar < newHigh) {
                            sar = newHigh;
                        }
                    }
                    else {
                        outReal[outIdx] = sar;
                        outIdx++;
                        if (newHigh > ep) {
                            ep = newHigh;
                            af += optInAcceleration;
                            if (af > optInMaximum) {
                                af = optInMaximum;
                            }
                        }
                        sar += af * (ep - sar);
                        if (sar > prevLow) {
                            sar = prevLow;
                        }
                        if (sar > newLow) {
                            sar = newLow;
                        }
                    }
                }
                else if (newHigh >= sar) {
                    isLong = 1;
                    sar = ep;
                    if (sar > prevLow) {
                        sar = prevLow;
                    }
                    if (sar > newLow) {
                        sar = newLow;
                    }
                    outReal[outIdx] = sar;
                    outIdx++;
                    af = optInAcceleration;
                    ep = newHigh;
                    sar += af * (ep - sar);
                    if (sar > prevLow) {
                        sar = prevLow;
                    }
                    if (sar > newLow) {
                        sar = newLow;
                    }
                }
                else {
                    outReal[outIdx] = sar;
                    outIdx++;
                    if (newLow < ep) {
                        ep = newLow;
                        af += optInAcceleration;
                        if (af > optInMaximum) {
                            af = optInMaximum;
                        }
                    }
                    sar += af * (ep - sar);
                    if (sar < prevHigh) {
                        sar = prevHigh;
                    }
                    if (sar < newHigh) {
                        sar = newHigh;
                    }
                }
            }
            outNBElement = outIdx;
            return RetCode.Success;
        }
        public static RetCode SarExt(int startIdx,int endIdx,double[] inHigh,double[] inLow,double optInStartValue,double optInOffsetOnReverse,double optInAccelerationInitLong,double optInAccelerationLong,double optInAccelerationMaxLong,double optInAccelerationInitShort,double optInAccelerationShort,double optInAccelerationMaxShort,ref int outBegIdx,ref int outNBElement,double[] outReal,SmartQuant.ISeries inBar)
        {
            double sar;
            double ep;
            int isLong;
            double[] ep_temp = new double[1];
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if ((inHigh == null) || (inLow == null)) {
                return RetCode.BadParam;
            }
            if (optInStartValue == -4E+37) {
                optInStartValue = 0.0;
            }
            else if ((optInStartValue < -3E+37) || (optInStartValue > 3E+37)) {
                return RetCode.BadParam;
            }
            if (optInOffsetOnReverse == -4E+37) {
                optInOffsetOnReverse = 0.0;
            }
            else if ((optInOffsetOnReverse < 0.0) || (optInOffsetOnReverse > 3E+37)) {
                return RetCode.BadParam;
            }
            if (optInAccelerationInitLong == -4E+37) {
                optInAccelerationInitLong = 0.02;
            }
            else if ((optInAccelerationInitLong < 0.0) || (optInAccelerationInitLong > 3E+37)) {
                return RetCode.BadParam;
            }
            if (optInAccelerationLong == -4E+37) {
                optInAccelerationLong = 0.02;
            }
            else if ((optInAccelerationLong < 0.0) || (optInAccelerationLong > 3E+37)) {
                return RetCode.BadParam;
            }
            if (optInAccelerationMaxLong == -4E+37) {
                optInAccelerationMaxLong = 0.2;
            }
            else if ((optInAccelerationMaxLong < 0.0) || (optInAccelerationMaxLong > 3E+37)) {
                return RetCode.BadParam;
            }
            if (optInAccelerationInitShort == -4E+37) {
                optInAccelerationInitShort = 0.02;
            }
            else if ((optInAccelerationInitShort < 0.0) || (optInAccelerationInitShort > 3E+37)) {
                return RetCode.BadParam;
            }
            if (optInAccelerationShort == -4E+37) {
                optInAccelerationShort = 0.02;
            }
            else if ((optInAccelerationShort < 0.0) || (optInAccelerationShort > 3E+37)) {
                return RetCode.BadParam;
            }
            if (optInAccelerationMaxShort == -4E+37) {
                optInAccelerationMaxShort = 0.2;
            }
            else if ((optInAccelerationMaxShort < 0.0) || (optInAccelerationMaxShort > 3E+37)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            if (startIdx < 1) {
                startIdx = 1;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double afLong = optInAccelerationInitLong;
            double afShort = optInAccelerationInitShort;
            if (afLong > optInAccelerationMaxLong) {
                optInAccelerationInitLong = optInAccelerationMaxLong;
                afLong = optInAccelerationInitLong;
            }
            if (optInAccelerationLong > optInAccelerationMaxLong) {
                optInAccelerationLong = optInAccelerationMaxLong;
            }
            if (afShort > optInAccelerationMaxShort) {
                optInAccelerationInitShort = optInAccelerationMaxShort;
                afShort = optInAccelerationInitShort;
            }
            if (optInAccelerationShort > optInAccelerationMaxShort) {
                optInAccelerationShort = optInAccelerationMaxShort;
            }
            if (optInStartValue == 0.0) {
                int tempInt = 0;
                RetCode retCode = MinusDM(startIdx, startIdx, inHigh, inLow, 1, ref tempInt, ref tempInt, ep_temp);
                if (ep_temp[0] > 0.0) {
                    isLong = 0;
                }
                else {
                    isLong = 1;
                }
                if (retCode != RetCode.Success) {
                    outBegIdx = 0;
                    outNBElement = 0;
                    return retCode;
                }
            }
            else if (optInStartValue > 0.0) {
                isLong = 1;
            }
            else {
                isLong = 0;
            }
            outBegIdx = startIdx;
            int outIdx = 0;
            int todayIdx = startIdx;
            double newHigh = inHigh[todayIdx - 1];
            double newLow = inLow[todayIdx - 1];
            if (optInStartValue == 0.0) {
                if (isLong == 1) {
                    ep = inHigh[todayIdx];
                    sar = newLow;
                }
                else {
                    ep = inLow[todayIdx];
                    sar = newHigh;
                }
            }
            else if (optInStartValue > 0.0) {
                ep = inHigh[todayIdx];
                sar = optInStartValue;
            }
            else {
                ep = inLow[todayIdx];
                sar = Math.Abs(optInStartValue);
            }
            newLow = inLow[todayIdx];
            newHigh = inHigh[todayIdx];
            while (todayIdx <= endIdx) {
                double prevLow = newLow;
                double prevHigh = newHigh;
                newLow = inLow[todayIdx];
                newHigh = inHigh[todayIdx];
                todayIdx++;
                if (isLong == 1) {
                    if (newLow <= sar) {
                        isLong = 0;
                        sar = ep;
                        if (sar < prevHigh) {
                            sar = prevHigh;
                        }
                        if (sar < newHigh) {
                            sar = newHigh;
                        }
                        if (optInOffsetOnReverse != 0.0) {
                            sar += sar * optInOffsetOnReverse;
                        }
                        outReal[outIdx] = -sar;
                        outIdx++;
                        afShort = optInAccelerationInitShort;
                        ep = newLow;
                        sar += afShort * (ep - sar);
                        if (sar < prevHigh) {
                            sar = prevHigh;
                        }
                        if (sar < newHigh) {
                            sar = newHigh;
                        }
                    }
                    else {
                        outReal[outIdx] = sar;
                        outIdx++;
                        if (newHigh > ep) {
                            ep = newHigh;
                            afLong += optInAccelerationLong;
                            if (afLong > optInAccelerationMaxLong) {
                                afLong = optInAccelerationMaxLong;
                            }
                        }
                        sar += afLong * (ep - sar);
                        if (sar > prevLow) {
                            sar = prevLow;
                        }
                        if (sar > newLow) {
                            sar = newLow;
                        }
                    }
                }
                else if (newHigh >= sar) {
                    isLong = 1;
                    sar = ep;
                    if (sar > prevLow) {
                        sar = prevLow;
                    }
                    if (sar > newLow) {
                        sar = newLow;
                    }
                    if (optInOffsetOnReverse != 0.0) {
                        sar -= sar * optInOffsetOnReverse;
                    }
                    outReal[outIdx] = sar;
                    outIdx++;
                    afLong = optInAccelerationInitLong;
                    ep = newHigh;
                    sar += afLong * (ep - sar);
                    if (sar > prevLow) {
                        sar = prevLow;
                    }
                    if (sar > newLow) {
                        sar = newLow;
                    }
                }
                else {
                    outReal[outIdx] = -sar;
                    outIdx++;
                    if (newLow < ep) {
                        ep = newLow;
                        afShort += optInAccelerationShort;
                        if (afShort > optInAccelerationMaxShort) {
                            afShort = optInAccelerationMaxShort;
                        }
                    }
                    sar += afShort * (ep - sar);
                    if (sar < prevHigh) {
                        sar = prevHigh;
                    }
                    if (sar < newHigh) {
                        sar = newHigh;
                    }
                }
            }
            outNBElement = outIdx;
            return RetCode.Success;
        }
        public static RetCode Sin(int startIdx,int endIdx,SmartQuant.ISeries inReal,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int i = startIdx;
            int outIdx = 0;
            while (i <= endIdx) {
                outReal[outIdx] = Math.Sin(inReal[i]);
                i++;
                outIdx++;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode Sinh(int startIdx,int endIdx,SmartQuant.ISeries inReal,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int i = startIdx;
            int outIdx = 0;
            while (i <= endIdx) {
                outReal[outIdx] = Math.Sinh(inReal[i]);
                i++;
                outIdx++;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode Sma(int startIdx,int endIdx,SmartQuant.ISeries inReal,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 30;
            }
            else if ((optInTimePeriod < 2) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            return TA_INT_SMA(startIdx, endIdx, inReal, optInTimePeriod, ref outBegIdx, ref outNBElement, outReal);
        }
        public static RetCode Sqrt(int startIdx,int endIdx,SmartQuant.ISeries inReal,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int i = startIdx;
            int outIdx = 0;
            while (i <= endIdx) {
                outReal[outIdx] = Math.Sqrt(inReal[i]);
                i++;
                outIdx++;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode StdDev(int startIdx,int endIdx,SmartQuant.ISeries inReal,int optInTimePeriod,double optInNbDev,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            int i;
            double tempReal;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 5;
            }
            else if ((optInTimePeriod < 2) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (optInNbDev == -4E+37) {
                optInNbDev = 1.0;
            }
            else if ((optInNbDev < -3E+37) || (optInNbDev > 3E+37)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            RetCode retCode = TA_INT_VAR(startIdx, endIdx, inReal, optInTimePeriod, ref outBegIdx, ref outNBElement, outReal);
            if (retCode != RetCode.Success) {
                return retCode;
            }
            if (optInNbDev == 1.0) {
                i = 0;
                while (i < outNBElement) {
                    tempReal = outReal[i];
                    if (tempReal >= 1E-08) {
                        outReal[i] = Math.Sqrt(tempReal);
                    }
                    else {
                        outReal[i] = 0.0;
                    }
                    i++;
                }
            }
            else {
                for (i = 0; i < outNBElement; i++) {
                    tempReal = outReal[i];
                    if (tempReal >= 1E-08) {
                        outReal[i] = Math.Sqrt(tempReal) * optInNbDev;
                    }
                    else {
                        outReal[i] = 0.0;
                    }
                }
            }
            return RetCode.Success;
        }
        public static RetCode Stoch(int startIdx,int endIdx,double[] inHigh,double[] inLow,double[] inClose,int optInFastK_Period,int optInSlowK_Period,MAType optInSlowK_MAType,int optInSlowD_Period,MAType optInSlowD_MAType,ref int outBegIdx,ref int outNBElement,double[] outSlowK,double[] outSlowD,SmartQuant.ISeries inBar)
        {
            double[] tempBuffer;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inHigh == null) || (inLow == null)) || (inClose == null)) {
                return RetCode.BadParam;
            }
            if (optInFastK_Period == -2147483648) {
                optInFastK_Period = 5;
            }
            else if ((optInFastK_Period < 1) || (optInFastK_Period > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (optInSlowK_Period == -2147483648) {
                optInSlowK_Period = 3;
            }
            else if ((optInSlowK_Period < 1) || (optInSlowK_Period > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (optInSlowD_Period == -2147483648) {
                optInSlowD_Period = 3;
            }
            else if ((optInSlowD_Period < 1) || (optInSlowD_Period > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outSlowK == null) {
                return RetCode.BadParam;
            }
            if (outSlowD == null) {
                return RetCode.BadParam;
            }
            int lookbackK = optInFastK_Period - 1;
            int lookbackKSlow = MovingAverageLookback(optInSlowK_Period, optInSlowK_MAType);
            int lookbackDSlow = MovingAverageLookback(optInSlowD_Period, optInSlowD_MAType);
            int lookbackTotal = (lookbackK + lookbackDSlow) + lookbackKSlow;
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            int outIdx = 0;
            int trailingIdx = startIdx - lookbackTotal;
            int today = trailingIdx + lookbackK;
            int highestIdx = -1;
            int lowestIdx = highestIdx;
            double lowest = 0.0;
            double highest = lowest;
            double diff = highest;
            if (((outSlowK == inHigh) || (outSlowK == inLow)) || (outSlowK == inClose)) {
                tempBuffer = outSlowK;
            }
            else if (((outSlowD == inHigh) || (outSlowD == inLow)) || (outSlowD == inClose)) {
                tempBuffer = outSlowD;
            }
            else {
                tempBuffer = new double[(endIdx - today) + 1];
            }
            Label_0156:
            if (today > endIdx) {
                RetCode retCode = MovingAverage(0, outIdx - 1, tempBuffer, optInSlowK_Period, optInSlowK_MAType, ref outBegIdx, ref outNBElement, tempBuffer);
                if ((retCode != RetCode.Success) || (outNBElement == 0)) {
                    outBegIdx = 0;
                    outNBElement = 0;
                    return retCode;
                }
                retCode = MovingAverage(0, outNBElement - 1, tempBuffer, optInSlowD_Period, optInSlowD_MAType, ref outBegIdx, ref outNBElement, outSlowD);
                Array.Copy(tempBuffer, lookbackDSlow, outSlowK, 0, outNBElement);
                if (retCode != RetCode.Success) {
                    outBegIdx = 0;
                    outNBElement = 0;
                    return retCode;
                }
                outBegIdx = startIdx;
                return RetCode.Success;
            }
            double tmp = inLow[today];
            if (lowestIdx >= trailingIdx) {
                if (tmp <= lowest) {
                    lowestIdx = today;
                    lowest = tmp;
                    diff = (highest - lowest) / 100.0;
                }
                goto Label_01B5;
            }
            lowestIdx = trailingIdx;
            lowest = inLow[lowestIdx];
            int i = lowestIdx;
            Label_0173:
            i++;
            if (i <= today) {
                tmp = inLow[i];
                if (tmp < lowest) {
                    lowestIdx = i;
                    lowest = tmp;
                }
                goto Label_0173;
            }
            diff = (highest - lowest) / 100.0;
            Label_01B5:
            tmp = inHigh[today];
            if (highestIdx >= trailingIdx) {
                if (tmp >= highest) {
                    highestIdx = today;
                    highest = tmp;
                    diff = (highest - lowest) / 100.0;
                }
                goto Label_0212;
            }
            highestIdx = trailingIdx;
            highest = inHigh[highestIdx];
            i = highestIdx;
            Label_01CC:
            i++;
            if (i <= today) {
                tmp = inHigh[i];
                if (tmp > highest) {
                    highestIdx = i;
                    highest = tmp;
                }
                goto Label_01CC;
            }
            diff = (highest - lowest) / 100.0;
            Label_0212:
            if (diff != 0.0) {
                tempBuffer[outIdx] = (inClose[today] - lowest) / diff;
                outIdx++;
            }
            else {
                tempBuffer[outIdx] = 0.0;
                outIdx++;
            }
            trailingIdx++;
            today++;
            goto Label_0156;
        }
        public static RetCode StochF(int startIdx,int endIdx,double[] inHigh,double[] inLow,double[] inClose,int optInFastK_Period,int optInFastD_Period,MAType optInFastD_MAType,ref int outBegIdx,ref int outNBElement,double[] outFastK,double[] outFastD,SmartQuant.ISeries inBar)
        {
            double[] tempBuffer;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inHigh == null) || (inLow == null)) || (inClose == null)) {
                return RetCode.BadParam;
            }
            if (optInFastK_Period == -2147483648) {
                optInFastK_Period = 5;
            }
            else if ((optInFastK_Period < 1) || (optInFastK_Period > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (optInFastD_Period == -2147483648) {
                optInFastD_Period = 3;
            }
            else if ((optInFastD_Period < 1) || (optInFastD_Period > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outFastK == null) {
                return RetCode.BadParam;
            }
            if (outFastD == null) {
                return RetCode.BadParam;
            }
            int lookbackK = optInFastK_Period - 1;
            int lookbackFastD = MovingAverageLookback(optInFastD_Period, optInFastD_MAType);
            int lookbackTotal = lookbackK + lookbackFastD;
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            int outIdx = 0;
            int trailingIdx = startIdx - lookbackTotal;
            int today = trailingIdx + lookbackK;
            int highestIdx = -1;
            int lowestIdx = highestIdx;
            double lowest = 0.0;
            double highest = lowest;
            double diff = highest;
            if (((outFastK == inHigh) || (outFastK == inLow)) || (outFastK == inClose)) {
                tempBuffer = outFastK;
            }
            else if (((outFastD == inHigh) || (outFastD == inLow)) || (outFastD == inClose)) {
                tempBuffer = outFastD;
            }
            else {
                tempBuffer = new double[(endIdx - today) + 1];
            }
            Label_0124:
            if (today > endIdx) {
                RetCode retCode = MovingAverage(0, outIdx - 1, tempBuffer, optInFastD_Period, optInFastD_MAType, ref outBegIdx, ref outNBElement, outFastD);
                if ((retCode != RetCode.Success) || (outNBElement == 0)) {
                    outBegIdx = 0;
                    outNBElement = 0;
                    return retCode;
                }
                Array.Copy(tempBuffer, lookbackFastD, outFastK, 0, outNBElement);
                if (retCode != RetCode.Success) {
                    outBegIdx = 0;
                    outNBElement = 0;
                    return retCode;
                }
                outBegIdx = startIdx;
                return RetCode.Success;
            }
            double tmp = inLow[today];
            if (lowestIdx >= trailingIdx) {
                if (tmp <= lowest) {
                    lowestIdx = today;
                    lowest = tmp;
                    diff = (highest - lowest) / 100.0;
                }
                goto Label_0183;
            }
            lowestIdx = trailingIdx;
            lowest = inLow[lowestIdx];
            int i = lowestIdx;
            Label_0141:
            i++;
            if (i <= today) {
                tmp = inLow[i];
                if (tmp < lowest) {
                    lowestIdx = i;
                    lowest = tmp;
                }
                goto Label_0141;
            }
            diff = (highest - lowest) / 100.0;
            Label_0183:
            tmp = inHigh[today];
            if (highestIdx >= trailingIdx) {
                if (tmp >= highest) {
                    highestIdx = today;
                    highest = tmp;
                    diff = (highest - lowest) / 100.0;
                }
                goto Label_01E0;
            }
            highestIdx = trailingIdx;
            highest = inHigh[highestIdx];
            i = highestIdx;
            Label_019A:
            i++;
            if (i <= today) {
                tmp = inHigh[i];
                if (tmp > highest) {
                    highestIdx = i;
                    highest = tmp;
                }
                goto Label_019A;
            }
            diff = (highest - lowest) / 100.0;
            Label_01E0:
            if (diff != 0.0) {
                tempBuffer[outIdx] = (inClose[today] - lowest) / diff;
                outIdx++;
            }
            else {
                tempBuffer[outIdx] = 0.0;
                outIdx++;
            }
            trailingIdx++;
            today++;
            goto Label_0124;
        }
        public static RetCode StochRsi(int startIdx,int endIdx,SmartQuant.ISeries inReal,int optInTimePeriod,int optInFastK_Period,int optInFastD_Period,MAType optInFastD_MAType,ref int outBegIdx,ref int outNBElement,double[] outFastK,double[] outFastD)
        {
            int outNbElement1 = 0;
            int outBegIdx2 = 0;
            int outBegIdx1 = 0;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 14;
            }
            else if ((optInTimePeriod < 2) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (optInFastK_Period == -2147483648) {
                optInFastK_Period = 5;
            }
            else if ((optInFastK_Period < 1) || (optInFastK_Period > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (optInFastD_Period == -2147483648) {
                optInFastD_Period = 3;
            }
            else if ((optInFastD_Period < 1) || (optInFastD_Period > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outFastK == null) {
                return RetCode.BadParam;
            }
            if (outFastD == null) {
                return RetCode.BadParam;
            }
            outBegIdx = 0;
            outNBElement = 0;
            int lookbackSTOCHF = StochFLookback(optInFastK_Period, optInFastD_Period, optInFastD_MAType);
            int lookbackTotal = RsiLookback(optInTimePeriod) + lookbackSTOCHF;
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            outBegIdx = startIdx;
            int tempArraySize = ((endIdx - startIdx) + 1) + lookbackSTOCHF;
            double[] tempRSIBuffer = new double[tempArraySize];
            RetCode retCode = Rsi(startIdx - lookbackSTOCHF, endIdx, inReal, optInTimePeriod, ref outBegIdx1, ref outNbElement1, tempRSIBuffer);
            if ((retCode != RetCode.Success) || (outNbElement1 == 0)) {
                outBegIdx = 0;
                outNBElement = 0;
                return retCode;
            }
            retCode = StochF(0, tempArraySize - 1, tempRSIBuffer, tempRSIBuffer, tempRSIBuffer, optInFastK_Period, optInFastD_Period, optInFastD_MAType, ref outBegIdx2, ref outNBElement, outFastK, outFastD);
            if ((retCode != RetCode.Success) || (outNBElement == 0)) {
                outBegIdx = 0;
                outNBElement = 0;
                return retCode;
            }
            return RetCode.Success;
        }
        public static RetCode Sub(int startIdx,int endIdx,SmartQuant.ISeries inReal0,SmartQuant.ISeries inReal1,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal0 == null) {
                return RetCode.BadParam;
            }
            if (inReal1 == null) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int i = startIdx;
            int outIdx = 0;
            while (i <= endIdx) {
                outReal[outIdx] = inReal0[i] - inReal1[i];
                i++;
                outIdx++;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode Sum(int startIdx,int endIdx,SmartQuant.ISeries inReal,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 30;
            }
            else if ((optInTimePeriod < 2) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = optInTimePeriod - 1;
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double periodTotal = 0.0;
            int trailingIdx = startIdx - lookbackTotal;
            int i = trailingIdx;
            if (optInTimePeriod > 1) {
                while (i < startIdx) {
                    periodTotal += inReal[i];
                    i++;
                }
            }
            int outIdx = 0;
            do {
                periodTotal += inReal[i];
                i++;
                double tempReal = periodTotal;
                periodTotal -= inReal[trailingIdx];
                trailingIdx++;
                outReal[outIdx] = tempReal;
                outIdx++;
            }
            while (i <= endIdx);
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode T3(int startIdx,int endIdx,SmartQuant.ISeries inReal,int optInTimePeriod,double optInVFactor,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            int i;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 5;
            }
            else if ((optInTimePeriod < 2) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (optInVFactor == -4E+37) {
                optInVFactor = 0.7;
            }
            else if ((optInVFactor < 0.0) || (optInVFactor > 1.0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = ((optInTimePeriod - 1) * 6) + ((int)Globals.unstablePeriod[0x16]);
            if (startIdx <= lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outNBElement = 0;
                outBegIdx = 0;
                return RetCode.Success;
            }
            outBegIdx = startIdx;
            int today = startIdx - lookbackTotal;
            double k = 2.0 / (optInTimePeriod + 1.0);
            double one_minus_k = 1.0 - k;
            double tempReal = inReal[today];
            today++;
            for (i = optInTimePeriod - 1; i > 0; i--) {
                tempReal += inReal[today];
                today++;
            }
            double e1 = tempReal / ((double)optInTimePeriod);
            tempReal = e1;
            for (i = optInTimePeriod - 1; i > 0; i--) {
                e1 = (k * inReal[today]) + (one_minus_k * e1);
                today++;
                tempReal += e1;
            }
            double e2 = tempReal / ((double)optInTimePeriod);
            tempReal = e2;
            for (i = optInTimePeriod - 1; i > 0; i--) {
                e1 = (k * inReal[today]) + (one_minus_k * e1);
                today++;
                e2 = (k * e1) + (one_minus_k * e2);
                tempReal += e2;
            }
            double e3 = tempReal / ((double)optInTimePeriod);
            tempReal = e3;
            for (i = optInTimePeriod - 1; i > 0; i--) {
                e1 = (k * inReal[today]) + (one_minus_k * e1);
                today++;
                e2 = (k * e1) + (one_minus_k * e2);
                e3 = (k * e2) + (one_minus_k * e3);
                tempReal += e3;
            }
            double e4 = tempReal / ((double)optInTimePeriod);
            tempReal = e4;
            for (i = optInTimePeriod - 1; i > 0; i--) {
                e1 = (k * inReal[today]) + (one_minus_k * e1);
                today++;
                e2 = (k * e1) + (one_minus_k * e2);
                e3 = (k * e2) + (one_minus_k * e3);
                e4 = (k * e3) + (one_minus_k * e4);
                tempReal += e4;
            }
            double e5 = tempReal / ((double)optInTimePeriod);
            tempReal = e5;
            for (i = optInTimePeriod - 1; i > 0; i--) {
                e1 = (k * inReal[today]) + (one_minus_k * e1);
                today++;
                e2 = (k * e1) + (one_minus_k * e2);
                e3 = (k * e2) + (one_minus_k * e3);
                e4 = (k * e3) + (one_minus_k * e4);
                e5 = (k * e4) + (one_minus_k * e5);
                tempReal += e5;
            }
            double e6 = tempReal / ((double)optInTimePeriod);
            while (true) {
                if (today > startIdx) {
                    break;
                }
                e1 = (k * inReal[today]) + (one_minus_k * e1);
                today++;
                e2 = (k * e1) + (one_minus_k * e2);
                e3 = (k * e2) + (one_minus_k * e3);
                e4 = (k * e3) + (one_minus_k * e4);
                e5 = (k * e4) + (one_minus_k * e5);
                e6 = (k * e5) + (one_minus_k * e6);
            }
            tempReal = optInVFactor * optInVFactor;
            double c1 = -(tempReal * optInVFactor);
            double c2 = 3.0 * (tempReal - c1);
            double c3 = (-6.0 * tempReal) - (3.0 * (optInVFactor - c1));
            double c4 = ((1.0 + (3.0 * optInVFactor)) - c1) + (3.0 * tempReal);
            int outIdx = 0;
            outReal[outIdx] = (((c1 * e6) + (c2 * e5)) + (c3 * e4)) + (c4 * e3);
            outIdx++;
            while (true) {
                if (today > endIdx) {
                    break;
                }
                e1 = (k * inReal[today]) + (one_minus_k * e1);
                today++;
                e2 = (k * e1) + (one_minus_k * e2);
                e3 = (k * e2) + (one_minus_k * e3);
                e4 = (k * e3) + (one_minus_k * e4);
                e5 = (k * e4) + (one_minus_k * e5);
                e6 = (k * e5) + (one_minus_k * e6);
                outReal[outIdx] = (((c1 * e6) + (c2 * e5)) + (c3 * e4)) + (c4 * e3);
                outIdx++;
            }
            outNBElement = outIdx;
            return RetCode.Success;
        }
        public static RetCode Tan(int startIdx,int endIdx,SmartQuant.ISeries inReal,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int i = startIdx;
            int outIdx = 0;
            while (i <= endIdx) {
                outReal[outIdx] = Math.Tan(inReal[i]);
                i++;
                outIdx++;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode Tanh(int startIdx,int endIdx,SmartQuant.ISeries inReal,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int i = startIdx;
            int outIdx = 0;
            while (i <= endIdx) {
                outReal[outIdx] = Math.Tanh(inReal[i]);
                i++;
                outIdx++;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode Tema(int startIdx,int endIdx,SmartQuant.ISeries inReal,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 30;
            }
            else if ((optInTimePeriod < 2) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            outNBElement = 0;
            outBegIdx = 0;
            int lookbackEMA = EmaLookback(optInTimePeriod);
            int lookbackTotal = lookbackEMA * 3;
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx <= endIdx) {
                int firstEMANbElement = 0;
                int thirdEMANbElement = 0;
                int thirdEMABegIdx = 0;
                int secondEMANbElement = 0;
                int secondEMABegIdx = 0;
                int firstEMABegIdx = 0;
                int tempInt = (lookbackTotal + (endIdx - startIdx)) + 1;
                double[] firstEMA = new double[tempInt];
                if (firstEMA == null) {
                    return RetCode.AllocErr;
                }
                double k = 2.0 / ((double)(optInTimePeriod + 1));
                RetCode retCode = TA_INT_EMA(startIdx - (lookbackEMA * 2), endIdx, inReal, optInTimePeriod, k, ref firstEMABegIdx, ref firstEMANbElement, firstEMA);
                if ((retCode != RetCode.Success) || (firstEMANbElement == 0)) {
                    return retCode;
                }
                double[] secondEMA = new double[firstEMANbElement];
                if (secondEMA == null) {
                    return RetCode.AllocErr;
                }
                retCode = TA_INT_EMA(0, firstEMANbElement - 1, firstEMA, optInTimePeriod, k, ref secondEMABegIdx, ref secondEMANbElement, secondEMA);
                if ((retCode != RetCode.Success) || (secondEMANbElement == 0)) {
                    return retCode;
                }
                retCode = TA_INT_EMA(0, secondEMANbElement - 1, secondEMA, optInTimePeriod, k, ref thirdEMABegIdx, ref thirdEMANbElement, outReal);
                if ((retCode != RetCode.Success) || (thirdEMANbElement == 0)) {
                    return retCode;
                }
                int firstEMAIdx = thirdEMABegIdx + secondEMABegIdx;
                int secondEMAIdx = thirdEMABegIdx;
                outBegIdx = firstEMAIdx + firstEMABegIdx;
                int outIdx = 0;
                while (true) {
                    if (outIdx >= thirdEMANbElement) {
                        break;
                    }
                    outReal[outIdx] += (3.0 * firstEMA[firstEMAIdx]) - (3.0 * secondEMA[secondEMAIdx]);
                    secondEMAIdx++;
                    firstEMAIdx++;
                    outIdx++;
                }
                outNBElement = outIdx;
            }
            return RetCode.Success;
        }
        public static RetCode Trima(int startIdx,int endIdx,SmartQuant.ISeries inReal,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            int i;
            double tempReal;
            double numerator;
            double numeratorAdd;
            double numeratorSub;
            int middleIdx;
            int trailingIdx;
            int todayIdx;
            double factor;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 30;
            }
            else if ((optInTimePeriod < 2) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = optInTimePeriod - 1;
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            int outIdx = 0;
            if ((optInTimePeriod % 2) != 1) {
                i = optInTimePeriod >> 1;
                factor = i * (i + 1);
                factor = 1.0 / factor;
                trailingIdx = startIdx - lookbackTotal;
                middleIdx = (trailingIdx + i) - 1;
                todayIdx = middleIdx + i;
                numerator = 0.0;
                numeratorSub = 0.0;
                i = middleIdx;
                while (i >= trailingIdx) {
                    tempReal = inReal[i];
                    numeratorSub += tempReal;
                    numerator += numeratorSub;
                    i--;
                }
                numeratorAdd = 0.0;
                middleIdx++;
                for (i = middleIdx; i <= todayIdx; i++) {
                    tempReal = inReal[i];
                    numeratorAdd += tempReal;
                    numerator += numeratorAdd;
                }
                outIdx = 0;
                tempReal = inReal[trailingIdx];
                trailingIdx++;
                outReal[outIdx] = numerator * factor;
                outIdx++;
                todayIdx++;
                while (todayIdx <= endIdx) {
                    numerator -= numeratorSub;
                    numeratorSub -= tempReal;
                    tempReal = inReal[middleIdx];
                    middleIdx++;
                    numeratorSub += tempReal;
                    numeratorAdd -= tempReal;
                    numerator += numeratorAdd;
                    tempReal = inReal[todayIdx];
                    todayIdx++;
                    numeratorAdd += tempReal;
                    numerator += tempReal;
                    tempReal = inReal[trailingIdx];
                    trailingIdx++;
                    outReal[outIdx] = numerator * factor;
                    outIdx++;
                }
            }
            else {
                i = optInTimePeriod >> 1;
                factor = (i + 1) * (i + 1);
                factor = 1.0 / factor;
                trailingIdx = startIdx - lookbackTotal;
                middleIdx = trailingIdx + i;
                todayIdx = middleIdx + i;
                numerator = 0.0;
                numeratorSub = 0.0;
                for (i = middleIdx; i >= trailingIdx; i--) {
                    tempReal = inReal[i];
                    numeratorSub += tempReal;
                    numerator += numeratorSub;
                }
                numeratorAdd = 0.0;
                middleIdx++;
                for (i = middleIdx; i <= todayIdx; i++) {
                    tempReal = inReal[i];
                    numeratorAdd += tempReal;
                    numerator += numeratorAdd;
                }
                outIdx = 0;
                tempReal = inReal[trailingIdx];
                trailingIdx++;
                outReal[outIdx] = numerator * factor;
                outIdx++;
                todayIdx++;
                while (todayIdx <= endIdx) {
                    numerator -= numeratorSub;
                    numeratorSub -= tempReal;
                    tempReal = inReal[middleIdx];
                    middleIdx++;
                    numeratorSub += tempReal;
                    numerator += numeratorAdd;
                    numeratorAdd -= tempReal;
                    tempReal = inReal[todayIdx];
                    todayIdx++;
                    numeratorAdd += tempReal;
                    numerator += tempReal;
                    tempReal = inReal[trailingIdx];
                    trailingIdx++;
                    outReal[outIdx] = numerator * factor;
                    outIdx++;
                }
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode Trix(int startIdx,int endIdx,SmartQuant.ISeries inReal,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            int nbElement = 0;
            int begIdx = 0;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 30;
            }
            else if ((optInTimePeriod < 1) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int emaLookback = EmaLookback(optInTimePeriod);
            int rocLookback = RocRLookback(1);
            int totalLookback = (emaLookback * 3) + rocLookback;
            if (startIdx < totalLookback) {
                startIdx = totalLookback;
            }
            if (startIdx > endIdx) {
                outNBElement = 0;
                outBegIdx = 0;
                return RetCode.Success;
            }
            outBegIdx = startIdx;
            int nbElementToOutput = ((endIdx - startIdx) + 1) + totalLookback;
            double[] tempBuffer = new double[nbElementToOutput];
            if (tempBuffer == null) {
                outNBElement = 0;
                outBegIdx = 0;
                return RetCode.AllocErr;
            }
            double k = 2.0 / ((double)(optInTimePeriod + 1));
            RetCode retCode = TA_INT_EMA(startIdx - totalLookback, endIdx, inReal, optInTimePeriod, k, ref begIdx, ref nbElement, tempBuffer);
            if ((retCode != RetCode.Success) || (nbElement == 0)) {
                outNBElement = 0;
                outBegIdx = 0;
                return retCode;
            }
            nbElementToOutput--;
            nbElementToOutput -= emaLookback;
            retCode = TA_INT_EMA(0, nbElementToOutput, tempBuffer, optInTimePeriod, k, ref begIdx, ref nbElement, tempBuffer);
            if ((retCode != RetCode.Success) || (nbElement == 0)) {
                outNBElement = 0;
                outBegIdx = 0;
                return retCode;
            }
            nbElementToOutput -= emaLookback;
            retCode = TA_INT_EMA(0, nbElementToOutput, tempBuffer, optInTimePeriod, k, ref begIdx, ref nbElement, tempBuffer);
            if ((retCode != RetCode.Success) || (nbElement == 0)) {
                outNBElement = 0;
                outBegIdx = 0;
                return retCode;
            }
            nbElementToOutput -= emaLookback;
            retCode = Roc(0, nbElementToOutput, tempBuffer, 1, ref begIdx, ref outNBElement, outReal);
            if ((retCode != RetCode.Success) || (outNBElement == 0)) {
                outNBElement = 0;
                outBegIdx = 0;
                return retCode;
            }
            return RetCode.Success;
        }
        public static RetCode TrueRange(int startIdx,int endIdx,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,double[] outReal,SmartQuant.ISeries inBar)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inHigh == null) || (inLow == null)) || (inClose == null)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            if (startIdx < 1) {
                startIdx = 1;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            int outIdx = 0;
            int today = startIdx;
            while (true) {
                if (today > endIdx) {
                    break;
                }
                double tempLT = inLow[today];
                double tempHT = inHigh[today];
                double tempCY = inClose[today - 1];
                double greatest = tempHT - tempLT;
                double val2 = Math.Abs((double)(tempCY - tempHT));
                if (val2 > greatest) {
                    greatest = val2;
                }
                double val3 = Math.Abs((double)(tempCY - tempLT));
                if (val3 > greatest) {
                    greatest = val3;
                }
                outReal[outIdx] = greatest;
                outIdx++;
                today++;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode Tsf(int startIdx,int endIdx,SmartQuant.ISeries inReal,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 14;
            }
            else if ((optInTimePeriod < 2) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = TsfLookback(optInTimePeriod);
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            int outIdx = 0;
            int today = startIdx;
            double SumX = (optInTimePeriod * (optInTimePeriod - 1)) * 0.5;
            double SumXSqr = ((optInTimePeriod * (optInTimePeriod - 1)) * ((optInTimePeriod * 2) - 1)) / 6;
            double Divisor = (SumX * SumX) - (optInTimePeriod * SumXSqr);
            while (true) {
                if (today > endIdx) {
                    outBegIdx = startIdx;
                    outNBElement = outIdx;
                    return RetCode.Success;
                }
                double SumXY = 0.0;
                double SumY = 0.0;
                int i = optInTimePeriod;
                while (true) {
                    i--;
                    if (i == 0) {
                        break;
                    }
                    double tempValue1 = inReal[today - i];
                    SumY += tempValue1;
                    SumXY += i * tempValue1;
                }
                double m = ((optInTimePeriod * SumXY) - (SumX * SumY)) / Divisor;
                double b = (SumY - (m * SumX)) / ((double)optInTimePeriod);
                outReal[outIdx] = b + (m * optInTimePeriod);
                outIdx++;
                today++;
            }
        }
        public static RetCode TypPrice(int startIdx,int endIdx,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,double[] outReal,SmartQuant.ISeries inBar)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inHigh == null) || (inLow == null)) || (inClose == null)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int outIdx = 0;
            for (int i = startIdx; i <= endIdx; i++) {
                outReal[outIdx] = ((inHigh[i] + inLow[i]) + inClose[i]) / 3.0;
                outIdx++;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode UltOsc(int startIdx,int endIdx,double[] inHigh,double[] inLow,double[] inClose,int optInTimePeriod1,int optInTimePeriod2,int optInTimePeriod3,ref int outBegIdx,ref int outNBElement,double[] outReal,SmartQuant.ISeries inBar)
        {
            int outIdx;
            int[] usedFlag = new int[3];
            int[] periods = new int[3];
            int[] sortedPeriods = new int[3];
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inHigh == null) || (inLow == null)) || (inClose == null)) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod1 == -2147483648) {
                optInTimePeriod1 = 7;
            }
            else if ((optInTimePeriod1 < 1) || (optInTimePeriod1 > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod2 == -2147483648) {
                optInTimePeriod2 = 14;
            }
            else if ((optInTimePeriod2 < 1) || (optInTimePeriod2 > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod3 == -2147483648) {
                optInTimePeriod3 = 0x1c;
            }
            else if ((optInTimePeriod3 < 1) || (optInTimePeriod3 > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            outBegIdx = 0;
            outNBElement = 0;
            periods[0] = optInTimePeriod1;
            periods[1] = optInTimePeriod2;
            periods[2] = optInTimePeriod3;
            usedFlag[0] = 0;
            usedFlag[1] = 0;
            usedFlag[2] = 0;
            int i = 0;
            while (true) {
                if (i >= 3) {
                    double trueRange;
                    double tempDouble;
                    double tempCY;
                    double tempLT;
                    double tempHT;
                    double closeMinusTrueLow;
                    double trueLow;
                    optInTimePeriod1 = sortedPeriods[2];
                    optInTimePeriod2 = sortedPeriods[1];
                    optInTimePeriod3 = sortedPeriods[0];
                    int lookbackTotal = UltOscLookback(optInTimePeriod1, optInTimePeriod2, optInTimePeriod3);
                    if (startIdx < lookbackTotal) {
                        startIdx = lookbackTotal;
                    }
                    if (startIdx > endIdx) {
                        return RetCode.Success;
                    }
                    double a1Total = 0.0;
                    double b1Total = 0.0;
                    i = (startIdx - optInTimePeriod1) + 1;
                    while (i < startIdx) {
                        double num7;
                        tempLT = inLow[i];
                        tempHT = inHigh[i];
                        tempCY = inClose[i - 1];
                        if (tempLT < tempCY) {
                            num7 = tempLT;
                        }
                        else {
                            num7 = tempCY;
                        }
                        trueLow = num7;
                        closeMinusTrueLow = inClose[i] - trueLow;
                        trueRange = tempHT - tempLT;
                        tempDouble = Math.Abs((double)(tempCY - tempHT));
                        if (tempDouble > trueRange) {
                            trueRange = tempDouble;
                        }
                        tempDouble = Math.Abs((double)(tempCY - tempLT));
                        if (tempDouble > trueRange) {
                            trueRange = tempDouble;
                        }
                        a1Total += closeMinusTrueLow;
                        b1Total += trueRange;
                        i++;
                    }
                    double a2Total = 0.0;
                    double b2Total = 0.0;
                    i = (startIdx - optInTimePeriod2) + 1;
                    while (i < startIdx) {
                        double num6;
                        tempLT = inLow[i];
                        tempHT = inHigh[i];
                        tempCY = inClose[i - 1];
                        if (tempLT < tempCY) {
                            num6 = tempLT;
                        }
                        else {
                            num6 = tempCY;
                        }
                        trueLow = num6;
                        closeMinusTrueLow = inClose[i] - trueLow;
                        trueRange = tempHT - tempLT;
                        tempDouble = Math.Abs((double)(tempCY - tempHT));
                        if (tempDouble > trueRange) {
                            trueRange = tempDouble;
                        }
                        tempDouble = Math.Abs((double)(tempCY - tempLT));
                        if (tempDouble > trueRange) {
                            trueRange = tempDouble;
                        }
                        a2Total += closeMinusTrueLow;
                        b2Total += trueRange;
                        i++;
                    }
                    double a3Total = 0.0;
                    double b3Total = 0.0;
                    i = (startIdx - optInTimePeriod3) + 1;
                    while (i < startIdx) {
                        double num5;
                        tempLT = inLow[i];
                        tempHT = inHigh[i];
                        tempCY = inClose[i - 1];
                        if (tempLT < tempCY) {
                            num5 = tempLT;
                        }
                        else {
                            num5 = tempCY;
                        }
                        trueLow = num5;
                        closeMinusTrueLow = inClose[i] - trueLow;
                        trueRange = tempHT - tempLT;
                        tempDouble = Math.Abs((double)(tempCY - tempHT));
                        if (tempDouble > trueRange) {
                            trueRange = tempDouble;
                        }
                        tempDouble = Math.Abs((double)(tempCY - tempLT));
                        if (tempDouble > trueRange) {
                            trueRange = tempDouble;
                        }
                        a3Total += closeMinusTrueLow;
                        b3Total += trueRange;
                        i++;
                    }
                    int today = startIdx;
                    outIdx = 0;
                    int trailingIdx1 = (today - optInTimePeriod1) + 1;
                    int trailingIdx2 = (today - optInTimePeriod2) + 1;
                    for (int trailingIdx3 = (today - optInTimePeriod3) + 1; today <= endIdx; trailingIdx3++) {
                        double num;
                        double num2;
                        double num3;
                        double num4;
                        tempLT = inLow[today];
                        tempHT = inHigh[today];
                        tempCY = inClose[today - 1];
                        if (tempLT < tempCY) {
                            num4 = tempLT;
                        }
                        else {
                            num4 = tempCY;
                        }
                        trueLow = num4;
                        closeMinusTrueLow = inClose[today] - trueLow;
                        trueRange = tempHT - tempLT;
                        tempDouble = Math.Abs((double)(tempCY - tempHT));
                        if (tempDouble > trueRange) {
                            trueRange = tempDouble;
                        }
                        tempDouble = Math.Abs((double)(tempCY - tempLT));
                        if (tempDouble > trueRange) {
                            trueRange = tempDouble;
                        }
                        a1Total += closeMinusTrueLow;
                        a2Total += closeMinusTrueLow;
                        a3Total += closeMinusTrueLow;
                        b1Total += trueRange;
                        b2Total += trueRange;
                        b3Total += trueRange;
                        double output = 0.0;
                        if ((-1E-08 >= b1Total) || (b1Total >= 1E-08)) {
                            output += 4.0 * (a1Total / b1Total);
                        }
                        if ((-1E-08 >= b2Total) || (b2Total >= 1E-08)) {
                            output += 2.0 * (a2Total / b2Total);
                        }
                        if ((-1E-08 >= b3Total) || (b3Total >= 1E-08)) {
                            output += a3Total / b3Total;
                        }
                        tempLT = inLow[trailingIdx1];
                        tempHT = inHigh[trailingIdx1];
                        tempCY = inClose[trailingIdx1 - 1];
                        if (tempLT < tempCY) {
                            num3 = tempLT;
                        }
                        else {
                            num3 = tempCY;
                        }
                        trueLow = num3;
                        closeMinusTrueLow = inClose[trailingIdx1] - trueLow;
                        trueRange = tempHT - tempLT;
                        tempDouble = Math.Abs((double)(tempCY - tempHT));
                        if (tempDouble > trueRange) {
                            trueRange = tempDouble;
                        }
                        tempDouble = Math.Abs((double)(tempCY - tempLT));
                        if (tempDouble > trueRange) {
                            trueRange = tempDouble;
                        }
                        a1Total -= closeMinusTrueLow;
                        b1Total -= trueRange;
                        tempLT = inLow[trailingIdx2];
                        tempHT = inHigh[trailingIdx2];
                        tempCY = inClose[trailingIdx2 - 1];
                        if (tempLT < tempCY) {
                            num2 = tempLT;
                        }
                        else {
                            num2 = tempCY;
                        }
                        trueLow = num2;
                        closeMinusTrueLow = inClose[trailingIdx2] - trueLow;
                        trueRange = tempHT - tempLT;
                        tempDouble = Math.Abs((double)(tempCY - tempHT));
                        if (tempDouble > trueRange) {
                            trueRange = tempDouble;
                        }
                        tempDouble = Math.Abs((double)(tempCY - tempLT));
                        if (tempDouble > trueRange) {
                            trueRange = tempDouble;
                        }
                        a2Total -= closeMinusTrueLow;
                        b2Total -= trueRange;
                        tempLT = inLow[trailingIdx3];
                        tempHT = inHigh[trailingIdx3];
                        tempCY = inClose[trailingIdx3 - 1];
                        if (tempLT < tempCY) {
                            num = tempLT;
                        }
                        else {
                            num = tempCY;
                        }
                        trueLow = num;
                        closeMinusTrueLow = inClose[trailingIdx3] - trueLow;
                        trueRange = tempHT - tempLT;
                        tempDouble = Math.Abs((double)(tempCY - tempHT));
                        if (tempDouble > trueRange) {
                            trueRange = tempDouble;
                        }
                        tempDouble = Math.Abs((double)(tempCY - tempLT));
                        if (tempDouble > trueRange) {
                            trueRange = tempDouble;
                        }
                        a3Total -= closeMinusTrueLow;
                        b3Total -= trueRange;
                        outReal[outIdx] = 100.0 * (output / 7.0);
                        outIdx++;
                        today++;
                        trailingIdx1++;
                        trailingIdx2++;
                    }
                    break;
                }
                int longestPeriod = 0;
                int longestIndex = 0;
                for (int j = 0; j < 3; j++) {
                    if ((usedFlag[j] == 0) && (periods[j] > longestPeriod)) {
                        longestPeriod = periods[j];
                        longestIndex = j;
                    }
                }
                usedFlag[longestIndex] = 1;
                sortedPeriods[i] = longestPeriod;
                i++;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode Variance(int startIdx,int endIdx,SmartQuant.ISeries inReal,int optInTimePeriod,double optInNbDev,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 5;
            }
            else if ((optInTimePeriod < 1) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (optInNbDev == -4E+37) {
                optInNbDev = 1.0;
            }
            else if ((optInNbDev < -3E+37) || (optInNbDev > 3E+37)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            return TA_INT_VAR(startIdx, endIdx, inReal, optInTimePeriod, ref outBegIdx, ref outNBElement, outReal);
        }
        public static RetCode WclPrice(int startIdx,int endIdx,double[] inHigh,double[] inLow,double[] inClose,ref int outBegIdx,ref int outNBElement,double[] outReal,SmartQuant.ISeries inBar)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inHigh == null) || (inLow == null)) || (inClose == null)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int outIdx = 0;
            for (int i = startIdx; i <= endIdx; i++) {
                outReal[outIdx] = ((inHigh[i] + inLow[i]) + (inClose[i] * 2.0)) / 4.0;
                outIdx++;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
        public static RetCode WillR(int startIdx,int endIdx,double[] inHigh,double[] inLow,double[] inClose,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outReal,SmartQuant.ISeries inBar)
        {
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (((inHigh == null) || (inLow == null)) || (inClose == null)) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 14;
            }
            else if ((optInTimePeriod < 2) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int nbInitialElementNeeded = optInTimePeriod - 1;
            if (startIdx < nbInitialElementNeeded) {
                startIdx = nbInitialElementNeeded;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            double diff = 0.0;
            int outIdx = 0;
            int today = startIdx;
            int trailingIdx = startIdx - nbInitialElementNeeded;
            int highestIdx = -1;
            int lowestIdx = highestIdx;
            double lowest = 0.0;
            double highest = lowest;
            diff = highest;
            Label_00B1:
            if (today > endIdx) {
                outBegIdx = startIdx;
                outNBElement = outIdx;
                return RetCode.Success;
            }
            double tmp = inLow[today];
            if (lowestIdx >= trailingIdx) {
                if (tmp <= lowest) {
                    lowestIdx = today;
                    lowest = tmp;
                    diff = (highest - lowest) / -100.0;
                }
                goto Label_0112;
            }
            lowestIdx = trailingIdx;
            lowest = inLow[lowestIdx];
            int i = lowestIdx;
            Label_00D0:
            i++;
            if (i <= today) {
                tmp = inLow[i];
                if (tmp < lowest) {
                    lowestIdx = i;
                    lowest = tmp;
                }
                goto Label_00D0;
            }
            diff = (highest - lowest) / -100.0;
            Label_0112:
            tmp = inHigh[today];
            if (highestIdx >= trailingIdx) {
                if (tmp >= highest) {
                    highestIdx = today;
                    highest = tmp;
                    diff = (highest - lowest) / -100.0;
                }
                goto Label_016B;
            }
            highestIdx = trailingIdx;
            highest = inHigh[highestIdx];
            i = highestIdx;
            Label_0129:
            i++;
            if (i <= today) {
                tmp = inHigh[i];
                if (tmp > highest) {
                    highestIdx = i;
                    highest = tmp;
                }
                goto Label_0129;
            }
            diff = (highest - lowest) / -100.0;
            Label_016B:
            if (diff != 0.0) {
                outReal[outIdx] = (highest - inClose[today]) / diff;
                outIdx++;
            }
            else {
                outReal[outIdx] = 0.0;
                outIdx++;
            }
            trailingIdx++;
            today++;
            goto Label_00B1;
        }
        public static RetCode Wma(int startIdx,int endIdx,SmartQuant.ISeries inReal,int optInTimePeriod,ref int outBegIdx,ref int outNBElement,double[] outReal)
        {
            double tempReal;
            if (startIdx < 0) {
                return RetCode.OutOfRangeStartIndex;
            }
            if ((endIdx < 0) || (endIdx < startIdx)) {
                return RetCode.OutOfRangeEndIndex;
            }
            if (inReal == null) {
                return RetCode.BadParam;
            }
            if (optInTimePeriod == -2147483648) {
                optInTimePeriod = 30;
            }
            else if ((optInTimePeriod < 2) || (optInTimePeriod > 0x186a0)) {
                return RetCode.BadParam;
            }
            if (outReal == null) {
                return RetCode.BadParam;
            }
            int lookbackTotal = optInTimePeriod - 1;
            if (startIdx < lookbackTotal) {
                startIdx = lookbackTotal;
            }
            if (startIdx > endIdx) {
                outBegIdx = 0;
                outNBElement = 0;
                return RetCode.Success;
            }
            if (optInTimePeriod == 1) {
                outBegIdx = startIdx;
                outNBElement = (endIdx - startIdx) + 1;
                Array.Copy(inReal, startIdx, outReal, 0, outNBElement);
                return RetCode.Success;
            }
            int divider = (optInTimePeriod * (optInTimePeriod + 1)) >> 1;
            int outIdx = 0;
            int trailingIdx = startIdx - lookbackTotal;
            double periodSub = 0.0;
            double periodSum = periodSub;
            int inIdx = trailingIdx;
            int i = 1;
            while (true) {
                if (inIdx >= startIdx) {
                    break;
                }
                tempReal = inReal[inIdx];
                inIdx++;
                periodSub += tempReal;
                periodSum += tempReal * i;
                i++;
            }
            double trailingValue = 0.0;
            while (true) {
                if (inIdx > endIdx) {
                    break;
                }
                tempReal = inReal[inIdx];
                inIdx++;
                periodSub += tempReal;
                periodSub -= trailingValue;
                periodSum += tempReal * optInTimePeriod;
                trailingValue = inReal[trailingIdx];
                trailingIdx++;
                outReal[outIdx] = periodSum / ((double)divider);
                outIdx++;
                periodSum -= periodSub;
            }
            outNBElement = outIdx;
            outBegIdx = startIdx;
            return RetCode.Success;
        }
}
}
