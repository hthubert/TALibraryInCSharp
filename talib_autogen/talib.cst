<%-- 
Name:
Author: 
Description: 
--%>
<%@ Template Language="C#" TargetLanguage="C#" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Xml.Serialization" %>

<script runat="template">
public enum MAType {
    Sma, Ema, Wma, Dema, Tema, Trima, Kama, Mama, T3
}

#region XmlClass
[XmlRoot(ElementName = "RequiredInputArgument")]
    public class RequiredInputArgument {
    [XmlElement(ElementName = "Type")]
        public string Type {
        get; set;
    }
    [XmlElement(ElementName = "Name")]
        public string Name {
        get; set;
    }
}

[XmlRoot(ElementName = "RequiredInputArguments")]
    public class RequiredInputArguments {
    [XmlElement(ElementName = "RequiredInputArgument")]
        public List<RequiredInputArgument> RequiredInputArgument {
        get; set;
    }
}

[XmlRoot(ElementName = "Flags")]
    public class Flags {
    [XmlElement(ElementName = "Flag")]
        public List<string> Flag {
        get; set;
    }
}

[XmlRoot(ElementName = "OutputArgument")]
    public class OutputArgument {
    [XmlElement(ElementName = "Type")]
        public string Type {
        get; set;
    }
    [XmlElement(ElementName = "Name")]
        public string Name {
        get; set;
    }
    [XmlElement(ElementName = "Flags")]
        public Flags Flags {
        get; set;
    }
}

[XmlRoot(ElementName = "OutputArguments")]
    public class OutputArguments {
    [XmlElement(ElementName = "OutputArgument")]
        public List<OutputArgument> OutputArgument {
        get; set;
    }
}

[XmlRoot(ElementName = "FinancialFunction")]
    public class FinancialFunction {
    [XmlElement(ElementName = "Abbreviation")]
        public string Abbreviation {
        get; set;
    }
    [XmlElement(ElementName = "CamelCaseName")]
        public string CamelCaseName {
        get; set;
    }
    [XmlElement(ElementName = "ShortDescription")]
        public string ShortDescription {
        get; set;
    }
    [XmlElement(ElementName = "GroupId")]
        public string GroupId {
        get; set;
    }
    [XmlElement(ElementName = "RequiredInputArguments")]
        public RequiredInputArguments RequiredInputArguments {
        get; set;
    }
    [XmlElement(ElementName = "OutputArguments")]
        public OutputArguments OutputArguments {
        get; set;
    }
    [XmlElement(ElementName = "OptionalInputArguments")]
        public OptionalInputArguments OptionalInputArguments {
        get; set;
    }
    [XmlElement(ElementName = "Flags")]
        public Flags Flags {
        get; set;
    }
}

[XmlRoot(ElementName = "Range")]
    public class Range {
    [XmlElement(ElementName = "Minimum")]
        public string Minimum {
        get; set;
    }
    [XmlElement(ElementName = "Maximum")]
        public string Maximum {
        get; set;
    }
    [XmlElement(ElementName = "SuggestedStart")]
        public string SuggestedStart {
        get; set;
    }
    [XmlElement(ElementName = "SuggestedEnd")]
        public string SuggestedEnd {
        get; set;
    }
    [XmlElement(ElementName = "SuggestedIncrement")]
        public string SuggestedIncrement {
        get; set;
    }
    [XmlElement(ElementName = "Precision")]
        public string Precision {
        get; set;
    }
}

[XmlRoot(ElementName = "OptionalInputArgument")]
    public class OptionalInputArgument {
    [XmlElement(ElementName = "Name")]
        public string Name {
        get; set;
    }
    [XmlElement(ElementName = "ShortDescription")]
        public string ShortDescription {
        get; set;
    }
    [XmlElement(ElementName = "Type")]
        public string Type {
        get; set;
    }
    [XmlElement(ElementName = "Range")]
        public Range Range {
        get; set;
    }
    [XmlElement(ElementName = "DefaultValue")]
        public string DefaultValue {
        get; set;
    }
}

[XmlRoot(ElementName = "OptionalInputArguments")]
    public class OptionalInputArguments {
    [XmlElement(ElementName = "OptionalInputArgument")]
        public List<OptionalInputArgument> OptionalInputArgument {
        get; set;
    }
}

[XmlRoot(ElementName = "FinancialFunctions")]
    public class FinancialFunctions {
    [XmlElement(ElementName = "FinancialFunction")]
        public List<FinancialFunction> FinancialFunction {
        get; set;
    }
}
#endregion

private static readonly HashSet<string> BarDataItems = new HashSet<string> {
    "High", "Low", "Open", "Close", "Volume"
};

public FinancialFunctions Load() {
    var fs = File.Open("ta_func_api.xml", FileMode.Open);
    using (var sr = new StreamReader(fs, Encoding.UTF8)) {
        var xz = new XmlSerializer(typeof (FinancialFunctions));
        var funcs = (FinancialFunctions) xz.Deserialize(sr);
        return funcs;
    }
}

public bool HasSecondInput(FinancialFunction func) {
    var inputs = func.RequiredInputArguments.RequiredInputArgument;
    if (inputs.Count > 1 && !inputs.Any(n => BarDataItems.Contains(n.Name))) {
        return true;
    }
    return false;
}

public string GetOptionType(OptionalInputArgument arg) {
    switch (arg.Type) {
        case "Integer": return "int";
        case "Double": return "double";
        case "MA Type": return "TaLib.Core.MAType";
    }
    return "";
}

public string GetOptionDefaultValue(OptionalInputArgument arg) {
    return (arg.Type == "MA Type") ? "TaLib.Core.MAType.Sma" : arg.DefaultValue;
}

public string GetOptionName(OptionalInputArgument arg) {
    return arg.Name.Replace(" ", "").Replace("-", "");
}

public string GetOptionCamelCaseName(OptionalInputArgument arg) {
    var name = GetOptionName(arg);
    if (name == "MAType") {
        return "maType";
    }
    return name.Substring(0, 1).ToLower() + name.Substring(1);
}

public string GetIndicatorOption(FinancialFunction func) {
    if (func.OptionalInputArguments != null) {
        var line = new StringBuilder();
        foreach (var o in func.OptionalInputArguments.OptionalInputArgument) {
            if (line.Length > 0) line.Append(",");
            line.Append("{" + GetOptionName(o) + "}");
        }
        line.Insert(0, "(");
        line.Append(")");
        return line.ToString();
    }
    return string.Empty;
}

public string GetConstructorArgs(FinancialFunction func) {
    var line = new StringBuilder();
    var inputs = func.RequiredInputArguments.RequiredInputArgument;
    if (HasSecondInput(func)) {
        line.Append(", SmartQuant.ISeries input2");
    }
    if (func.OptionalInputArguments != null) {
        foreach (var o in func.OptionalInputArguments.OptionalInputArgument) {
            line.AppendFormat(", {0} {1} = {2}", GetOptionType(o), GetOptionCamelCaseName(o), GetOptionDefaultValue(o));
        }
    }
    return line.ToString();
}

public string GetOutputName(OutputArgument o) {
    return o.Name.Replace("out", "");
}
public string GetOutputType(OutputArgument o) {
    return o.Type == "Double Array" ? "double" : "int";
}
public string GetTaCallInput(FinancialFunction func, bool camelCaseName = false) {
    var line = new StringBuilder();
    var inputs = func.RequiredInputArguments.RequiredInputArgument;
    if (inputs.Any(n => BarDataItems.Contains(n.Name))) {
        foreach (var i in inputs) {
            line.Append(", In" + i.Name);
        }
    }
    else {
        line.Append(", input");
        if (inputs.Count > 1)
            line.Append(", " + (camelCaseName ? "input2" : "_input2"));
    }
    if (func.OptionalInputArguments != null){
        var options = func.OptionalInputArguments.OptionalInputArgument;
        foreach(var oi in options){
            line.Append(", " + (camelCaseName ? GetOptionCamelCaseName(oi) : GetOptionName(oi)));
        }
    }
    return line.ToString();
}
public string GetTaCallOutput(FinancialFunction func) {
    var line = new StringBuilder();
    var outputs = func.OutputArguments.OutputArgument;
    foreach(var o in outputs){
        line.Append(", _" + GetOutputName(o));
    }
    var inputs = func.RequiredInputArguments.RequiredInputArgument;
    if (inputs.Any(n => BarDataItems.Contains(n.Name))) {
        line.Append(", input");
    }
    return line.ToString();
}

public string GetValueReturnType(FinancialFunction func)
{
    var outputs = func.OutputArguments.OutputArgument;
    if (outputs.Count == 1){
        return GetOutputType(outputs[0]);
    }
    else{
        var line = new StringBuilder();
        foreach(var o in outputs){
            if (line.Length > 0) line.Append(", ");
            line.Append(GetOutputType(o));
        }
        line.Insert(0,"(");
        line.Append(")");
        return line.ToString();
    }
}

public string GetValueReturn(FinancialFunction func){
    var outputs = func.OutputArguments.OutputArgument;
    if (outputs.Count == 1){
        return $"_{GetOutputName(outputs[0])}[0]";
    }
    else{
        var line = new StringBuilder();
        foreach(var o in outputs){
            if (line.Length > 0) line.Append(", ");
            line.Append($"_{GetOutputName(o)}[0]");
        }
        line.Insert(0,"(");
        line.Append(")");
        return line.ToString();
    }

}

public string GetDefault(string type){
    return type == "double" ? "double.NaN" : "-1";
}

public string GetValueReturnDefault(FinancialFunction func){
    var outputs = func.OutputArguments.OutputArgument;
    if (outputs.Count == 1){
        return GetDefault(GetOutputType(outputs[0]));
    }
    else{
        var line = new StringBuilder();
        foreach(var o in outputs){
            if (line.Length > 0) line.Append(", ");
            line.Append(GetDefault(GetOutputType(o)));
        }
        line.Insert(0,"(");
        line.Append(")");
        return line.ToString();
    }
}
</script>
<%
var funcs = Load();

%>
using System;
using TaLib;
namespace QuantBox
{
<%
foreach(var func in funcs.FinancialFunction)
{
%>
    /// <summary>
    /// <%=func.ShortDescription %> (<%=func.GroupId%>)
    /// </summary>
    public class Ta<%=func.CamelCaseName%>: TaIndicator
    {
        <%if (HasSecondInput(func)) {%>private SmartQuant.ISeries _input2;<%}%>
        <%for(var i = 0; i < func.OutputArguments.OutputArgument.Count; i++){ var o = func.OutputArguments.OutputArgument[i];%>
        private readonly <%=GetOutputType(o)%>[] _<%=GetOutputName(o)%> = new <%=GetOutputType(o)%>[1];
        <%}%>
        protected override void Init()
        {
            name = $"Ta<%=func.CamelCaseName%><%=GetIndicatorOption(func)%>";
            description = "<%=func.ShortDescription %> (<%=func.GroupId%>)";
            Clear();
            calculate = true;
        }
        
        public Ta<%=func.CamelCaseName%>(SmartQuant.ISeries input<%=GetConstructorArgs(func)%>) : base(input)
        {
            <%if (HasSecondInput(func)) {%> _input2 = input2;<%}%>
            <%if (func.OptionalInputArguments != null){ foreach(var o in func.OptionalInputArguments.OptionalInputArgument){%>
            <%=string.Format("{0} = {1};",GetOptionName(o), GetOptionCamelCaseName(o))%>
            <%}}%>
            <%if (func.OutputArguments.OutputArgument.Count > 1){ for(var i = 1; i < func.OutputArguments.OutputArgument.Count; i++){ var o = func.OutputArguments.OutputArgument[i];%>
            <%=GetOutputName(o)%> = new SmartQuant.TimeSeries();
            <%}}%>
            Init();
        }
        
        <%if (func.OptionalInputArguments != null){ foreach(var o in func.OptionalInputArguments.OptionalInputArgument){%>
        public <%=GetOptionType(o)%> <%=GetOptionName(o)%> { get;}
        <%}}%>
        <%if (func.OutputArguments.OutputArgument.Count > 1){ for(var i = 0; i < func.OutputArguments.OutputArgument.Count; i++){ var o = func.OutputArguments.OutputArgument[i];%>
        <%if (i == 0){%>public SmartQuant.TimeSeries <%=GetOutputName(o)%> => this;<% continue; }%>
        public SmartQuant.TimeSeries <%=GetOutputName(o)%> { get; }
        <%}}%>
        public override void Calculate(int index)
        {
            var outBegIdx = 0;
            var outNBElement = 0;
            var ret = TaLib.Core.<%=func.CamelCaseName%>(index, index<%=GetTaCallInput(func)%>,
                ref outBegIdx, ref outNBElement<%=GetTaCallOutput(func)%>);
            if (ret == TaLib.Core.RetCode.Success && outNBElement > 0) {
                var datetime = input.GetDateTime(index);
            <%for(var i = 0; i < func.OutputArguments.OutputArgument.Count; i++){ var o = func.OutputArguments.OutputArgument[i];%>
                <%if (i == 0){%>Add(datetime,_<%=GetOutputName(o)%>[0]);<% continue; }%>
                <%=GetOutputName(o)%>.Add(datetime, _<%=GetOutputName(o)%>[0]);
            <%}%>
            }
        }
        
        public static <%=GetValueReturnType(func)%> Value(SmartQuant.ISeries input, int index<%=GetConstructorArgs(func)%>)
        {
            var InOpen = new double[]{ 0 };
            var InClose = new double[]{ 0 };
            var InHigh = new double[]{ 0 };
            var InLow = new double[]{ 0 };
            var InVolume = new double[]{ 0 };
            var outBegIdx = 0;
            var outNBElement = 0;
            <%for(var i = 0; i < func.OutputArguments.OutputArgument.Count; i++){ var o = func.OutputArguments.OutputArgument[i];%>
            var _<%=GetOutputName(o)%> = new <%=GetOutputType(o)%>[1];
            <%}%>
            var ret = TaLib.Core.<%=func.CamelCaseName%>(index, index<%=GetTaCallInput(func, true)%>,
                ref outBegIdx, ref outNBElement<%=GetTaCallOutput(func)%>);
            if (ret == TaLib.Core.RetCode.Success && outNBElement > 0) {
                return <%=GetValueReturn(func)%>;
            }
            return <%=GetValueReturnDefault(func)%>;
        }
    }
<%
}
%>
}